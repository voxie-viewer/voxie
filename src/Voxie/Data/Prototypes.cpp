// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#include "Prototypes.hpp"

#include <Voxie/Node/NodePrototype.hpp>
#include <Voxie/Node/PropertyValueConvertDBus.hpp>
#include <Voxie/Node/PropertyValueConvertRaw.hpp>
namespace vx {
inline namespace data_prop {
ContainerPropertiesEntry::~ContainerPropertiesEntry() {}
ContainerPropertiesBase::~ContainerPropertiesBase() {}
ContainerPropertiesCopy::ContainerPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
static const char _prototype_Container_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  67,  111, 110, 116, 97,  105, 110, 101, 114, 78,  111, 100,
    101, 34,  44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,
    116, 97,  46,  67,  111, 110, 116, 97,  105, 110, 101, 114, 78,  111, 100,
    101, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 69,  120,
    112, 111, 114, 116, 101, 114, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  70,  105, 108, 101, 70,  111, 114, 109, 97,  116, 46,  67,
    111, 110, 116, 97,  105, 110, 101, 114, 68,  97,  116, 97,  46,  74,  115,
    111, 110, 46,  69,  120, 112, 111, 114, 116, 34,  44,  32,  34,  68,  101,
    115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  65,  32,
    100, 97,  116, 97,  32,  110, 111, 100, 101, 32,  116, 104, 97,  116, 32,
    99,  97,  110, 32,  104, 111, 108, 100, 32,  97,  110, 32,  97,  114, 98,
    105, 116, 114, 97,  114, 121, 32,  97,  109, 111, 117, 110, 116, 32,  111,
    102, 32,  118, 111, 120, 105, 101, 32,  100, 97,  116, 97,  32,  111, 98,
    106, 101, 99,  116, 115, 34,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  67,  111, 110, 116, 97,  105,
    110, 101, 114, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,
    58,  47,  105, 99,  111, 110, 115, 47,  116, 97,  98,  108, 101, 46,  112,
    110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  67,  111, 110,
    116, 97,  105, 110, 101, 114, 34,  44,  32,  34,  78,  111, 100, 101, 75,
    105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    78,  111, 100, 101, 75,  105, 110, 100, 46,  68,  97,  116, 97,  34,  44,
    32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,
    123, 125, 44,  32,  34,  83,  117, 112, 112, 111, 114, 116, 101, 100, 68,
    97,  116, 97,  68,  66,  117, 115, 73,  110, 116, 101, 114, 102, 97,  99,
    101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    67,  111, 110, 116, 97,  105, 110, 101, 114, 68,  97,  116, 97,  34,  93,
    44,  32,  34,  84,  97,  103, 115, 34,  58,  32,  34,  34,  44,  32,  34,
    85,  73,  34,  58,  32,  123, 34,  83,  105, 100, 101, 80,  97,  110, 101,
    108, 83,  101, 99,  116, 105, 111, 110, 115, 34,  58,  32,  91,  123, 34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    73,  110, 102, 111, 34,  44,  32,  34,  69,  110, 116, 114, 105, 101, 115,
    34,  58,  32,  91,  123, 34,  78,  97,  109, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  67,  111, 110,
    116, 97,  105, 110, 101, 114, 46,  73,  110, 102, 111, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  67,  117, 115, 116, 111, 109, 34,
    125, 93,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  73,  110,
    102, 111, 83,  101, 99,  116, 105, 111, 110, 34,  125, 93,  125, 125, 0};
const char* ContainerProperties::_getPrototypeJson() {
  return _prototype_Container_;
}

ContainerProperties::~ContainerProperties() {}

ContainerProperties::ContainerProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
}

}  // namespace data_prop
inline namespace data_prop {
EventListDataPropertiesEntry::~EventListDataPropertiesEntry() {}
EventListDataPropertiesBase::~EventListDataPropertiesBase() {}
EventListDataPropertiesCopy::EventListDataPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
static const char _prototype_EventListData_[] = {
    123, 34,  68,  101, 102, 97,  117, 108, 116, 69,  120, 112, 111, 114, 116,
    101, 114, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,
    105, 108, 101, 70,  111, 114, 109, 97,  116, 46,  69,  118, 101, 110, 116,
    76,  105, 115, 116, 46,  74,  115, 111, 110, 46,  69,  120, 112, 111, 114,
    116, 34,  44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111,
    110, 34,  58,  32,  34,  65,  32,  115, 101, 114, 105, 101, 115, 32,  111,
    102, 32,  97,  99,  116, 105, 118, 97,  116, 105, 111, 110, 32,  101, 118,
    101, 110, 116, 115, 32,  114, 101, 99,  111, 114, 100, 101, 100, 32,  98,
    121, 32,  97,  32,  99,  111, 109, 112, 117, 116, 101, 114, 32,  116, 111,
    109, 111, 103, 114, 97,  112, 104, 121, 32,  115, 99,  97,  110, 110, 101,
    114, 34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  69,  118, 101, 110, 116, 32,  76,  105, 115, 116,
    34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,  47,  105,
    99,  111, 110, 115, 47,  116, 97,  98,  108, 101, 45,  115, 112, 108, 105,
    116, 45,  99,  111, 108, 117, 109, 110, 46,  112, 110, 103, 34,  44,  32,
    34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  68,  97,  116, 97,  46,  69,  118, 101, 110, 116, 76,  105, 115,
    116, 68,  97,  116, 97,  34,  44,  32,  34,  78,  111, 100, 101, 75,  105,
    110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,
    111, 100, 101, 75,  105, 110, 100, 46,  68,  97,  116, 97,  34,  44,  32,
    34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123,
    125, 44,  32,  34,  83,  117, 112, 112, 111, 114, 116, 101, 100, 68,  97,
    116, 97,  68,  66,  117, 115, 73,  110, 116, 101, 114, 102, 97,  99,  101,
    115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  69,
    118, 101, 110, 116, 76,  105, 115, 116, 68,  97,  116, 97,  65,  99,  99,
    101, 115, 115, 111, 114, 34,  93,  125, 0};
const char* EventListDataProperties::_getPrototypeJson() {
  return _prototype_EventListData_;
}

EventListDataProperties::~EventListDataProperties() {}

EventListDataProperties::EventListDataProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
}

}  // namespace data_prop
inline namespace data_prop {
GeometricPrimitivePropertiesEntry::~GeometricPrimitivePropertiesEntry() {}
GeometricPrimitivePropertiesEntry::GeometricPrimitivePropertiesEntry(
    vx::PropType::MeasurementPrimitive1, quint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
          "MeasurementPrimitive1",
          QVariant::fromValue<quint64>(
              vx::PropertyValueConvertRaw<quint64, quint64>::toRaw(value_))) {}
GeometricPrimitivePropertiesEntry::GeometricPrimitivePropertiesEntry(
    vx::PropType::MeasurementPrimitive2, quint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
          "MeasurementPrimitive2",
          QVariant::fromValue<quint64>(
              vx::PropertyValueConvertRaw<quint64, quint64>::toRaw(value_))) {}
GeometricPrimitivePropertiesEntry::GeometricPrimitivePropertiesEntry(
    vx::PropType::SelectedPrimitive, quint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.SelectedPrimitive",
          QVariant::fromValue<quint64>(
              vx::PropertyValueConvertRaw<quint64, quint64>::toRaw(value_))) {}
GeometricPrimitivePropertiesBase::~GeometricPrimitivePropertiesBase() {}
GeometricPrimitivePropertiesCopy::GeometricPrimitivePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
quint64 GeometricPrimitivePropertiesCopy::measurementPrimitive1() {
  return vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
      vx::Node::parseVariant<quint64>(
          (*_properties)["de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
                         "MeasurementPrimitive1"]));
}
quint64 GeometricPrimitivePropertiesCopy::measurementPrimitive1Raw() {
  return vx::Node::parseVariant<quint64>(
      (*_properties)["de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
                     "MeasurementPrimitive1"]);
}
quint64 GeometricPrimitivePropertiesCopy::measurementPrimitive2() {
  return vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
      vx::Node::parseVariant<quint64>(
          (*_properties)["de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
                         "MeasurementPrimitive2"]));
}
quint64 GeometricPrimitivePropertiesCopy::measurementPrimitive2Raw() {
  return vx::Node::parseVariant<quint64>(
      (*_properties)["de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
                     "MeasurementPrimitive2"]);
}
quint64 GeometricPrimitivePropertiesCopy::selectedPrimitive() {
  return vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
      vx::Node::parseVariant<quint64>(
          (*_properties)["de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
                         "SelectedPrimitive"]));
}
quint64 GeometricPrimitivePropertiesCopy::selectedPrimitiveRaw() {
  return vx::Node::parseVariant<quint64>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Data.GeometricPrimitive.SelectedPrimitive"]);
}
static const char _prototype_GeometricPrimitive_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105,
    109, 105, 116, 105, 118, 101, 79,  98,  106, 101, 99,  116, 34,  93,  44,
    32,  34,  68,  101, 102, 97,  117, 108, 116, 69,  120, 112, 111, 114, 116,
    101, 114, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,
    105, 108, 101, 70,  111, 114, 109, 97,  116, 46,  71,  101, 111, 109, 101,
    116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101, 46,  74,
    115, 111, 110, 46,  69,  120, 112, 111, 114, 116, 34,  44,  32,  34,  68,
    101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  65,
    32,  115, 101, 116, 32,  111, 102, 32,  103, 101, 111, 109, 101, 116, 114,
    105, 99,  32,  112, 114, 105, 109, 105, 116, 105, 118, 101, 115, 32,  40,
    112, 111, 105, 110, 116, 115, 32,  101, 116, 99,  46,  41,  34,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  71,  101, 111, 109, 101, 116, 114, 105, 99,  32,  112, 114, 105, 109,
    105, 116, 105, 118, 101, 32,  99,  111, 108, 108, 101, 99,  116, 105, 111,
    110, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,  47,
    105, 99,  111, 110, 115, 47,  112, 114, 111, 99,  101, 115, 115, 111, 114,
    46,  112, 110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  71,
    101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105,
    118, 101, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100, 101,
    75,  105, 110, 100, 46,  68,  97,  116, 97,  34,  44,  32,  34,  80,  114,
    111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  71,  101, 111, 109,
    101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101, 46,
    77,  101, 97,  115, 117, 114, 101, 109, 101, 110, 116, 80,  114, 105, 109,
    105, 116, 105, 118, 101, 49,  34,  58,  32,  123, 34,  67,  111, 109, 112,
    97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  71,  101, 111,
    109, 101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101,
    79,  98,  106, 101, 99,  116, 46,  77,  101, 97,  115, 117, 114, 101, 109,
    101, 110, 116, 80,  114, 105, 109, 105, 116, 105, 118, 101, 49,  34,  93,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  77,  101, 97,  115, 117, 114, 101, 109, 101, 110, 116, 32,
    112, 114, 105, 109, 105, 116, 105, 118, 101, 32,  49,  34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  71,
    101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105,
    118, 101, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    68,  97,  116, 97,  46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,
    114, 105, 109, 105, 116, 105, 118, 101, 46,  77,  101, 97,  115, 117, 114,
    101, 109, 101, 110, 116, 80,  114, 105, 109, 105, 116, 105, 118, 101, 50,
    34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108,
    105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,
    80,  114, 105, 109, 105, 116, 105, 118, 101, 79,  98,  106, 101, 99,  116,
    46,  77,  101, 97,  115, 117, 114, 101, 109, 101, 110, 116, 80,  114, 105,
    109, 105, 116, 105, 118, 101, 50,  34,  93,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  77,  101, 97,
    115, 117, 114, 101, 109, 101, 110, 116, 32,  112, 114, 105, 109, 105, 116,
    105, 118, 101, 32,  50,  34,  44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101,
    114, 116, 121, 84,  121, 112, 101, 46,  71,  101, 111, 109, 101, 116, 114,
    105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101, 34,  125, 44,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  71,
    101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105,
    118, 101, 46,  83,  101, 108, 101, 99,  116, 101, 100, 80,  114, 105, 109,
    105, 116, 105, 118, 101, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,
    116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,
    32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  71,  101, 111, 109,
    101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101, 79,
    98,  106, 101, 99,  116, 46,  83,  101, 108, 101, 99,  116, 101, 100, 80,
    114, 105, 109, 105, 116, 105, 118, 101, 34,  93,  44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  101,
    108, 101, 99,  116, 101, 100, 32,  112, 114, 105, 109, 105, 116, 105, 118,
    101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,
    121, 112, 101, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114,
    105, 109, 105, 116, 105, 118, 101, 34,  125, 125, 44,  32,  34,  83,  117,
    112, 112, 111, 114, 116, 101, 100, 68,  97,  116, 97,  68,  66,  117, 115,
    73,  110, 116, 101, 114, 102, 97,  99,  101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  71,  101, 111, 109, 101, 116, 114,
    105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101, 68,  97,  116, 97,
    34,  93,  125, 0};
const char* GeometricPrimitiveProperties::_getPrototypeJson() {
  return _prototype_GeometricPrimitive_;
}

GeometricPrimitiveProperties::~GeometricPrimitiveProperties() {}

quint64 GeometricPrimitiveProperties::measurementPrimitive1() {
  return vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
      _node->getNodePropertyTyped<quint64>(
          "de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
          "MeasurementPrimitive1"));
}
quint64 GeometricPrimitiveProperties::measurementPrimitive1Raw() {
  return _node->getNodePropertyTyped<quint64>(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.MeasurementPrimitive1");
}
QSharedPointer<NodeProperty>
GeometricPrimitiveProperties::measurementPrimitive1Property() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.MeasurementPrimitive1",
      false);
}
void GeometricPrimitiveProperties::setMeasurementPrimitive1(quint64 value) {
  _node->setNodePropertyTyped<quint64>(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.MeasurementPrimitive1",
      vx::PropertyValueConvertRaw<quint64, quint64>::toRaw(value));
}
quint64 GeometricPrimitiveProperties::measurementPrimitive2() {
  return vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
      _node->getNodePropertyTyped<quint64>(
          "de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
          "MeasurementPrimitive2"));
}
quint64 GeometricPrimitiveProperties::measurementPrimitive2Raw() {
  return _node->getNodePropertyTyped<quint64>(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.MeasurementPrimitive2");
}
QSharedPointer<NodeProperty>
GeometricPrimitiveProperties::measurementPrimitive2Property() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.MeasurementPrimitive2",
      false);
}
void GeometricPrimitiveProperties::setMeasurementPrimitive2(quint64 value) {
  _node->setNodePropertyTyped<quint64>(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.MeasurementPrimitive2",
      vx::PropertyValueConvertRaw<quint64, quint64>::toRaw(value));
}
quint64 GeometricPrimitiveProperties::selectedPrimitive() {
  return vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
      _node->getNodePropertyTyped<quint64>(
          "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.SelectedPrimitive"));
}
quint64 GeometricPrimitiveProperties::selectedPrimitiveRaw() {
  return _node->getNodePropertyTyped<quint64>(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.SelectedPrimitive");
}
QSharedPointer<NodeProperty>
GeometricPrimitiveProperties::selectedPrimitiveProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.SelectedPrimitive",
      false);
}
void GeometricPrimitiveProperties::setSelectedPrimitive(quint64 value) {
  _node->setNodePropertyTyped<quint64>(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.SelectedPrimitive",
      vx::PropertyValueConvertRaw<quint64, quint64>::toRaw(value));
}
GeometricPrimitiveProperties::GeometricPrimitiveProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_MeasurementPrimitive1 = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.MeasurementPrimitive1",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_MeasurementPrimitive1](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_MeasurementPrimitive1) return;
        quint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
              Node::parseVariant<quint64>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
                         "MeasurementPrimitive1\":"
                      << e.what();
          return;
        }
        Q_EMIT this->measurementPrimitive1Changed(valueCasted);
      });
  auto _prop_MeasurementPrimitive2 = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.MeasurementPrimitive2",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_MeasurementPrimitive2](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_MeasurementPrimitive2) return;
        quint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
              Node::parseVariant<quint64>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
                         "MeasurementPrimitive2\":"
                      << e.what();
          return;
        }
        Q_EMIT this->measurementPrimitive2Changed(valueCasted);
      });
  auto _prop_SelectedPrimitive = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Data.GeometricPrimitive.SelectedPrimitive",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_SelectedPrimitive](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_SelectedPrimitive) return;
        quint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<quint64, quint64>::fromRaw(
              Node::parseVariant<quint64>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Data.GeometricPrimitive."
                         "SelectedPrimitive\":"
                      << e.what();
          return;
        }
        Q_EMIT this->selectedPrimitiveChanged(valueCasted);
      });
}

}  // namespace data_prop
inline namespace data_prop {
SurfacePropertiesEntry::~SurfacePropertiesEntry() {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::Rotation,
                                               QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.MovableDataNode.Rotation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::Translation,
                                               QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.MovableDataNode.Translation",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
SurfacePropertiesBase::~SurfacePropertiesBase() {}
SurfacePropertiesCopy::SurfacePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QQuaternion SurfacePropertiesCopy::rotation() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      QQuaternion>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                              double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.MovableDataNode.Rotation"]));
}
std::tuple<double, double, double, double>
SurfacePropertiesCopy::rotationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.MovableDataNode.Rotation"]);
}
QVector3D SurfacePropertiesCopy::translation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>((
          *_properties)["de.uni_stuttgart.Voxie.MovableDataNode.Translation"]));
}
std::tuple<double, double, double> SurfacePropertiesCopy::translationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.MovableDataNode.Translation"]);
}
static const char _prototype_Surface_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  117, 114, 102, 97,  99,  101, 79,  98,  106, 101, 99,
    116, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 69,  120,
    112, 111, 114, 116, 101, 114, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  70,  105, 108, 101, 70,  111, 114, 109, 97,  116, 46,  80,
    108, 121, 46,  69,  120, 112, 111, 114, 116, 34,  44,  32,  34,  68,  101,
    115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  65,  32,
    51,  68,  32,  116, 114, 105, 97,  110, 103, 117, 108, 97,  114, 32,  109,
    101, 115, 104, 32,  114, 101, 112, 114, 101, 115, 101, 110, 116, 105, 110,
    103, 32,  97,  32,  51,  68,  32,  115, 117, 114, 102, 97,  99,  101, 46,
    34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  83,  117, 114, 102, 97,  99,  101, 34,  44,  32,  34,
    73,  99,  111, 110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110, 115,
    47,  99,  104, 101, 99,  107, 101, 114, 98,  111, 97,  114, 100, 46,  112,
    110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  83,  117, 114,
    102, 97,  99,  101, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110,
    100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111,
    100, 101, 75,  105, 110, 100, 46,  68,  97,  116, 97,  34,  44,  32,  34,
    80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  77,  111, 118, 97,  98,  108, 101,
    68,  97,  116, 97,  78,  111, 100, 101, 46,  82,  111, 116, 97,  116, 105,
    111, 110, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  77,  111, 118, 97,  98,  108, 101,
    68,  97,  116, 97,  79,  98,  106, 101, 99,  116, 46,  82,  111, 116, 97,
    116, 105, 111, 110, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  82,  111, 116, 97,  116, 105,
    111, 110, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 83,
    116, 111, 114, 97,  103, 101, 34,  58,  32,  116, 114, 117, 101, 44,  32,
    34,  73,  115, 67,  117, 115, 116, 111, 109, 85,  73,  34,  58,  32,  116,
    114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    84,  121, 112, 101, 46,  79,  114, 105, 101, 110, 116, 97,  116, 105, 111,
    110, 51,  68,  34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  77,  111, 118, 97,  98,  108, 101, 68,  97,  116, 97,  78,  111, 100,
    101, 46,  84,  114, 97,  110, 115, 108, 97,  116, 105, 111, 110, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  77,  111, 118, 97,  98,  108, 101, 68,  97,  116, 97,
    79,  98,  106, 101, 99,  116, 46,  84,  114, 97,  110, 115, 108, 97,  116,
    105, 111, 110, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  84,  114, 97,  110, 115, 108, 97,
    116, 105, 111, 110, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111,
    109, 83,  116, 111, 114, 97,  103, 101, 34,  58,  32,  116, 114, 117, 101,
    44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 85,  73,  34,  58,
    32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  80,  111, 115, 105, 116, 105, 111, 110,
    51,  68,  34,  125, 125, 44,  32,  34,  83,  117, 112, 112, 111, 114, 116,
    101, 100, 68,  97,  116, 97,  68,  66,  117, 115, 73,  110, 116, 101, 114,
    102, 97,  99,  101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  117, 114, 102, 97,  99,  101, 68,  97,  116, 97,  34,
    93,  125, 0};
const char* SurfaceProperties::_getPrototypeJson() {
  return _prototype_Surface_;
}

SurfaceProperties::~SurfaceProperties() {}

QQuaternion SurfaceProperties::rotation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.MovableDataNode.Rotation"));
}
std::tuple<double, double, double, double> SurfaceProperties::rotationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.MovableDataNode.Rotation");
}
QSharedPointer<NodeProperty> SurfaceProperties::rotationProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.MovableDataNode.Rotation", false);
}
void SurfaceProperties::setRotation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.MovableDataNode.Rotation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
QVector3D SurfaceProperties::translation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.MovableDataNode.Translation"));
}
std::tuple<double, double, double> SurfaceProperties::translationRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.MovableDataNode.Translation");
}
QSharedPointer<NodeProperty> SurfaceProperties::translationProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.MovableDataNode.Translation", false);
}
void SurfaceProperties::setTranslation(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.MovableDataNode.Translation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
SurfaceProperties::SurfaceProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_Rotation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.MovableDataNode.Rotation", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Rotation](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_Rotation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.MovableDataNode.Rotation\":"
              << e.what();
          return;
        }
        Q_EMIT this->rotationChanged(valueCasted);
      });
  auto _prop_Translation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.MovableDataNode.Translation", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Translation](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_Translation) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.MovableDataNode.Translation\":"
              << e.what();
          return;
        }
        Q_EMIT this->translationChanged(valueCasted);
      });
}

}  // namespace data_prop
inline namespace data_prop {
TablePropertiesEntry::~TablePropertiesEntry() {}
TablePropertiesBase::~TablePropertiesBase() {}
TablePropertiesCopy::TablePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
static const char _prototype_Table_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  84,  97,  98,  108, 101, 34,  93,  44,  32,  34,  68,  101,
    102, 97,  117, 108, 116, 69,  120, 112, 111, 114, 116, 101, 114, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 101, 70,
    111, 114, 109, 97,  116, 46,  84,  97,  98,  108, 101, 46,  74,  115, 111,
    110, 46,  69,  120, 112, 111, 114, 116, 34,  44,  32,  34,  68,  101, 115,
    99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  65,  32,  116,
    97,  98,  108, 101, 32,  99,  111, 110, 116, 97,  105, 110, 105, 110, 103,
    32,  105, 110, 102, 111, 114, 109, 97,  116, 105, 111, 110, 32,  97,  98,
    111, 117, 116, 32,  108, 97,  98,  101, 108, 115, 32,  101, 120, 116, 114,
    97,  99,  116, 101, 100, 32,  111, 117, 116, 32,  111, 102, 32,  97,  32,
    51,  68,  32,  118, 111, 108, 117, 109, 101, 46,  34,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  84,
    97,  98,  108, 101, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,
    34,  58,  47,  105, 99,  111, 110, 115, 47,  116, 97,  98,  108, 101, 46,
    112, 110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  84,  97,
    98,  108, 101, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100,
    101, 75,  105, 110, 100, 46,  68,  97,  116, 97,  34,  44,  32,  34,  80,
    114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 125, 44,
    32,  34,  83,  117, 112, 112, 111, 114, 116, 101, 100, 68,  97,  116, 97,
    68,  66,  117, 115, 73,  110, 116, 101, 114, 102, 97,  99,  101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  84,  97,  98,
    108, 101, 68,  97,  116, 97,  34,  93,  125, 0};
const char* TableProperties::_getPrototypeJson() { return _prototype_Table_; }

TableProperties::~TableProperties() {}

TableProperties::TableProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
}

}  // namespace data_prop
inline namespace data_prop {
TomographyRawDataPropertiesEntry::~TomographyRawDataPropertiesEntry() {}
TomographyRawDataPropertiesBase::~TomographyRawDataPropertiesBase() {}
TomographyRawDataPropertiesCopy::TomographyRawDataPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
static const char _prototype_TomographyRawData_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  82,  97,  119, 79,  98,  106, 101, 99,  116, 34,  93,  44,
    32,  34,  68,  101, 102, 97,  117, 108, 116, 69,  120, 112, 111, 114, 116,
    101, 114, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,
    105, 108, 101, 70,  111, 114, 109, 97,  116, 46,  84,  111, 109, 111, 103,
    114, 97,  112, 104, 121, 82,  97,  119, 68,  97,  116, 97,  46,  86,  120,
    84,  82,  97,  119, 46,  69,  120, 112, 111, 114, 116, 34,  44,  32,  34,
    68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,
    65,  32,  115, 101, 116, 32,  111, 102, 32,  50,  68,  32,  105, 109, 97,
    103, 101, 115, 32,  102, 111, 114, 32,  114, 101, 99,  111, 110, 115, 116,
    114, 117, 99,  116, 105, 111, 110, 32,  105, 110, 116, 111, 32,  97,  32,
    51,  68,  32,  118, 111, 108, 117, 109, 101, 34,  44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  84,  111,
    109, 111, 103, 114, 97,  112, 104, 121, 32,  114, 97,  119, 32,  100, 97,
    116, 97,  34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,
    47,  105, 99,  111, 110, 115, 45,  118, 111, 120, 105, 101, 47,  118, 111,
    120, 101, 108, 45,  100, 97,  116, 97,  45,  51,  50,  46,  112, 110, 103,
    34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  84,  111, 109, 111, 103,
    114, 97,  112, 104, 121, 82,  97,  119, 68,  97,  116, 97,  34,  44,  32,
    34,  78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,
    68,  97,  116, 97,  34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116,
    105, 101, 115, 34,  58,  32,  123, 125, 44,  32,  34,  83,  117, 112, 112,
    111, 114, 116, 101, 100, 68,  97,  116, 97,  68,  66,  117, 115, 73,  110,
    116, 101, 114, 102, 97,  99,  101, 115, 34,  58,  32,  91,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  84,  111, 109, 111, 103, 114, 97,  112, 104,
    121, 82,  97,  119, 68,  97,  116, 97,  66,  97,  115, 101, 34,  93,  125,
    0};
const char* TomographyRawDataProperties::_getPrototypeJson() {
  return _prototype_TomographyRawData_;
}

TomographyRawDataProperties::~TomographyRawDataProperties() {}

TomographyRawDataProperties::TomographyRawDataProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
}

}  // namespace data_prop
inline namespace data_prop {
VolumePropertiesEntry::~VolumePropertiesEntry() {}
VolumePropertiesEntry::VolumePropertiesEntry(vx::PropType::Rotation,
                                             QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.MovableDataNode.Rotation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
VolumePropertiesEntry::VolumePropertiesEntry(vx::PropType::Translation,
                                             QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.MovableDataNode.Translation",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
VolumePropertiesBase::~VolumePropertiesBase() {}
VolumePropertiesCopy::VolumePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QQuaternion VolumePropertiesCopy::rotation() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      QQuaternion>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                              double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.MovableDataNode.Rotation"]));
}
std::tuple<double, double, double, double> VolumePropertiesCopy::rotationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.MovableDataNode.Rotation"]);
}
QVector3D VolumePropertiesCopy::translation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>((
          *_properties)["de.uni_stuttgart.Voxie.MovableDataNode.Translation"]));
}
std::tuple<double, double, double> VolumePropertiesCopy::translationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.MovableDataNode.Translation"]);
}
static const char _prototype_Volume_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  111, 108, 117, 109, 101, 79,  98,  106, 101, 99,  116,
    34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 69,  120, 112,
    111, 114, 116, 101, 114, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  70,  105, 108, 101, 70,  111, 114, 109, 97,  116, 46,  72,  100,
    102, 53,  46,  69,  120, 112, 111, 114, 116, 86,  111, 108, 117, 109, 101,
    34,  44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110,
    34,  58,  32,  34,  65,  32,  51,  68,  32,  118, 111, 108, 117, 109, 101,
    32,  110, 111, 100, 101, 46,  34,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  86,  111, 108, 117, 109,
    101, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,  47,
    105, 99,  111, 110, 115, 45,  118, 111, 120, 105, 101, 47,  118, 111, 120,
    101, 108, 45,  100, 97,  116, 97,  45,  51,  50,  46,  112, 110, 103, 34,
    44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  68,  97,  116, 97,  46,  86,  111, 108, 117, 109, 101,
    34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105,
    110, 100, 46,  68,  97,  116, 97,  34,  44,  32,  34,  80,  114, 111, 112,
    101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  77,  111, 118, 97,  98,  108, 101, 68,  97,  116, 97,
    78,  111, 100, 101, 46,  82,  111, 116, 97,  116, 105, 111, 110, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  77,  111, 118, 97,  98,  108, 101, 68,  97,  116, 97,
    79,  98,  106, 101, 99,  116, 46,  82,  111, 116, 97,  116, 105, 111, 110,
    34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  82,  111, 116, 97,  116, 105, 111, 110, 34,  44,
    32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 83,  116, 111, 114, 97,
    103, 101, 34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  73,  115, 67,
    117, 115, 116, 111, 109, 85,  73,  34,  58,  32,  116, 114, 117, 101, 44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101,
    46,  79,  114, 105, 101, 110, 116, 97,  116, 105, 111, 110, 51,  68,  34,
    125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  77,  111, 118,
    97,  98,  108, 101, 68,  97,  116, 97,  78,  111, 100, 101, 46,  84,  114,
    97,  110, 115, 108, 97,  116, 105, 111, 110, 34,  58,  32,  123, 34,  67,
    111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109,
    101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    77,  111, 118, 97,  98,  108, 101, 68,  97,  116, 97,  79,  98,  106, 101,
    99,  116, 46,  84,  114, 97,  110, 115, 108, 97,  116, 105, 111, 110, 34,
    93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  84,  114, 97,  110, 115, 108, 97,  116, 105, 111, 110,
    34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 83,  116, 111,
    114, 97,  103, 101, 34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  73,
    115, 67,  117, 115, 116, 111, 109, 85,  73,  34,  58,  32,  116, 114, 117,
    101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  80,  111, 115, 105, 116, 105, 111, 110, 51,  68,  34,  125,
    125, 44,  32,  34,  83,  117, 112, 112, 111, 114, 116, 101, 100, 68,  97,
    116, 97,  68,  66,  117, 115, 73,  110, 116, 101, 114, 102, 97,  99,  101,
    115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    111, 108, 117, 109, 101, 68,  97,  116, 97,  34,  93,  125, 0};
const char* VolumeProperties::_getPrototypeJson() { return _prototype_Volume_; }

VolumeProperties::~VolumeProperties() {}

QQuaternion VolumeProperties::rotation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.MovableDataNode.Rotation"));
}
std::tuple<double, double, double, double> VolumeProperties::rotationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.MovableDataNode.Rotation");
}
QSharedPointer<NodeProperty> VolumeProperties::rotationProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.MovableDataNode.Rotation", false);
}
void VolumeProperties::setRotation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.MovableDataNode.Rotation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
QVector3D VolumeProperties::translation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.MovableDataNode.Translation"));
}
std::tuple<double, double, double> VolumeProperties::translationRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.MovableDataNode.Translation");
}
QSharedPointer<NodeProperty> VolumeProperties::translationProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.MovableDataNode.Translation", false);
}
void VolumeProperties::setTranslation(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.MovableDataNode.Translation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
VolumeProperties::VolumeProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_Rotation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.MovableDataNode.Rotation", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Rotation](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_Rotation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.MovableDataNode.Rotation\":"
              << e.what();
          return;
        }
        Q_EMIT this->rotationChanged(valueCasted);
      });
  auto _prop_Translation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.MovableDataNode.Translation", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Translation](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_Translation) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.MovableDataNode.Translation\":"
              << e.what();
          return;
        }
        Q_EMIT this->translationChanged(valueCasted);
      });
}

}  // namespace data_prop
inline namespace node_prop {
NodeGroupPropertiesEntry::~NodeGroupPropertiesEntry() {}
NodeGroupPropertiesBase::~NodeGroupPropertiesBase() {}
NodeGroupPropertiesCopy::NodeGroupPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
static const char _prototype_NodeGroup_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  67,  97,  110, 32,  98,  101, 32,  117, 115, 101, 100, 32,  116,
    111, 32,  103, 114, 111, 117, 112, 32,  110, 111, 100, 101, 115, 32,  116,
    111, 103, 101, 116, 104, 101, 114, 32,  115, 111, 32,  116, 104, 101, 121,
    32,  97,  114, 101, 32,  115, 104, 111, 119, 110, 32,  97,  115, 32,  97,
    32,  115, 105, 110, 103, 108, 101, 32,  110, 111, 100, 101, 32,  105, 110,
    32,  116, 104, 101, 32,  110, 111, 100, 101, 32,  103, 114, 97,  112, 104,
    46,  34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  78,  111, 100, 101, 71,  114, 111, 117, 112, 34,
    44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  78,  111, 100, 101, 46,  78,  111, 100, 101, 71,  114,
    111, 117, 112, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100,
    101, 75,  105, 110, 100, 46,  78,  111, 100, 101, 71,  114, 111, 117, 112,
    34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,
    58,  32,  123, 125, 125, 0};
const char* NodeGroupProperties::_getPrototypeJson() {
  return _prototype_NodeGroup_;
}

NodeGroupProperties::~NodeGroupProperties() {}

NodeGroupProperties::NodeGroupProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
}

}  // namespace node_prop
inline namespace property_prop {
PlanePropertiesEntry::~PlanePropertiesEntry() {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::Orientation,
                                           QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Property.Plane.Orientation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::Origin,
                                           QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Property.Plane.Origin",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
PlanePropertiesBase::~PlanePropertiesBase() {}
PlanePropertiesCopy::PlanePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QQuaternion PlanePropertiesCopy::orientation() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      QQuaternion>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                              double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Property.Plane.Orientation"]));
}
std::tuple<double, double, double, double>
PlanePropertiesCopy::orientationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Property.Plane.Orientation"]);
}
QVector3D PlanePropertiesCopy::origin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.Property.Plane.Origin"]));
}
std::tuple<double, double, double> PlanePropertiesCopy::originRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Property.Plane.Origin"]);
}
static const char _prototype_Plane_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  108, 97,  110, 101, 80,  114, 111, 112, 101, 114, 116,
    121, 34,  93,  44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105,
    111, 110, 34,  58,  32,  34,  65,  32,  112, 108, 97,  110, 101, 32,  105,
    115, 32,  97,  32,  51,  68,  32,  112, 114, 111, 112, 101, 114, 116, 121,
    32,  119, 104, 105, 99,  104, 32,  99,  97,  110, 32,  98,  101, 32,  117,
    115, 101, 100, 32,  105, 110, 32,  116, 104, 101, 32,  50,  68,  32,  97,
    110, 100, 32,  51,  68,  32,  118, 105, 115, 117, 97,  108, 105, 115, 97,
    116, 105, 111, 110, 32,  111, 102, 32,  86,  111, 120, 105, 101, 46,  34,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  80,  108, 97,  110, 101, 34,  44,  32,  34,  73,  99,  111,
    110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  112, 97,
    112, 101, 114, 45,  112, 108, 97,  110, 101, 46,  112, 110, 103, 34,  44,
    32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 46,  80,  108, 97,
    110, 101, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100, 101,
    75,  105, 110, 100, 46,  80,  114, 111, 112, 101, 114, 116, 121, 34,  44,
    32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,
    123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101,
    114, 116, 121, 46,  80,  108, 97,  110, 101, 46,  79,  114, 105, 101, 110,
    116, 97,  116, 105, 111, 110, 34,  58,  32,  123, 34,  67,  111, 109, 112,
    97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  108, 97,
    110, 101, 80,  114, 111, 112, 101, 114, 116, 121, 46,  79,  114, 105, 101,
    110, 116, 97,  116, 105, 111, 110, 34,  93,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  114, 111, 116,
    97,  116, 105, 111, 110, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116,
    111, 109, 83,  116, 111, 114, 97,  103, 101, 34,  58,  32,  116, 114, 117,
    101, 44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 85,  73,  34,
    58,  32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101,
    114, 116, 121, 84,  121, 112, 101, 46,  79,  114, 105, 101, 110, 116, 97,
    116, 105, 111, 110, 51,  68,  34,  125, 44,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 46,  80,  108,
    97,  110, 101, 46,  79,  114, 105, 103, 105, 110, 34,  58,  32,  123, 34,
    67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,
    109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  108, 97,  110, 101, 80,  114, 111, 112, 101, 114, 116, 121, 46,
    79,  114, 105, 103, 105, 110, 34,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  112, 111, 115, 105,
    116, 105, 111, 110, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111,
    109, 83,  116, 111, 114, 97,  103, 101, 34,  58,  32,  116, 114, 117, 101,
    44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 85,  73,  34,  58,
    32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  80,  111, 115, 105, 116, 105, 111, 110,
    51,  68,  34,  125, 125, 125, 0};
const char* PlaneProperties::_getPrototypeJson() { return _prototype_Plane_; }

PlaneProperties::~PlaneProperties() {}

QQuaternion PlaneProperties::orientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Property.Plane.Orientation"));
}
std::tuple<double, double, double, double> PlaneProperties::orientationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Property.Plane.Orientation");
}
QSharedPointer<NodeProperty> PlaneProperties::orientationProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Property.Plane.Orientation", false);
}
void PlaneProperties::setOrientation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Property.Plane.Orientation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
QVector3D PlaneProperties::origin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.Property.Plane.Origin"));
}
std::tuple<double, double, double> PlaneProperties::originRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.Property.Plane.Origin");
}
QSharedPointer<NodeProperty> PlaneProperties::originProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Property.Plane.Origin", false);
}
void PlaneProperties::setOrigin(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.Property.Plane.Origin",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
PlaneProperties::PlaneProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_Orientation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Property.Plane.Orientation", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Orientation](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_Orientation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Property.Plane.Orientation\":"
              << e.what();
          return;
        }
        Q_EMIT this->orientationChanged(valueCasted);
      });
  auto _prop_Origin = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Property.Plane.Origin", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Origin](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Origin) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Property.Plane.Origin\":"
              << e.what();
          return;
        }
        Q_EMIT this->originChanged(valueCasted);
      });
}

}  // namespace property_prop
inline namespace property_prop {
PreviewBoxPropertiesEntry::~PreviewBoxPropertiesEntry() {}
PreviewBoxPropertiesBase::~PreviewBoxPropertiesBase() {}
PreviewBoxPropertiesCopy::PreviewBoxPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
static const char _prototype_PreviewBox_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 101, 118, 105, 101, 119, 66,  111, 120, 34,  93,
    44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,
    58,  32,  34,  84,  79,  68,  79,  34,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  80,  114, 101, 118,
    105, 101, 119, 66,  111, 120, 34,  44,  32,  34,  73,  99,  111, 110, 34,
    58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  105, 109, 97,  103,
    101, 45,  109, 97,  112, 46,  112, 110, 103, 34,  44,  32,  34,  78,  97,
    109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 46,  80,  114, 101, 118, 105, 101, 119,
    66,  111, 120, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100,
    101, 75,  105, 110, 100, 46,  80,  114, 111, 112, 101, 114, 116, 121, 34,
    44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,
    32,  123, 125, 125, 0};
const char* PreviewBoxProperties::_getPrototypeJson() {
  return _prototype_PreviewBox_;
}

PreviewBoxProperties::~PreviewBoxProperties() {}

PreviewBoxProperties::PreviewBoxProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
}

}  // namespace property_prop
}  // namespace vx
