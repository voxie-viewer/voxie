// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#pragma once

#include <QtCore/QJsonObject>
#include <QtCore/QList>
#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtGui/QQuaternion>
#include <QtGui/QVector3D>
#include <Voxie/Data/Color.hpp>
#include <Voxie/Data/ColorizerEntry.hpp>
#include <Voxie/Node/Node.hpp>
#include <Voxie/Node/Types.hpp>
#include <VoxieBackend/Data/DataType.hpp>

namespace vx {
#ifndef VOXIE_PROP_DEFINED_MeasurementPrimitive1
#define VOXIE_PROP_DEFINED_MeasurementPrimitive1
namespace PropType {
class MeasurementPrimitive1 : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::MeasurementPrimitive1 MeasurementPrimitive1 = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_MeasurementPrimitive2
#define VOXIE_PROP_DEFINED_MeasurementPrimitive2
namespace PropType {
class MeasurementPrimitive2 : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::MeasurementPrimitive2 MeasurementPrimitive2 = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Orientation
#define VOXIE_PROP_DEFINED_Orientation
namespace PropType {
class Orientation : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Orientation Orientation = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Origin
#define VOXIE_PROP_DEFINED_Origin
namespace PropType {
class Origin : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Origin Origin = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Rotation
#define VOXIE_PROP_DEFINED_Rotation
namespace PropType {
class Rotation : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Rotation Rotation = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_SelectedPrimitive
#define VOXIE_PROP_DEFINED_SelectedPrimitive
namespace PropType {
class SelectedPrimitive : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::SelectedPrimitive SelectedPrimitive = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Translation
#define VOXIE_PROP_DEFINED_Translation
namespace PropType {
class Translation : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Translation Translation = {};
}
#endif
inline namespace data_prop {
class VOXIECORESHARED_EXPORT ContainerPropertiesEntry
    : public vx::PropertiesEntryBase {
  ContainerPropertiesEntry() = delete;

 public:
  ~ContainerPropertiesEntry();
};
class VOXIECORESHARED_EXPORT ContainerPropertiesBase {
 public:
  virtual ~ContainerPropertiesBase();
};
class VOXIECORESHARED_EXPORT ContainerPropertiesCopy
    : public ContainerPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  ContainerPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
};
class VOXIECORESHARED_EXPORT ContainerProperties
    : public QObject,
      public ContainerPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  ContainerProperties(vx::Node* parent);
  ~ContainerProperties();
};

}  // namespace data_prop
inline namespace data_prop {
class VOXIECORESHARED_EXPORT EventListDataPropertiesEntry
    : public vx::PropertiesEntryBase {
  EventListDataPropertiesEntry() = delete;

 public:
  ~EventListDataPropertiesEntry();
};
class VOXIECORESHARED_EXPORT EventListDataPropertiesBase {
 public:
  virtual ~EventListDataPropertiesBase();
};
class VOXIECORESHARED_EXPORT EventListDataPropertiesCopy
    : public EventListDataPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  EventListDataPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
};
class VOXIECORESHARED_EXPORT EventListDataProperties
    : public QObject,
      public EventListDataPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  EventListDataProperties(vx::Node* parent);
  ~EventListDataProperties();
};

}  // namespace data_prop
inline namespace data_prop {
class VOXIECORESHARED_EXPORT GeometricPrimitivePropertiesEntry
    : public vx::PropertiesEntryBase {
  GeometricPrimitivePropertiesEntry() = delete;

 public:
  ~GeometricPrimitivePropertiesEntry();
  GeometricPrimitivePropertiesEntry(vx::PropType::MeasurementPrimitive1,
                                    quint64);
  GeometricPrimitivePropertiesEntry(vx::PropType::MeasurementPrimitive2,
                                    quint64);
  GeometricPrimitivePropertiesEntry(vx::PropType::SelectedPrimitive, quint64);
};
class VOXIECORESHARED_EXPORT GeometricPrimitivePropertiesBase {
 public:
  virtual ~GeometricPrimitivePropertiesBase();
  virtual quint64 measurementPrimitive1() = 0;
  virtual quint64 measurementPrimitive1Raw() = 0;
  virtual quint64 measurementPrimitive2() = 0;
  virtual quint64 measurementPrimitive2Raw() = 0;
  virtual quint64 selectedPrimitive() = 0;
  virtual quint64 selectedPrimitiveRaw() = 0;
};
class VOXIECORESHARED_EXPORT GeometricPrimitivePropertiesCopy
    : public GeometricPrimitivePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  GeometricPrimitivePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  quint64 measurementPrimitive1() override final;
  quint64 measurementPrimitive1Raw() override final;
  quint64 measurementPrimitive2() override final;
  quint64 measurementPrimitive2Raw() override final;
  quint64 selectedPrimitive() override final;
  quint64 selectedPrimitiveRaw() override final;
};
class VOXIECORESHARED_EXPORT GeometricPrimitiveProperties
    : public QObject,
      public GeometricPrimitivePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  GeometricPrimitiveProperties(vx::Node* parent);
  ~GeometricPrimitiveProperties();

  quint64 measurementPrimitive1() override final;
  quint64 measurementPrimitive1Raw() override final;
  static QSharedPointer<NodeProperty> measurementPrimitive1Property();
  static NodePropertyTyped<vx::types::GeometricPrimitive>
  measurementPrimitive1PropertyTyped();
  void setMeasurementPrimitive1(quint64 value);
 Q_SIGNALS:
  void measurementPrimitive1Changed(quint64 value);

 public:
  // Q_PROPERTY(quint64 MeasurementPrimitive1 READ measurementPrimitive1 WRITE
  // setMeasurementPrimitive1 NOTIFY measurementPrimitive1Changed)

  quint64 measurementPrimitive2() override final;
  quint64 measurementPrimitive2Raw() override final;
  static QSharedPointer<NodeProperty> measurementPrimitive2Property();
  static NodePropertyTyped<vx::types::GeometricPrimitive>
  measurementPrimitive2PropertyTyped();
  void setMeasurementPrimitive2(quint64 value);
 Q_SIGNALS:
  void measurementPrimitive2Changed(quint64 value);

 public:
  // Q_PROPERTY(quint64 MeasurementPrimitive2 READ measurementPrimitive2 WRITE
  // setMeasurementPrimitive2 NOTIFY measurementPrimitive2Changed)

  quint64 selectedPrimitive() override final;
  quint64 selectedPrimitiveRaw() override final;
  static QSharedPointer<NodeProperty> selectedPrimitiveProperty();
  static NodePropertyTyped<vx::types::GeometricPrimitive>
  selectedPrimitivePropertyTyped();
  void setSelectedPrimitive(quint64 value);
 Q_SIGNALS:
  void selectedPrimitiveChanged(quint64 value);

 public:
  // Q_PROPERTY(quint64 SelectedPrimitive READ selectedPrimitive WRITE
  // setSelectedPrimitive NOTIFY selectedPrimitiveChanged)
};

}  // namespace data_prop
inline namespace data_prop {
class VOXIECORESHARED_EXPORT SurfacePropertiesEntry
    : public vx::PropertiesEntryBase {
  SurfacePropertiesEntry() = delete;

 public:
  ~SurfacePropertiesEntry();
  SurfacePropertiesEntry(vx::PropType::Rotation, QQuaternion);
  SurfacePropertiesEntry(vx::PropType::Translation, QVector3D);
};
class VOXIECORESHARED_EXPORT SurfacePropertiesBase {
 public:
  virtual ~SurfacePropertiesBase();
  virtual QQuaternion rotation() = 0;
  virtual std::tuple<double, double, double, double> rotationRaw() = 0;
  virtual QVector3D translation() = 0;
  virtual std::tuple<double, double, double> translationRaw() = 0;
};
class VOXIECORESHARED_EXPORT SurfacePropertiesCopy
    : public SurfacePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  SurfacePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QQuaternion rotation() override final;
  std::tuple<double, double, double, double> rotationRaw() override final;
  QVector3D translation() override final;
  std::tuple<double, double, double> translationRaw() override final;
};
class VOXIECORESHARED_EXPORT SurfaceProperties : public QObject,
                                                 public SurfacePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  SurfaceProperties(vx::Node* parent);
  ~SurfaceProperties();

  QQuaternion rotation() override final;
  std::tuple<double, double, double, double> rotationRaw() override final;
  static QSharedPointer<NodeProperty> rotationProperty();
  static NodePropertyTyped<vx::types::Orientation3D> rotationPropertyTyped();
  void setRotation(QQuaternion value);
 Q_SIGNALS:
  void rotationChanged(QQuaternion value);

 public:
  // Q_PROPERTY(QQuaternion Rotation READ rotation WRITE setRotation NOTIFY
  // rotationChanged)

  QVector3D translation() override final;
  std::tuple<double, double, double> translationRaw() override final;
  static QSharedPointer<NodeProperty> translationProperty();
  static NodePropertyTyped<vx::types::Position3D> translationPropertyTyped();
  void setTranslation(QVector3D value);
 Q_SIGNALS:
  void translationChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D Translation READ translation WRITE setTranslation
  // NOTIFY translationChanged)
};

}  // namespace data_prop
inline namespace data_prop {
class VOXIECORESHARED_EXPORT TablePropertiesEntry
    : public vx::PropertiesEntryBase {
  TablePropertiesEntry() = delete;

 public:
  ~TablePropertiesEntry();
};
class VOXIECORESHARED_EXPORT TablePropertiesBase {
 public:
  virtual ~TablePropertiesBase();
};
class VOXIECORESHARED_EXPORT TablePropertiesCopy : public TablePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  TablePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
};
class VOXIECORESHARED_EXPORT TableProperties : public QObject,
                                               public TablePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  TableProperties(vx::Node* parent);
  ~TableProperties();
};

}  // namespace data_prop
inline namespace data_prop {
class VOXIECORESHARED_EXPORT TomographyRawDataPropertiesEntry
    : public vx::PropertiesEntryBase {
  TomographyRawDataPropertiesEntry() = delete;

 public:
  ~TomographyRawDataPropertiesEntry();
};
class VOXIECORESHARED_EXPORT TomographyRawDataPropertiesBase {
 public:
  virtual ~TomographyRawDataPropertiesBase();
};
class VOXIECORESHARED_EXPORT TomographyRawDataPropertiesCopy
    : public TomographyRawDataPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  TomographyRawDataPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
};
class VOXIECORESHARED_EXPORT TomographyRawDataProperties
    : public QObject,
      public TomographyRawDataPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  TomographyRawDataProperties(vx::Node* parent);
  ~TomographyRawDataProperties();
};

}  // namespace data_prop
inline namespace data_prop {
class VOXIECORESHARED_EXPORT VolumePropertiesEntry
    : public vx::PropertiesEntryBase {
  VolumePropertiesEntry() = delete;

 public:
  ~VolumePropertiesEntry();
  VolumePropertiesEntry(vx::PropType::Rotation, QQuaternion);
  VolumePropertiesEntry(vx::PropType::Translation, QVector3D);
};
class VOXIECORESHARED_EXPORT VolumePropertiesBase {
 public:
  virtual ~VolumePropertiesBase();
  virtual QQuaternion rotation() = 0;
  virtual std::tuple<double, double, double, double> rotationRaw() = 0;
  virtual QVector3D translation() = 0;
  virtual std::tuple<double, double, double> translationRaw() = 0;
};
class VOXIECORESHARED_EXPORT VolumePropertiesCopy
    : public VolumePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  VolumePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QQuaternion rotation() override final;
  std::tuple<double, double, double, double> rotationRaw() override final;
  QVector3D translation() override final;
  std::tuple<double, double, double> translationRaw() override final;
};
class VOXIECORESHARED_EXPORT VolumeProperties : public QObject,
                                                public VolumePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  VolumeProperties(vx::Node* parent);
  ~VolumeProperties();

  QQuaternion rotation() override final;
  std::tuple<double, double, double, double> rotationRaw() override final;
  static QSharedPointer<NodeProperty> rotationProperty();
  static NodePropertyTyped<vx::types::Orientation3D> rotationPropertyTyped();
  void setRotation(QQuaternion value);
 Q_SIGNALS:
  void rotationChanged(QQuaternion value);

 public:
  // Q_PROPERTY(QQuaternion Rotation READ rotation WRITE setRotation NOTIFY
  // rotationChanged)

  QVector3D translation() override final;
  std::tuple<double, double, double> translationRaw() override final;
  static QSharedPointer<NodeProperty> translationProperty();
  static NodePropertyTyped<vx::types::Position3D> translationPropertyTyped();
  void setTranslation(QVector3D value);
 Q_SIGNALS:
  void translationChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D Translation READ translation WRITE setTranslation
  // NOTIFY translationChanged)
};

}  // namespace data_prop
inline namespace node_prop {
class VOXIECORESHARED_EXPORT NodeGroupPropertiesEntry
    : public vx::PropertiesEntryBase {
  NodeGroupPropertiesEntry() = delete;

 public:
  ~NodeGroupPropertiesEntry();
};
class VOXIECORESHARED_EXPORT NodeGroupPropertiesBase {
 public:
  virtual ~NodeGroupPropertiesBase();
};
class VOXIECORESHARED_EXPORT NodeGroupPropertiesCopy
    : public NodeGroupPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  NodeGroupPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
};
class VOXIECORESHARED_EXPORT NodeGroupProperties
    : public QObject,
      public NodeGroupPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  NodeGroupProperties(vx::Node* parent);
  ~NodeGroupProperties();
};

}  // namespace node_prop
inline namespace property_prop {
class VOXIECORESHARED_EXPORT PlanePropertiesEntry
    : public vx::PropertiesEntryBase {
  PlanePropertiesEntry() = delete;

 public:
  ~PlanePropertiesEntry();
  PlanePropertiesEntry(vx::PropType::Orientation, QQuaternion);
  PlanePropertiesEntry(vx::PropType::Origin, QVector3D);
};
class VOXIECORESHARED_EXPORT PlanePropertiesBase {
 public:
  virtual ~PlanePropertiesBase();
  virtual QQuaternion orientation() = 0;
  virtual std::tuple<double, double, double, double> orientationRaw() = 0;
  virtual QVector3D origin() = 0;
  virtual std::tuple<double, double, double> originRaw() = 0;
};
class VOXIECORESHARED_EXPORT PlanePropertiesCopy : public PlanePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  PlanePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QQuaternion orientation() override final;
  std::tuple<double, double, double, double> orientationRaw() override final;
  QVector3D origin() override final;
  std::tuple<double, double, double> originRaw() override final;
};
class VOXIECORESHARED_EXPORT PlaneProperties : public QObject,
                                               public PlanePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  PlaneProperties(vx::Node* parent);
  ~PlaneProperties();

  QQuaternion orientation() override final;
  std::tuple<double, double, double, double> orientationRaw() override final;
  static QSharedPointer<NodeProperty> orientationProperty();
  static NodePropertyTyped<vx::types::Orientation3D> orientationPropertyTyped();
  void setOrientation(QQuaternion value);
 Q_SIGNALS:
  void orientationChanged(QQuaternion value);

 public:
  // Q_PROPERTY(QQuaternion Orientation READ orientation WRITE setOrientation
  // NOTIFY orientationChanged)

  QVector3D origin() override final;
  std::tuple<double, double, double> originRaw() override final;
  static QSharedPointer<NodeProperty> originProperty();
  static NodePropertyTyped<vx::types::Position3D> originPropertyTyped();
  void setOrigin(QVector3D value);
 Q_SIGNALS:
  void originChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D Origin READ origin WRITE setOrigin NOTIFY
  // originChanged)
};

}  // namespace property_prop
inline namespace property_prop {
class VOXIECORESHARED_EXPORT PreviewBoxPropertiesEntry
    : public vx::PropertiesEntryBase {
  PreviewBoxPropertiesEntry() = delete;

 public:
  ~PreviewBoxPropertiesEntry();
};
class VOXIECORESHARED_EXPORT PreviewBoxPropertiesBase {
 public:
  virtual ~PreviewBoxPropertiesBase();
};
class VOXIECORESHARED_EXPORT PreviewBoxPropertiesCopy
    : public PreviewBoxPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  PreviewBoxPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
};
class VOXIECORESHARED_EXPORT PreviewBoxProperties
    : public QObject,
      public PreviewBoxPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  PreviewBoxProperties(vx::Node* parent);
  ~PreviewBoxProperties();
};

}  // namespace property_prop
}  // namespace vx
