// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#include "Prototypes.hpp"

#include <Voxie/Node/NodeNodeProperty.hpp>
#include <Voxie/Node/NodePrototype.hpp>
#include <Voxie/Node/PropertyValueConvertDBus.hpp>
#include <Voxie/Node/PropertyValueConvertRaw.hpp>
namespace vx {
inline namespace visualizer_prop {
MarkdownPropertiesEntry::~MarkdownPropertiesEntry() {}
MarkdownPropertiesEntry::MarkdownPropertiesEntry(vx::PropType::File,
                                                 vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Markdown.File",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
MarkdownPropertiesBase::~MarkdownPropertiesBase() {}
MarkdownPropertiesCopy::MarkdownPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QDBusObjectPath MarkdownPropertiesCopy::fileRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Markdown.File"]);
}
static const char _prototype_Markdown_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  77,  97,  114, 107, 100, 111, 119, 110, 86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 34,  93,  44,  32,  34,  68,  101, 115, 99,
    114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 32,  109, 97,  114, 107, 100, 111, 119, 110, 32,  100, 97,
    116, 97,  34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  77,  97,  114, 107, 100, 111, 119, 110, 32,
    118, 105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  44,  32,  34,  78,
    97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  77,  97,  114, 107,
    100, 111, 119, 110, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110,
    100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111,
    100, 101, 75,  105, 110, 100, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101,
    115, 34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  77,  97,  114, 107, 100,
    111, 119, 110, 46,  70,  105, 108, 101, 34,  58,  32,  123, 34,  65,  108,
    108, 111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116,
    121, 112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  68,  97,  116, 97,  46,  70,  105, 108, 101, 34,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  70,  105, 108, 101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101,
    114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102,
    101, 114, 101, 110, 99,  101, 34,  125, 125, 44,  32,  34,  84,  114, 111,
    118, 101, 67,  108, 97,  115, 115, 105, 102, 105, 101, 114, 115, 34,  58,
    32,  91,  34,  68,  101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 32,
    83,  116, 97,  116, 117, 115, 32,  58,  58,  32,  53,  32,  45,  32,  80,
    114, 111, 100, 117, 99,  116, 105, 111, 110, 47,  83,  116, 97,  98,  108,
    101, 34,  93,  125, 0};
const char* MarkdownProperties::_getPrototypeJson() {
  return _prototype_Markdown_;
}

MarkdownProperties::~MarkdownProperties() {}

vx::Node* MarkdownProperties::file() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Markdown.File"));
}
QDBusObjectPath MarkdownProperties::fileRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Markdown.File");
}
QSharedPointer<NodeProperty> MarkdownProperties::fileProperty() {
  return MarkdownProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Markdown.File", false);
}
NodePropertyTyped<vx::types::NodeReference>
MarkdownProperties::filePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(fileProperty());
}
NodeNodeProperty MarkdownProperties::fileInstance() {
  return NodeNodeProperty(_node, fileProperty());
}
void MarkdownProperties::setFile(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Markdown.File",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
MarkdownProperties::MarkdownProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_File = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Markdown.File", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_File](const QSharedPointer<NodeProperty>& property,
                         const QVariant& value) {
        if (property != _prop_File) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Visualizer.Markdown.File\":"
              << e.what();
          return;
        }
        Q_EMIT this->fileChanged(valueCasted);
      });
}

}  // namespace visualizer_prop
}  // namespace vx
