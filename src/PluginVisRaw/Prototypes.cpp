// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#include "Prototypes.hpp"

#include <Voxie/Node/NodePrototype.hpp>
#include <Voxie/Node/PropertyValueConvertDBus.hpp>
#include <Voxie/Node/PropertyValueConvertRaw.hpp>
namespace vx {
inline namespace visualizer_prop {
TomographyRawDataPropertiesEntry::~TomographyRawDataPropertiesEntry() {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::CenterPoint, QPointF value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.View2D.CenterPoint",
          QVariant::fromValue<std::tuple<double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double>,
                                          QPointF>::toRaw(value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::VerticalSize, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.View2D.VerticalSize",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::CurrentImage, qint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImage",
          QVariant::fromValue<qint64>(
              vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::CurrentImageList, std::tuple<QString, QJsonObject> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
          "CurrentImageList",
          QVariant::fromValue<std::tuple<QString, QJsonObject>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<QString, QJsonObject>,
                  std::tuple<QString, QJsonObject>>::toRaw(value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::ImageKind, QJsonObject value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImageKind",
          QVariant::fromValue<QJsonObject>(
              vx::PropertyValueConvertRaw<QJsonObject, QJsonObject>::toRaw(
                  value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::ImagesPerSecond, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImagesPerSecond",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::Interpolation, QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.Interpolation",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::RawData, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.RawData",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::ValueColorMapping, QList<vx::ColorizerEntry> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
          "ValueColorMapping",
          QVariant::fromValue<QList<std::tuple<
              double, std::tuple<double, double, double, double>, qint32>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint32>>,
                  QList<vx::ColorizerEntry>>::toRaw(value_))) {}
TomographyRawDataPropertiesEntry::TomographyRawDataPropertiesEntry(
    vx::PropType::WaitForImages, bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.WaitForImages",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
TomographyRawDataPropertiesBase::~TomographyRawDataPropertiesBase() {}
TomographyRawDataPropertiesCopy::TomographyRawDataPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QPointF TomographyRawDataPropertiesCopy::centerPoint() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double>, QPointF>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.View2D.CenterPoint"]));
}
std::tuple<double, double> TomographyRawDataPropertiesCopy::centerPointRaw() {
  return vx::Node::parseVariant<std::tuple<double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.View2D.CenterPoint"]);
}
double TomographyRawDataPropertiesCopy::verticalSize() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.View2D.VerticalSize"]));
}
double TomographyRawDataPropertiesCopy::verticalSizeRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.View2D.VerticalSize"]);
}
qint64 TomographyRawDataPropertiesCopy::currentImage() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      vx::Node::parseVariant<qint64>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                         "CurrentImage"]));
}
qint64 TomographyRawDataPropertiesCopy::currentImageRaw() {
  return vx::Node::parseVariant<qint64>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImage"]);
}
std::tuple<QString, QJsonObject>
TomographyRawDataPropertiesCopy::currentImageList() {
  return vx::PropertyValueConvertRaw<std::tuple<QString, QJsonObject>,
                                     std::tuple<QString, QJsonObject>>::
      fromRaw(vx::Node::parseVariant<std::tuple<QString, QJsonObject>>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                         "CurrentImageList"]));
}
std::tuple<QString, QJsonObject>
TomographyRawDataPropertiesCopy::currentImageListRaw() {
  return vx::Node::parseVariant<std::tuple<QString, QJsonObject>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                     "CurrentImageList"]);
}
QJsonObject TomographyRawDataPropertiesCopy::imageKind() {
  return vx::PropertyValueConvertRaw<QJsonObject, QJsonObject>::fromRaw(
      vx::Node::parseVariant<QJsonObject>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                         "ImageKind"]));
}
QJsonObject TomographyRawDataPropertiesCopy::imageKindRaw() {
  return vx::Node::parseVariant<QJsonObject>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImageKind"]);
}
double TomographyRawDataPropertiesCopy::imagesPerSecond() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                         "ImagesPerSecond"]));
}
double TomographyRawDataPropertiesCopy::imagesPerSecondRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                     "ImagesPerSecond"]);
}
QString TomographyRawDataPropertiesCopy::interpolation() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                         "Interpolation"]));
}
QString TomographyRawDataPropertiesCopy::interpolationRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                     "Interpolation"]);
}
vx::Node* TomographyRawDataPropertiesCopy::rawData() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.RawData"]));
}
QDBusObjectPath TomographyRawDataPropertiesCopy::rawDataRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.RawData"]);
}
QList<vx::ColorizerEntry> TomographyRawDataPropertiesCopy::valueColorMapping() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                         "ValueColorMapping"]));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
TomographyRawDataPropertiesCopy::valueColorMappingRaw() {
  return vx::Node::parseVariant<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                     "ValueColorMapping"]);
}
bool TomographyRawDataPropertiesCopy::waitForImages() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                         "WaitForImages"]));
}
bool TomographyRawDataPropertiesCopy::waitForImagesRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
                     "WaitForImages"]);
}
static const char _prototype_TomographyRawData_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  82,  97,  119, 86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 34,  44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  82,  97,  119, 34,  93,  44,
    32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 32,  67,  84,  32,  114, 97,
    119, 32,  100, 97,  116, 97,  34,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  82,  97,  119, 32,  100,
    97,  116, 97,  32,  118, 105, 115, 117, 97,  108, 105, 122, 101, 114, 34,
    44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119, 68,  97,
    116, 97,  34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100, 101,
    75,  105, 110, 100, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,
    58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 101,
    119, 50,  68,  46,  67,  101, 110, 116, 101, 114, 80,  111, 105, 110, 116,
    34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  67,  101, 110, 116, 101, 114, 32,  112, 111, 105,
    110, 116, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    84,  121, 112, 101, 46,  80,  111, 105, 110, 116, 50,  68,  34,  125, 44,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 101, 119, 50,
    68,  46,  86,  101, 114, 116, 105, 99,  97,  108, 83,  105, 122, 101, 34,
    58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  86,  101, 114, 116, 105, 99,  97,  108, 32,  115, 105,
    122, 101, 32,  40,  109, 41,  34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108, 111, 97,  116, 34,
    125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  84,  111, 109, 111, 103, 114, 97,
    112, 104, 121, 82,  97,  119, 68,  97,  116, 97,  46,  67,  117, 114, 114,
    101, 110, 116, 73,  109, 97,  103, 101, 34,  58,  32,  123, 34,  67,  97,
    108, 108, 83,  101, 116, 79,  114, 100, 101, 114, 34,  58,  32,  49,  48,
    44,  32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  82,  97,  119, 86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  67,  117, 114, 114, 101, 110, 116, 73,  109, 97,  103, 101,
    34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  67,  117, 114, 114, 101, 110, 116, 32,  105, 109,
    97,  103, 101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116,
    121, 84,  121, 112, 101, 46,  73,  110, 116, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,  97,
    119, 68,  97,  116, 97,  46,  67,  117, 114, 114, 101, 110, 116, 73,  109,
    97,  103, 101, 76,  105, 115, 116, 34,  58,  32,  123, 34,  67,  97,  108,
    108, 83,  101, 116, 79,  114, 100, 101, 114, 34,  58,  32,  48,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  67,  117, 114, 114, 101, 110, 116, 32,  105, 109, 97,  103, 101, 32,
    108, 105, 115, 116, 34,  44,  32,  34,  80,  97,  114, 101, 110, 116, 80,
    114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119, 68,  97,
    116, 97,  46,  82,  97,  119, 68,  97,  116, 97,  34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  84,  111,
    109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119, 68,  97,  116, 97,
    73,  109, 97,  103, 101, 76,  105, 115, 116, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,  97,
    119, 68,  97,  116, 97,  46,  73,  109, 97,  103, 101, 75,  105, 110, 100,
    34,  58,  32,  123, 34,  67,  97,  108, 108, 83,  101, 116, 79,  114, 100,
    101, 114, 34,  58,  32,  50,  48,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  73,  109, 97,  103, 101,
    32,  107, 105, 110, 100, 34,  44,  32,  34,  80,  97,  114, 101, 110, 116,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119, 68,
    97,  116, 97,  46,  82,  97,  119, 68,  97,  116, 97,  34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  84,
    111, 109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119, 68,  97,  116,
    97,  73,  109, 97,  103, 101, 75,  105, 110, 100, 34,  125, 44,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,
    97,  119, 68,  97,  116, 97,  46,  73,  109, 97,  103, 101, 115, 80,  101,
    114, 83,  101, 99,  111, 110, 100, 34,  58,  32,  123, 34,  67,  111, 109,
    112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115,
    34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    101, 119, 50,  68,  46,  73,  109, 97,  103, 101, 115, 80,  101, 114, 83,
    101, 99,  111, 110, 100, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117,
    108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  49,  53,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    73,  109, 97,  103, 101, 115, 32,  112, 101, 114, 32,  115, 101, 99,  111,
    110, 100, 34,  44,  32,  34,  77,  97,  120, 105, 109, 117, 109, 86,  97,
    108, 117, 101, 34,  58,  32,  49,  48,  48,  48,  44,  32,  34,  77,  105,
    110, 105, 109, 117, 109, 86,  97,  108, 117, 101, 34,  58,  32,  48,  46,
    49,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  70,  108, 111, 97,  116, 34,  44,  32,  34,  85,  110, 105,
    116, 34,  58,  32,  91,  91,  34,  115, 34,  44,  32,  45,  49,  93,  93,
    125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  84,  111, 109, 111, 103, 114, 97,
    112, 104, 121, 82,  97,  119, 68,  97,  116, 97,  46,  73,  110, 116, 101,
    114, 112, 111, 108, 97,  116, 105, 111, 110, 34,  58,  32,  123, 34,  67,
    111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109,
    101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    82,  97,  119, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  73,
    110, 116, 101, 114, 112, 111, 108, 97,  116, 105, 111, 110, 34,  93,  44,
    32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  73,  110, 116, 101,
    114, 112, 111, 108, 97,  116, 105, 111, 110, 46,  76,  105, 110, 101, 97,
    114, 34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  73,  110, 116, 101, 114, 112, 111, 108, 97,  116,
    105, 111, 110, 34,  44,  32,  34,  69,  110, 117, 109, 69,  110, 116, 114,
    105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  73,  110, 116, 101, 114, 112, 111, 108, 97,  116, 105, 111, 110, 46,
    76,  105, 110, 101, 97,  114, 34,  58,  32,  123, 34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  105, 110, 101,
    97,  114, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111,
    110, 34,  58,  32,  50,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  73,  110, 116, 101, 114, 112, 111, 108, 97,  116, 105, 111, 110,
    46,  78,  101, 97,  114, 101, 115, 116, 78,  101, 105, 103, 104, 98,  111,
    114, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  78,  101, 97,  114, 101, 115, 116, 32,  110,
    101, 105, 103, 104, 98,  111, 114, 34,  44,  32,  34,  85,  73,  80,  111,
    115, 105, 116, 105, 111, 110, 34,  58,  32,  49,  125, 125, 44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  69,
    110, 117, 109, 101, 114, 97,  116, 105, 111, 110, 34,  125, 44,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,
    97,  119, 68,  97,  116, 97,  46,  82,  97,  119, 68,  97,  116, 97,  34,
    58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100, 101,
    80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  84,  111,
    109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119, 68,  97,  116, 97,
    34,  93,  44,  32,  34,  67,  97,  108, 108, 83,  101, 116, 79,  114, 100,
    101, 114, 34,  58,  32,  45,  49,  48,  44,  32,  34,  67,  111, 109, 112,
    97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  82,  97,  119,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  82,  97,  119, 68,
    97,  116, 97,  34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  82,  97,  119, 32,  100, 97,  116,
    97,  34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,
    121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110,
    99,  101, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  84,  111, 109, 111,
    103, 114, 97,  112, 104, 121, 82,  97,  119, 68,  97,  116, 97,  46,  86,
    97,  108, 117, 101, 67,  111, 108, 111, 114, 77,  97,  112, 112, 105, 110,
    103, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105,
    108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  82,  97,  119, 86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  86,  97,  108, 117, 101, 67,  111, 108, 111,
    114, 77,  97,  112, 112, 105, 110, 103, 34,  93,  44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  86,  97,
    108, 117, 101, 32,  116, 111, 32,  99,  111, 108, 111, 114, 32,  109, 97,
    112, 112, 105, 110, 103, 34,  44,  32,  34,  84,  79,  68,  79,  34,  58,
    32,  34,  68,  111, 110, 39,  116, 32,  115, 104, 111, 119, 32,  39,  76,
    97,  98,  101, 108, 32,  109, 97,  112, 112, 105, 110, 103, 39,  32,  101,
    110, 116, 114, 121, 32,  104, 101, 114, 101, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  86,  97,  108,
    117, 101, 67,  111, 108, 111, 114, 77,  97,  112, 112, 105, 110, 103, 34,
    125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  84,  111, 109, 111, 103, 114, 97,
    112, 104, 121, 82,  97,  119, 68,  97,  116, 97,  46,  87,  97,  105, 116,
    70,  111, 114, 73,  109, 97,  103, 101, 115, 34,  58,  32,  123, 34,  68,
    101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  102,
    97,  108, 115, 101, 44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  87,  97,  105, 116, 32,  102, 111, 114,
    32,  105, 109, 97,  103, 101, 115, 34,  44,  32,  34,  83,  104, 111, 114,
    116, 68,  101, 115, 99,  114, 112, 116, 105, 111, 110, 34,  58,  32,  34,
    87,  97,  105, 116, 32,  102, 111, 114, 32,  105, 109, 97,  103, 101, 115,
    32,  100, 117, 114, 105, 110, 103, 32,  97,  110, 105, 109, 97,  116, 105,
    111, 110, 32,  116, 111, 32,  109, 97,  107, 101, 32,  115, 117, 114, 101,
    32,  101, 118, 101, 114, 121, 32,  105, 109, 97,  103, 101, 32,  105, 115,
    32,  115, 104, 111, 119, 110, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  66,  111, 111, 108, 101, 97,
    110, 34,  125, 125, 44,  32,  34,  84,  114, 111, 118, 101, 67,  108, 97,
    115, 115, 105, 102, 105, 101, 114, 115, 34,  58,  32,  91,  34,  68,  101,
    118, 101, 108, 111, 112, 109, 101, 110, 116, 32,  83,  116, 97,  116, 117,
    115, 32,  58,  58,  32,  53,  32,  45,  32,  80,  114, 111, 100, 117, 99,
    116, 105, 111, 110, 47,  83,  116, 97,  98,  108, 101, 34,  93,  44,  32,
    34,  85,  73,  34,  58,  32,  123, 34,  83,  105, 100, 101, 80,  97,  110,
    101, 108, 83,  101, 99,  116, 105, 111, 110, 115, 34,  58,  32,  91,  123,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  73,  110, 102, 111, 34,  44,  32,  34,  69,  110, 116, 114, 105, 101,
    115, 34,  58,  32,  91,  123, 34,  78,  97,  109, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,
    97,  119, 68,  97,  116, 97,  46,  73,  110, 102, 111, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  67,  117, 115, 116, 111, 109, 34,
    125, 93,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  73,  110,
    102, 111, 83,  101, 99,  116, 105, 111, 110, 34,  125, 44,  32,  123, 34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    67,  117, 114, 114, 101, 110, 116, 32,  105, 109, 97,  103, 101, 34,  44,
    32,  34,  69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  91,  123, 34,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119, 68,
    97,  116, 97,  46,  67,  117, 114, 114, 101, 110, 116, 73,  109, 97,  103,
    101, 76,  105, 115, 116, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 44,  32,  123,
    34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  84,  111, 109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119,
    68,  97,  116, 97,  46,  67,  117, 114, 114, 101, 110, 116, 73,  109, 97,
    103, 101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  80,
    114, 111, 112, 101, 114, 116, 121, 34,  125, 44,  32,  123, 34,  78,  97,
    109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  82,
    97,  119, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  104,
    111, 119, 80,  101, 114, 73,  109, 97,  103, 101, 77,  101, 116, 97,  100,
    97,  116, 97,  34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    67,  117, 115, 116, 111, 109, 34,  125, 44,  32,  123, 34,  78,  97,  109,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  82,  97,
    119, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  73,  109, 97,
    103, 101, 83,  101, 108, 101, 99,  116, 105, 111, 110, 66,  117, 116, 116,
    111, 110, 115, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    67,  117, 115, 116, 111, 109, 34,  125, 44,  32,  123, 34,  80,  114, 111,
    112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  84,  111,
    109, 111, 103, 114, 97,  112, 104, 121, 82,  97,  119, 68,  97,  116, 97,
    46,  73,  109, 97,  103, 101, 75,  105, 110, 100, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101, 114, 116, 121,
    34,  125, 44,  32,  123, 34,  78,  97,  109, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  82,  97,  119, 86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  83,  104, 111, 119, 73,  109, 97,  103, 101,
    75,  105, 110, 100, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  67,  117, 115, 116, 111, 109, 34,  125, 93,  44,  32,  34,  78,  97,
    109, 101, 34,  58,  32,  34,  73,  109, 97,  103, 101, 83,  101, 108, 101,
    99,  116, 105, 111, 110, 83,  101, 99,  116, 105, 111, 110, 34,  125, 44,
    32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  67,  111, 108, 111, 114, 105, 122, 101, 114, 34,  44,  32,
    34,  69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  91,  123, 34,  76,
    97,  98,  101, 108, 83,  116, 121, 108, 101, 34,  58,  32,  34,  78,  111,
    110, 101, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 121, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 46,  84,  111, 109, 111, 103, 114, 97,  112,
    104, 121, 82,  97,  119, 68,  97,  116, 97,  46,  86,  97,  108, 117, 101,
    67,  111, 108, 111, 114, 77,  97,  112, 112, 105, 110, 103, 34,  44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101, 114,
    116, 121, 34,  125, 93,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,
    34,  67,  111, 108, 111, 114, 105, 122, 101, 114, 83,  101, 99,  116, 105,
    111, 110, 34,  125, 44,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  72,  105, 115, 116, 111, 103, 114,
    97,  109, 34,  44,  32,  34,  69,  110, 116, 114, 105, 101, 115, 34,  58,
    32,  91,  123, 34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  82,  97,  119, 86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  72,  105, 115, 116, 111, 103, 114, 97,  109, 34,  44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  67,  117, 115, 116, 111,
    109, 34,  125, 93,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,
    72,  105, 115, 116, 111, 103, 114, 97,  109, 83,  101, 99,  116, 105, 111,
    110, 34,  125, 93,  125, 125, 0};
const char* TomographyRawDataProperties::_getPrototypeJson() {
  return _prototype_TomographyRawData_;
}

TomographyRawDataProperties::~TomographyRawDataProperties() {}

QPointF TomographyRawDataProperties::centerPoint() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double>, QPointF>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double>>(
          "de.uni_stuttgart.Voxie.View2D.CenterPoint"));
}
std::tuple<double, double> TomographyRawDataProperties::centerPointRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double>>(
      "de.uni_stuttgart.Voxie.View2D.CenterPoint");
}
QSharedPointer<NodeProperty>
TomographyRawDataProperties::centerPointProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.View2D.CenterPoint", false);
}
NodePropertyTyped<vx::types::Point2D>
TomographyRawDataProperties::centerPointPropertyTyped() {
  return NodePropertyTyped<vx::types::Point2D>(centerPointProperty());
}
void TomographyRawDataProperties::setCenterPoint(QPointF value) {
  _node->setNodePropertyTyped<std::tuple<double, double>>(
      "de.uni_stuttgart.Voxie.View2D.CenterPoint",
      vx::PropertyValueConvertRaw<std::tuple<double, double>, QPointF>::toRaw(
          value));
}
double TomographyRawDataProperties::verticalSize() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.View2D.VerticalSize"));
}
double TomographyRawDataProperties::verticalSizeRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.View2D.VerticalSize");
}
QSharedPointer<NodeProperty>
TomographyRawDataProperties::verticalSizeProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.View2D.VerticalSize", false);
}
NodePropertyTyped<vx::types::Float>
TomographyRawDataProperties::verticalSizePropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(verticalSizeProperty());
}
void TomographyRawDataProperties::setVerticalSize(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.View2D.VerticalSize",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
qint64 TomographyRawDataProperties::currentImage() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      _node->getNodePropertyTyped<qint64>(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImage"));
}
qint64 TomographyRawDataProperties::currentImageRaw() {
  return _node->getNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImage");
}
QSharedPointer<NodeProperty>
TomographyRawDataProperties::currentImageProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImage",
      false);
}
NodePropertyTyped<vx::types::Int>
TomographyRawDataProperties::currentImagePropertyTyped() {
  return NodePropertyTyped<vx::types::Int>(currentImageProperty());
}
void TomographyRawDataProperties::setCurrentImage(qint64 value) {
  _node->setNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImage",
      vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value));
}
std::tuple<QString, QJsonObject>
TomographyRawDataProperties::currentImageList() {
  return vx::PropertyValueConvertRaw<std::tuple<QString, QJsonObject>,
                                     std::tuple<QString, QJsonObject>>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<QString, QJsonObject>>(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
          "CurrentImageList"));
}
std::tuple<QString, QJsonObject>
TomographyRawDataProperties::currentImageListRaw() {
  return _node->getNodePropertyTyped<std::tuple<QString, QJsonObject>>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImageList");
}
QSharedPointer<NodeProperty>
TomographyRawDataProperties::currentImageListProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImageList",
      false);
}
NodePropertyTyped<vx::types::TomographyRawDataImageList>
TomographyRawDataProperties::currentImageListPropertyTyped() {
  return NodePropertyTyped<vx::types::TomographyRawDataImageList>(
      currentImageListProperty());
}
void TomographyRawDataProperties::setCurrentImageList(
    std::tuple<QString, QJsonObject> value) {
  _node->setNodePropertyTyped<std::tuple<QString, QJsonObject>>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImageList",
      vx::PropertyValueConvertRaw<
          std::tuple<QString, QJsonObject>,
          std::tuple<QString, QJsonObject>>::toRaw(value));
}
QJsonObject TomographyRawDataProperties::imageKind() {
  return vx::PropertyValueConvertRaw<QJsonObject, QJsonObject>::fromRaw(
      _node->getNodePropertyTyped<QJsonObject>(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImageKind"));
}
QJsonObject TomographyRawDataProperties::imageKindRaw() {
  return _node->getNodePropertyTyped<QJsonObject>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImageKind");
}
QSharedPointer<NodeProperty> TomographyRawDataProperties::imageKindProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImageKind", false);
}
NodePropertyTyped<vx::types::TomographyRawDataImageKind>
TomographyRawDataProperties::imageKindPropertyTyped() {
  return NodePropertyTyped<vx::types::TomographyRawDataImageKind>(
      imageKindProperty());
}
void TomographyRawDataProperties::setImageKind(QJsonObject value) {
  _node->setNodePropertyTyped<QJsonObject>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImageKind",
      vx::PropertyValueConvertRaw<QJsonObject, QJsonObject>::toRaw(value));
}
double TomographyRawDataProperties::imagesPerSecond() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>("de.uni_stuttgart.Voxie.Visualizer."
                                          "TomographyRawData.ImagesPerSecond"));
}
double TomographyRawDataProperties::imagesPerSecondRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImagesPerSecond");
}
QSharedPointer<NodeProperty>
TomographyRawDataProperties::imagesPerSecondProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImagesPerSecond",
      false);
}
NodePropertyTyped<vx::types::Float>
TomographyRawDataProperties::imagesPerSecondPropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(imagesPerSecondProperty());
}
void TomographyRawDataProperties::setImagesPerSecond(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImagesPerSecond",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
QString TomographyRawDataProperties::interpolation() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.Interpolation"));
}
QString TomographyRawDataProperties::interpolationRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.Interpolation");
}
QSharedPointer<NodeProperty>
TomographyRawDataProperties::interpolationProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.Interpolation",
      false);
}
NodePropertyTyped<vx::types::Enumeration>
TomographyRawDataProperties::interpolationPropertyTyped() {
  return NodePropertyTyped<vx::types::Enumeration>(interpolationProperty());
}
void TomographyRawDataProperties::setInterpolation(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.Interpolation",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
vx::Node* TomographyRawDataProperties::rawData() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.RawData"));
}
QDBusObjectPath TomographyRawDataProperties::rawDataRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.RawData");
}
QSharedPointer<NodeProperty> TomographyRawDataProperties::rawDataProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.RawData", false);
}
NodePropertyTyped<vx::types::NodeReference>
TomographyRawDataProperties::rawDataPropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(rawDataProperty());
}
void TomographyRawDataProperties::setRawData(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.RawData",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
QList<vx::ColorizerEntry> TomographyRawDataProperties::valueColorMapping() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(_node->getNodePropertyTyped<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData."
          "ValueColorMapping"));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
TomographyRawDataProperties::valueColorMappingRaw() {
  return _node->getNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ValueColorMapping");
}
QSharedPointer<NodeProperty>
TomographyRawDataProperties::valueColorMappingProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ValueColorMapping",
      false);
}
NodePropertyTyped<vx::types::ValueColorMapping>
TomographyRawDataProperties::valueColorMappingPropertyTyped() {
  return NodePropertyTyped<vx::types::ValueColorMapping>(
      valueColorMappingProperty());
}
void TomographyRawDataProperties::setValueColorMapping(
    QList<vx::ColorizerEntry> value) {
  _node->setNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ValueColorMapping",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint32>>,
          QList<vx::ColorizerEntry>>::toRaw(value));
}
bool TomographyRawDataProperties::waitForImages() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.WaitForImages"));
}
bool TomographyRawDataProperties::waitForImagesRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.WaitForImages");
}
QSharedPointer<NodeProperty>
TomographyRawDataProperties::waitForImagesProperty() {
  return TomographyRawDataProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.WaitForImages",
      false);
}
NodePropertyTyped<vx::types::Boolean>
TomographyRawDataProperties::waitForImagesPropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(waitForImagesProperty());
}
void TomographyRawDataProperties::setWaitForImages(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.WaitForImages",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
TomographyRawDataProperties::TomographyRawDataProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_CenterPoint = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.View2D.CenterPoint", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_CenterPoint](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_CenterPoint) return;
        QPointF valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double>, QPointF>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.View2D.CenterPoint\":"
              << e.what();
          return;
        }
        Q_EMIT this->centerPointChanged(valueCasted);
      });
  auto _prop_VerticalSize = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.View2D.VerticalSize", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VerticalSize](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_VerticalSize) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.View2D.VerticalSize\":"
              << e.what();
          return;
        }
        Q_EMIT this->verticalSizeChanged(valueCasted);
      });
  auto _prop_CurrentImage = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImage",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_CurrentImage](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_CurrentImage) return;
        qint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
              Node::parseVariant<qint64>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer."
                         "TomographyRawData.CurrentImage\":"
                      << e.what();
          return;
        }
        Q_EMIT this->currentImageChanged(valueCasted);
      });
  auto _prop_CurrentImageList = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.CurrentImageList",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_CurrentImageList](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_CurrentImageList) return;
        std::tuple<QString, QJsonObject> valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<QString, QJsonObject>,
                                          std::tuple<QString, QJsonObject>>::
                  fromRaw(Node::parseVariant<std::tuple<QString, QJsonObject>>(
                      value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer."
                         "TomographyRawData.CurrentImageList\":"
                      << e.what();
          return;
        }
        Q_EMIT this->currentImageListChanged(valueCasted);
      });
  auto _prop_ImageKind = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImageKind", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ImageKind](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_ImageKind) return;
        QJsonObject valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QJsonObject, QJsonObject>::fromRaw(
                  Node::parseVariant<QJsonObject>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer."
                         "TomographyRawData.ImageKind\":"
                      << e.what();
          return;
        }
        Q_EMIT this->imageKindChanged(valueCasted);
      });
  auto _prop_ImagesPerSecond = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ImagesPerSecond",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ImagesPerSecond](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ImagesPerSecond) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer."
                         "TomographyRawData.ImagesPerSecond\":"
                      << e.what();
          return;
        }
        Q_EMIT this->imagesPerSecondChanged(valueCasted);
      });
  auto _prop_Interpolation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.Interpolation",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Interpolation](const QSharedPointer<NodeProperty>& property,
                                  const QVariant& value) {
        if (property != _prop_Interpolation) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer."
                         "TomographyRawData.Interpolation\":"
                      << e.what();
          return;
        }
        Q_EMIT this->interpolationChanged(valueCasted);
      });
  auto _prop_RawData = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.RawData", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_RawData](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_RawData) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer."
                         "TomographyRawData.RawData\":"
                      << e.what();
          return;
        }
        Q_EMIT this->rawDataChanged(valueCasted);
      });
  auto _prop_ValueColorMapping = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.ValueColorMapping",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ValueColorMapping](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ValueColorMapping) return;
        QList<vx::ColorizerEntry> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>,
              QList<vx::ColorizerEntry>>::
              fromRaw(Node::parseVariant<QList<std::tuple<
                          double, std::tuple<double, double, double, double>,
                          qint32>>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer."
                         "TomographyRawData.ValueColorMapping\":"
                      << e.what();
          return;
        }
        Q_EMIT this->valueColorMappingChanged(valueCasted);
      });
  auto _prop_WaitForImages = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.TomographyRawData.WaitForImages",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_WaitForImages](const QSharedPointer<NodeProperty>& property,
                                  const QVariant& value) {
        if (property != _prop_WaitForImages) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer."
                         "TomographyRawData.WaitForImages\":"
                      << e.what();
          return;
        }
        Q_EMIT this->waitForImagesChanged(valueCasted);
      });
}

}  // namespace visualizer_prop
}  // namespace vx
