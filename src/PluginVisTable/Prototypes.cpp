// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#include "Prototypes.hpp"

#include <Voxie/Node/NodePrototype.hpp>
#include <Voxie/Node/PropertyValueConvertDBus.hpp>
#include <Voxie/Node/PropertyValueConvertRaw.hpp>
namespace vx {
inline namespace filter_prop {
AutoScaleTableUnitsPropertiesEntry::~AutoScaleTableUnitsPropertiesEntry() {}
AutoScaleTableUnitsPropertiesEntry::AutoScaleTableUnitsPropertiesEntry(
    vx::PropType::Table, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
AutoScaleTableUnitsPropertiesEntry::AutoScaleTableUnitsPropertiesEntry(
    vx::PropType::Output, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Output",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
AutoScaleTableUnitsPropertiesBase::~AutoScaleTableUnitsPropertiesBase() {}
AutoScaleTableUnitsPropertiesCopy::AutoScaleTableUnitsPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
vx::Node* AutoScaleTableUnitsPropertiesCopy::table() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table"]));
}
QDBusObjectPath AutoScaleTableUnitsPropertiesCopy::tableRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>((
      *_properties)["de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table"]);
}
vx::Node* AutoScaleTableUnitsPropertiesCopy::output() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Output"]));
}
QDBusObjectPath AutoScaleTableUnitsPropertiesCopy::outputRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Output"]);
}
static const char _prototype_AutoScaleTableUnits_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  67,  111, 110, 118, 101, 114, 116, 115, 32,  109, 101, 116, 114,
    105, 99,  32,  117, 110, 105, 116, 115, 32,  105, 110, 32,  97,  32,  116,
    97,  98,  108, 101, 32,  116, 111, 32,  109, 105, 110, 105, 109, 105, 122,
    101, 32,  116, 104, 101, 32,  110, 117, 109, 98,  101, 114, 32,  111, 102,
    32,  100, 101, 99,  105, 109, 97,  108, 32,  112, 108, 97,  99,  101, 115,
    32,  110, 101, 101, 100, 101, 100, 32,  116, 111, 32,  100, 105, 115, 112,
    108, 97,  121, 32,  116, 104, 101, 109, 46,  34,  44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  65,  117,
    116, 111, 32,  115, 99,  97,  108, 101, 32,  116, 97,  98,  108, 101, 32,
    117, 110, 105, 116, 115, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,
    32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  101, 100, 105, 116, 45,
    115, 99,  97,  108, 101, 46,  112, 110, 103, 34,  44,  32,  34,  78,  97,
    109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,
    105, 108, 116, 101, 114, 46,  65,  117, 116, 111, 83,  99,  97,  108, 101,
    84,  97,  98,  108, 101, 85,  110, 105, 116, 115, 34,  44,  32,  34,  78,
    111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  70,  105,
    108, 116, 101, 114, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116,
    105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  70,  105, 108, 116, 101, 114, 46,  65,  117, 116, 111, 83,  99,  97,
    108, 101, 84,  97,  98,  108, 101, 85,  110, 105, 116, 115, 46,  84,  97,
    98,  108, 101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100,
    78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116,
    97,  46,  84,  97,  98,  108, 101, 34,  93,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  84,  97,  98,
    108, 101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101,
    110, 99,  101, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  79,  117, 116, 112, 117, 116, 34,  58,  32,  123, 34,  65,  108, 108,
    111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121,
    112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  68,  97,  116, 97,  46,  84,  97,  98,  108, 101, 34,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  79,  117, 116, 112, 117, 116, 34,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  79,  117, 116, 112, 117,
    116, 78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 34,
    125, 125, 44,  32,  34,  82,  117, 110, 70,  105, 108, 116, 101, 114, 69,
    110, 97,  98,  108, 101, 100, 67,  111, 110, 100, 105, 116, 105, 111, 110,
    34,  58,  32,  123, 34,  67,  111, 110, 100, 105, 116, 105, 111, 110, 34,
    58,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114,
    46,  65,  117, 116, 111, 83,  99,  97,  108, 101, 84,  97,  98,  108, 101,
    85,  110, 105, 116, 115, 46,  84,  97,  98,  108, 101, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116,
    105, 111, 110, 46,  73,  115, 69,  109, 112, 116, 121, 34,  125, 44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 67,  111, 110, 100, 105,
    116, 105, 111, 110, 46,  78,  111, 116, 34,  125, 125, 0};
const char* AutoScaleTableUnitsProperties::_getPrototypeJson() {
  return _prototype_AutoScaleTableUnits_;
}

AutoScaleTableUnitsProperties::~AutoScaleTableUnitsProperties() {}

vx::Node* AutoScaleTableUnitsProperties::table() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table"));
}
QDBusObjectPath AutoScaleTableUnitsProperties::tableRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table");
}
QSharedPointer<NodeProperty> AutoScaleTableUnitsProperties::tableProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table", false);
}
void AutoScaleTableUnitsProperties::setTable(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Node* AutoScaleTableUnitsProperties::output() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Output"));
}
QDBusObjectPath AutoScaleTableUnitsProperties::outputRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Output");
}
QSharedPointer<NodeProperty> AutoScaleTableUnitsProperties::outputProperty() {
  return _node->prototype()->getProperty("de.uni_stuttgart.Voxie.Output",
                                         false);
}
void AutoScaleTableUnitsProperties::setOutput(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Output",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
AutoScaleTableUnitsProperties::AutoScaleTableUnitsProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_Table = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Table](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Table) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Filter.AutoScaleTableUnits.Table\":"
              << e.what();
          return;
        }
        Q_EMIT this->tableChanged(valueCasted);
      });
  auto _prop_Output = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Output", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Output](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Output) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property \"de.uni_stuttgart.Voxie.Output\":"
                      << e.what();
          return;
        }
        Q_EMIT this->outputChanged(valueCasted);
      });
}

}  // namespace filter_prop
inline namespace visualizer_prop {
HistogramPropertiesEntry::~HistogramPropertiesEntry() {}
HistogramPropertiesEntry::HistogramPropertiesEntry(vx::PropType::BucketCount,
                                                   qint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount",
          QVariant::fromValue<qint64>(
              vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value_))) {}
HistogramPropertiesEntry::HistogramPropertiesEntry(
    vx::PropType::ColorMap, QList<vx::ColorizerEntry> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap",
          QVariant::fromValue<QList<std::tuple<
              double, std::tuple<double, double, double, double>, qint32>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint32>>,
                  QList<vx::ColorizerEntry>>::toRaw(value_))) {}
HistogramPropertiesEntry::HistogramPropertiesEntry(vx::PropType::Column,
                                                   QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.Column",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
HistogramPropertiesEntry::HistogramPropertiesEntry(vx::PropType::LogarithmicX,
                                                   bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
HistogramPropertiesEntry::HistogramPropertiesEntry(vx::PropType::LogarithmicY,
                                                   bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
HistogramPropertiesEntry::HistogramPropertiesEntry(
    vx::PropType::LowerBoundXFraction, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.LowerBoundXFraction",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
HistogramPropertiesEntry::HistogramPropertiesEntry(vx::PropType::Table,
                                                   vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.Table",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
HistogramPropertiesEntry::HistogramPropertiesEntry(
    vx::PropType::UpperBoundXFraction, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.UpperBoundXFraction",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
HistogramPropertiesBase::~HistogramPropertiesBase() {}
HistogramPropertiesCopy::HistogramPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
qint64 HistogramPropertiesCopy::bucketCount() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      vx::Node::parseVariant<qint64>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount"]));
}
qint64 HistogramPropertiesCopy::bucketCountRaw() {
  return vx::Node::parseVariant<qint64>((
      *_properties)["de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount"]);
}
QList<vx::ColorizerEntry> HistogramPropertiesCopy::colorMap() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap"]));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
HistogramPropertiesCopy::colorMapRaw() {
  return vx::Node::parseVariant<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap"]);
}
QString HistogramPropertiesCopy::column() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>((
          *_properties)["de.uni_stuttgart.Voxie.Visualizer.Histogram.Column"]));
}
QString HistogramPropertiesCopy::columnRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Histogram.Column"]);
}
bool HistogramPropertiesCopy::logarithmicX() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX"]));
}
bool HistogramPropertiesCopy::logarithmicXRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX"]);
}
bool HistogramPropertiesCopy::logarithmicY() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY"]));
}
bool HistogramPropertiesCopy::logarithmicYRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY"]);
}
double HistogramPropertiesCopy::lowerBoundXFraction() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Histogram."
                         "LowerBoundXFraction"]));
}
double HistogramPropertiesCopy::lowerBoundXFractionRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Histogram.LowerBoundXFraction"]);
}
vx::Node* HistogramPropertiesCopy::table() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Histogram.Table"]));
}
QDBusObjectPath HistogramPropertiesCopy::tableRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Histogram.Table"]);
}
double HistogramPropertiesCopy::upperBoundXFraction() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Histogram."
                         "UpperBoundXFraction"]));
}
double HistogramPropertiesCopy::upperBoundXFractionRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Histogram.UpperBoundXFraction"]);
}
static const char _prototype_Histogram_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  72,  105, 115, 116, 111, 103, 114, 97,  109, 86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 34,  93,  44,  32,  34,  68,  101, 115,
    99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 115, 32,  97,  32,  100, 105, 115, 116, 114, 105, 98,
    117, 116, 105, 111, 110, 32,  118, 105, 101, 119, 32,  111, 102, 32,  111,
    110, 110, 101, 32,  99,  111, 108, 117, 109, 110, 115, 32,  102, 114, 111,
    109, 32,  97,  32,  116, 97,  98,  108, 101, 32,  111, 98,  106, 101, 99,
    116, 32,  97,  115, 32,  97,  32,  104, 105, 115, 116, 111, 103, 114, 97,
    109, 46,  34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  72,  105, 115, 116, 111, 103, 114, 97,  109,
    32,  118, 105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  44,  32,  34,
    78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  72,  105, 115,
    116, 111, 103, 114, 97,  109, 34,  44,  32,  34,  78,  111, 100, 101, 75,
    105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    78,  111, 100, 101, 75,  105, 110, 100, 46,  86,  105, 115, 117, 97,  108,
    105, 122, 101, 114, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116,
    105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  72,  105, 115,
    116, 111, 103, 114, 97,  109, 46,  66,  117, 99,  107, 101, 116, 67,  111,
    117, 110, 116, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105,
    98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  72,  105, 115, 116, 111, 103,
    114, 97,  109, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  66,
    117, 99,  107, 101, 116, 67,  111, 117, 110, 116, 34,  93,  44,  32,  34,
    68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,
    49,  48,  48,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  66,  117, 99,  107, 101, 116, 32,  99,  111,
    117, 110, 116, 34,  44,  32,  34,  77,  105, 110, 105, 109, 117, 109, 86,
    97,  108, 117, 101, 34,  58,  32,  49,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  73,  110, 116, 34,  44,
    32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,
    53,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  72,  105, 115, 116, 111, 103,
    114, 97,  109, 46,  67,  111, 108, 111, 114, 77,  97,  112, 34,  58,  32,
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  72,  105, 115, 116, 111, 103, 114, 97,  109, 86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  67,  111, 108, 111, 114, 77,  97,
    112, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  67,  111, 108, 111, 114, 32,  109, 97,  112,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  86,  97,  108, 117, 101, 67,  111, 108, 111, 114, 77,  97,
    112, 112, 105, 110, 103, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105,
    116, 105, 111, 110, 34,  58,  32,  54,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  72,  105, 115, 116, 111, 103, 114, 97,  109, 46,  67,  111, 108, 117,
    109, 110, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  72,  105, 115, 116, 111, 103, 114,
    97,  109, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  67,  111,
    108, 117, 109, 110, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  67,  111, 108, 117, 109, 110,
    34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 85,  73,  34,
    58,  32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101,
    114, 116, 121, 84,  121, 112, 101, 46,  83,  116, 114, 105, 110, 103, 34,
    44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,
    32,  50,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  72,  105, 115, 116, 111,
    103, 114, 97,  109, 46,  76,  111, 103, 97,  114, 105, 116, 104, 109, 105,
    99,  88,  34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  83,  99,  97,  116, 116, 101, 114,
    80,  108, 111, 116, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    76,  111, 103, 97,  114, 105, 116, 104, 109, 105, 99,  88,  34,  93,  44,
    32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,
    58,  32,  102, 97,  108, 115, 101, 44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  111, 103, 97,  114,
    105, 116, 104, 109, 105, 99,  32,  88,  45,  97,  120, 105, 115, 34,  44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101,
    46,  66,  111, 111, 108, 101, 97,  110, 34,  44,  32,  34,  85,  73,  80,
    111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  51,  125, 44,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  72,  105, 115, 116, 111, 103, 114, 97,  109, 46,  76,
    111, 103, 97,  114, 105, 116, 104, 109, 105, 99,  89,  34,  58,  32,  123,
    34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,
    97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  76,  111, 103, 97,  114, 105,
    116, 104, 109, 105, 99,  89,  34,  93,  44,  32,  34,  68,  101, 102, 97,
    117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  102, 97,  108, 115,
    101, 44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  76,  111, 103, 97,  114, 105, 116, 104, 109, 105, 99,
    32,  89,  45,  97,  120, 105, 115, 34,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  66,  111, 111, 108, 101,
    97,  110, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111,
    110, 34,  58,  32,  52,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  72,  105,
    115, 116, 111, 103, 114, 97,  109, 46,  76,  111, 119, 101, 114, 66,  111,
    117, 110, 100, 88,  70,  114, 97,  99,  116, 105, 111, 110, 34,  58,  32,
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  72,  105, 115, 116, 111, 103, 114, 97,  109, 86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  76,  111, 119, 101, 114, 66,  111,
    117, 110, 100, 88,  70,  114, 97,  99,  116, 105, 111, 110, 34,  93,  44,
    32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,
    58,  32,  48,  46,  48,  53,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  66,  117, 99,  107, 101, 116,
    32,  108, 111, 119, 101, 114, 32,  98,  111, 117, 110, 100, 32,  112, 101,
    114, 99,  101, 110, 116, 105, 108, 101, 34,  44,  32,  34,  77,  97,  120,
    105, 109, 117, 109, 86,  97,  108, 117, 101, 34,  58,  32,  49,  46,  48,
    44,  32,  34,  77,  105, 110, 105, 109, 117, 109, 86,  97,  108, 117, 101,
    34,  58,  32,  48,  46,  48,  44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101,
    114, 116, 121, 84,  121, 112, 101, 46,  70,  108, 111, 97,  116, 34,  44,
    32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,
    55,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  72,  105, 115, 116, 111, 103,
    114, 97,  109, 46,  84,  97,  98,  108, 101, 34,  58,  32,  123, 34,  65,
    108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111,
    116, 121, 112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  68,  97,  116, 97,  46,  84,  97,  98,  108, 101, 34,  93,
    44,  32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  72,  105, 115, 116, 111, 103, 114, 97,  109, 86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  84,  97,  98,  108, 101, 34,
    93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  84,  97,  98,  108, 101, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100,
    101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  44,  32,  34,  85,
    73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  49,  125, 44,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  72,  105, 115, 116, 111, 103, 114, 97,  109,
    46,  85,  112, 112, 101, 114, 66,  111, 117, 110, 100, 88,  70,  114, 97,
    99,  116, 105, 111, 110, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,
    116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,
    32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  72,  105, 115, 116,
    111, 103, 114, 97,  109, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  85,  112, 112, 101, 114, 66,  111, 117, 110, 100, 88,  70,  114, 97,
    99,  116, 105, 111, 110, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117,
    108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  48,  46,  57,  53,  44,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  66,  117, 99,  107, 101, 116, 32,  117, 112, 112, 101, 114, 32,
    98,  111, 117, 110, 100, 32,  112, 101, 114, 99,  101, 110, 116, 105, 108,
    101, 34,  44,  32,  34,  77,  97,  120, 105, 109, 117, 109, 86,  97,  108,
    117, 101, 34,  58,  32,  49,  46,  48,  44,  32,  34,  77,  105, 110, 105,
    109, 117, 109, 86,  97,  108, 117, 101, 34,  58,  32,  48,  46,  48,  44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101,
    46,  70,  108, 111, 97,  116, 34,  44,  32,  34,  85,  73,  80,  111, 115,
    105, 116, 105, 111, 110, 34,  58,  32,  56,  125, 125, 125, 0};
const char* HistogramProperties::_getPrototypeJson() {
  return _prototype_Histogram_;
}

HistogramProperties::~HistogramProperties() {}

qint64 HistogramProperties::bucketCount() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      _node->getNodePropertyTyped<qint64>(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount"));
}
qint64 HistogramProperties::bucketCountRaw() {
  return _node->getNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount");
}
QSharedPointer<NodeProperty> HistogramProperties::bucketCountProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount", false);
}
void HistogramProperties::setBucketCount(qint64 value) {
  _node->setNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount",
      vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value));
}
QList<vx::ColorizerEntry> HistogramProperties::colorMap() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(_node->getNodePropertyTyped<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap"));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
HistogramProperties::colorMapRaw() {
  return _node->getNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap");
}
QSharedPointer<NodeProperty> HistogramProperties::colorMapProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap", false);
}
void HistogramProperties::setColorMap(QList<vx::ColorizerEntry> value) {
  _node->setNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint32>>,
          QList<vx::ColorizerEntry>>::toRaw(value));
}
QString HistogramProperties::column() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.Column"));
}
QString HistogramProperties::columnRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.Column");
}
QSharedPointer<NodeProperty> HistogramProperties::columnProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.Column", false);
}
void HistogramProperties::setColumn(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.Column",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
bool HistogramProperties::logarithmicX() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX"));
}
bool HistogramProperties::logarithmicXRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX");
}
QSharedPointer<NodeProperty> HistogramProperties::logarithmicXProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX", false);
}
void HistogramProperties::setLogarithmicX(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
bool HistogramProperties::logarithmicY() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY"));
}
bool HistogramProperties::logarithmicYRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY");
}
QSharedPointer<NodeProperty> HistogramProperties::logarithmicYProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY", false);
}
void HistogramProperties::setLogarithmicY(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
double HistogramProperties::lowerBoundXFraction() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.LowerBoundXFraction"));
}
double HistogramProperties::lowerBoundXFractionRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LowerBoundXFraction");
}
QSharedPointer<NodeProperty>
HistogramProperties::lowerBoundXFractionProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LowerBoundXFraction", false);
}
void HistogramProperties::setLowerBoundXFraction(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LowerBoundXFraction",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
vx::Node* HistogramProperties::table() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.Table"));
}
QDBusObjectPath HistogramProperties::tableRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.Table");
}
QSharedPointer<NodeProperty> HistogramProperties::tableProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.Table", false);
}
void HistogramProperties::setTable(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.Table",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
double HistogramProperties::upperBoundXFraction() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.Histogram.UpperBoundXFraction"));
}
double HistogramProperties::upperBoundXFractionRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.UpperBoundXFraction");
}
QSharedPointer<NodeProperty>
HistogramProperties::upperBoundXFractionProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.UpperBoundXFraction", false);
}
void HistogramProperties::setUpperBoundXFraction(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.UpperBoundXFraction",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
HistogramProperties::HistogramProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_BucketCount = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_BucketCount](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_BucketCount) return;
        qint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
              Node::parseVariant<qint64>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Histogram.BucketCount\":"
              << e.what();
          return;
        }
        Q_EMIT this->bucketCountChanged(valueCasted);
      });
  auto _prop_ColorMap = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ColorMap](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_ColorMap) return;
        QList<vx::ColorizerEntry> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>,
              QList<vx::ColorizerEntry>>::
              fromRaw(Node::parseVariant<QList<std::tuple<
                          double, std::tuple<double, double, double, double>,
                          qint32>>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Histogram.ColorMap\":"
              << e.what();
          return;
        }
        Q_EMIT this->colorMapChanged(valueCasted);
      });
  auto _prop_Column = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.Column", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Column](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Column) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Histogram.Column\":"
              << e.what();
          return;
        }
        Q_EMIT this->columnChanged(valueCasted);
      });
  auto _prop_LogarithmicX = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LogarithmicX](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_LogarithmicX) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicX\":"
              << e.what();
          return;
        }
        Q_EMIT this->logarithmicXChanged(valueCasted);
      });
  auto _prop_LogarithmicY = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LogarithmicY](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_LogarithmicY) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Histogram.LogarithmicY\":"
              << e.what();
          return;
        }
        Q_EMIT this->logarithmicYChanged(valueCasted);
      });
  auto _prop_LowerBoundXFraction = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.LowerBoundXFraction", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LowerBoundXFraction](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_LowerBoundXFraction) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Histogram."
                         "LowerBoundXFraction\":"
                      << e.what();
          return;
        }
        Q_EMIT this->lowerBoundXFractionChanged(valueCasted);
      });
  auto _prop_Table = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.Table", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Table](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Table) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Histogram.Table\":"
              << e.what();
          return;
        }
        Q_EMIT this->tableChanged(valueCasted);
      });
  auto _prop_UpperBoundXFraction = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Histogram.UpperBoundXFraction", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_UpperBoundXFraction](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_UpperBoundXFraction) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Histogram."
                         "UpperBoundXFraction\":"
                      << e.what();
          return;
        }
        Q_EMIT this->upperBoundXFractionChanged(valueCasted);
      });
}

}  // namespace visualizer_prop
inline namespace visualizer_prop {
ScatterPlotPropertiesEntry::~ScatterPlotPropertiesEntry() {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(
    vx::PropType::ColorMap, QList<vx::ColorizerEntry> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap",
          QVariant::fromValue<QList<std::tuple<
              double, std::tuple<double, double, double, double>, qint32>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint32>>,
                  QList<vx::ColorizerEntry>>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(
    vx::PropType::ColumnColor, QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnColor",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(vx::PropType::ColumnX,
                                                       QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(vx::PropType::ColumnY,
                                                       QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(
    vx::PropType::LogarithmicX, bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicX",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(
    vx::PropType::LogarithmicY, bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicY",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(vx::PropType::PointLimit,
                                                       qint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit",
          QVariant::fromValue<qint64>(
              vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(vx::PropType::PointScale,
                                                       double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(vx::PropType::Table,
                                                       vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(vx::PropType::ViewMargin,
                                                       double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
ScatterPlotPropertiesEntry::ScatterPlotPropertiesEntry(
    vx::PropType::ViewPercentile, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewPercentile",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
ScatterPlotPropertiesBase::~ScatterPlotPropertiesBase() {}
ScatterPlotPropertiesCopy::ScatterPlotPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<vx::ColorizerEntry> ScatterPlotPropertiesCopy::colorMap() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap"]));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
ScatterPlotPropertiesCopy::colorMapRaw() {
  return vx::Node::parseVariant<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap"]);
}
QString ScatterPlotPropertiesCopy::columnColor() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnColor"]));
}
QString ScatterPlotPropertiesCopy::columnColorRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnColor"]);
}
QString ScatterPlotPropertiesCopy::columnX() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX"]));
}
QString ScatterPlotPropertiesCopy::columnXRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX"]);
}
QString ScatterPlotPropertiesCopy::columnY() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY"]));
}
QString ScatterPlotPropertiesCopy::columnYRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY"]);
}
bool ScatterPlotPropertiesCopy::logarithmicX() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicX"]));
}
bool ScatterPlotPropertiesCopy::logarithmicXRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicX"]);
}
bool ScatterPlotPropertiesCopy::logarithmicY() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicY"]));
}
bool ScatterPlotPropertiesCopy::logarithmicYRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicY"]);
}
qint64 ScatterPlotPropertiesCopy::pointLimit() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      vx::Node::parseVariant<qint64>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit"]));
}
qint64 ScatterPlotPropertiesCopy::pointLimitRaw() {
  return vx::Node::parseVariant<qint64>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit"]);
}
double ScatterPlotPropertiesCopy::pointScale() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale"]));
}
double ScatterPlotPropertiesCopy::pointScaleRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale"]);
}
vx::Node* ScatterPlotPropertiesCopy::table() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table"]));
}
QDBusObjectPath ScatterPlotPropertiesCopy::tableRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table"]);
}
double ScatterPlotPropertiesCopy::viewMargin() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin"]));
}
double ScatterPlotPropertiesCopy::viewMarginRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin"]);
}
double ScatterPlotPropertiesCopy::viewPercentile() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot."
                         "ViewPercentile"]));
}
double ScatterPlotPropertiesCopy::viewPercentileRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewPercentile"]);
}
static const char _prototype_ScatterPlot_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  93,  44,  32,  34,  68,
    101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 115, 32,  97,  32,  99,  111, 114, 114, 101,
    108, 97,  116, 105, 111, 110, 32,  118, 105, 101, 119, 32,  111, 102, 32,
    116, 119, 111, 32,  99,  111, 108, 117, 109, 110, 115, 32,  102, 114, 111,
    109, 32,  97,  32,  116, 97,  98,  108, 101, 32,  111, 98,  106, 101, 99,
    116, 32,  97,  115, 32,  97,  32,  115, 99,  97,  116, 116, 101, 114, 32,
    112, 108, 111, 116, 46,  34,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  99,  97,  116, 116, 101,
    114, 32,  112, 108, 111, 116, 32,  118, 105, 115, 117, 97,  108, 105, 122,
    101, 114, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 34,
    44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110,
    100, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  44,  32,
    34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108,
    105, 122, 101, 114, 46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111,
    116, 46,  67,  111, 108, 111, 114, 77,  97,  112, 34,  58,  32,  123, 34,
    67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,
    109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  67,  111, 108, 111, 114, 77,  97,
    112, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  67,  111, 108, 111, 114, 32,  109, 97,  112,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  86,  97,  108, 117, 101, 67,  111, 108, 111, 114, 77,  97,
    112, 112, 105, 110, 103, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105,
    116, 105, 111, 110, 34,  58,  32,  57,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 46,  67,  111,
    108, 117, 109, 110, 67,  111, 108, 111, 114, 34,  58,  32,  123, 34,  67,
    111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109,
    101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 46,  67,  111, 108, 117, 109, 110, 67,  111,
    108, 111, 114, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  67,  111, 108, 111, 114, 32,  99,
    111, 108, 117, 109, 110, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116,
    111, 109, 85,  73,  34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  83,  116,
    114, 105, 110, 103, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116,
    105, 111, 110, 34,  58,  32,  52,  125, 44,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 46,  67,  111, 108,
    117, 109, 110, 88,  34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116,
    105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,
    91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  99,  97,  116, 116,
    101, 114, 80,  108, 111, 116, 86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  67,  111, 108, 117, 109, 110, 88,  34,  93,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  88,
    32,  99,  111, 111, 114, 100, 105, 110, 97,  116, 101, 32,  99,  111, 108,
    117, 109, 110, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109,
    85,  73,  34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  83,  116, 114, 105,
    110, 103, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111,
    110, 34,  58,  32,  50,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  99,
    97,  116, 116, 101, 114, 80,  108, 111, 116, 46,  67,  111, 108, 117, 109,
    110, 89,  34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  83,  99,  97,  116, 116, 101, 114,
    80,  108, 111, 116, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    67,  111, 108, 117, 109, 110, 89,  34,  93,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  89,  32,  99,
    111, 111, 114, 100, 105, 110, 97,  116, 101, 32,  99,  111, 108, 117, 109,
    110, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 85,  73,
    34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  83,  116, 114, 105, 110, 103,
    34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,
    58,  32,  51,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  99,  97,  116,
    116, 101, 114, 80,  108, 111, 116, 46,  76,  111, 103, 97,  114, 105, 116,
    104, 109, 105, 99,  88,  34,  58,  32,  123, 34,  67,  111, 109, 112, 97,
    116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,
    32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  99,  97,  116,
    116, 101, 114, 80,  108, 111, 116, 86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  76,  111, 103, 97,  114, 105, 116, 104, 109, 105, 99,  88,
    34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108,
    117, 101, 34,  58,  32,  102, 97,  108, 115, 101, 44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  111,
    103, 97,  114, 105, 116, 104, 109, 105, 99,  32,  88,  45,  97,  120, 105,
    115, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,
    121, 112, 101, 46,  66,  111, 111, 108, 101, 97,  110, 34,  44,  32,  34,
    85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  53,  125,
    44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 46,  83,  99,  97,  116, 116, 101, 114, 80,
    108, 111, 116, 46,  76,  111, 103, 97,  114, 105, 116, 104, 109, 105, 99,
    89,  34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105,
    108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  99,  97,  116, 116, 101, 114, 80,
    108, 111, 116, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  76,
    111, 103, 97,  114, 105, 116, 104, 109, 105, 99,  89,  34,  93,  44,  32,
    34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,
    32,  102, 97,  108, 115, 101, 44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  111, 103, 97,  114, 105,
    116, 104, 109, 105, 99,  32,  89,  45,  97,  120, 105, 115, 34,  44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,
    66,  111, 111, 108, 101, 97,  110, 34,  44,  32,  34,  85,  73,  80,  111,
    115, 105, 116, 105, 111, 110, 34,  58,  32,  54,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 46,
    80,  111, 105, 110, 116, 76,  105, 109, 105, 116, 34,  58,  32,  123, 34,
    67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,
    109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  80,  111, 105, 110, 116, 76,  105,
    109, 105, 116, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116,
    86,  97,  108, 117, 101, 34,  58,  32,  49,  48,  48,  48,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    80,  111, 105, 110, 116, 32,  100, 105, 115, 112, 108, 97,  121, 32,  108,
    105, 109, 105, 116, 34,  44,  32,  34,  77,  105, 110, 105, 109, 117, 109,
    86,  97,  108, 117, 101, 34,  58,  32,  49,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  73,  110, 116, 34,
    44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,
    32,  55,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  99,  97,  116, 116,
    101, 114, 80,  108, 111, 116, 46,  80,  111, 105, 110, 116, 83,  99,  97,
    108, 101, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  83,  99,  97,  116, 116, 101, 114,
    80,  108, 111, 116, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    80,  111, 105, 110, 116, 83,  99,  97,  108, 101, 34,  93,  44,  32,  34,
    68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,
    52,  46,  48,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  80,  111, 105, 110, 116, 32,  115, 99,  97,
    108, 101, 34,  44,  32,  34,  77,  105, 110, 105, 109, 117, 109, 86,  97,
    108, 117, 101, 34,  58,  32,  49,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108, 111, 97,  116, 34,
    44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,
    32,  56,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  99,  97,  116, 116,
    101, 114, 80,  108, 111, 116, 46,  84,  97,  98,  108, 101, 34,  58,  32,
    123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 80,  114,
    111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  84,  97,  98,  108,
    101, 34,  93,  44,  32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105,
    108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  99,  97,  116, 116, 101, 114, 80,
    108, 111, 116, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  84,
    97,  98,  108, 101, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  84,  97,  98,  108, 101, 34,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101,
    34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,
    58,  32,  49,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  99,  97,  116,
    116, 101, 114, 80,  108, 111, 116, 46,  86,  105, 101, 119, 77,  97,  114,
    103, 105, 110, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105,
    98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  99,  97,  116, 116, 101,
    114, 80,  108, 111, 116, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  86,  105, 101, 119, 77,  97,  114, 103, 105, 110, 34,  93,  44,  32,
    34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,
    32,  53,  46,  48,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  86,  105, 101, 119, 32,  109, 97,  114,
    103, 105, 110, 115, 34,  44,  32,  34,  77,  105, 110, 105, 109, 117, 109,
    86,  97,  108, 117, 101, 34,  58,  32,  48,  46,  48,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108,
    111, 97,  116, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105,
    111, 110, 34,  58,  32,  49,  49,  125, 44,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 46,  86,  105, 101,
    119, 80,  101, 114, 99,  101, 110, 116, 105, 108, 101, 34,  58,  32,  123,
    34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,
    97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  99,  97,  116, 116, 101, 114, 80,  108, 111, 116, 86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  105, 101, 119, 80,  101,
    114, 99,  101, 110, 116, 105, 108, 101, 34,  93,  44,  32,  34,  68,  101,
    102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  57,  53,
    46,  48,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  86,  105, 101, 119, 32,  115, 99,  97,  108, 101,
    32,  112, 101, 114, 99,  101, 110, 116, 105, 108, 101, 34,  44,  32,  34,
    77,  97,  120, 105, 109, 117, 109, 86,  97,  108, 117, 101, 34,  58,  32,
    49,  48,  48,  46,  48,  44,  32,  34,  77,  105, 110, 105, 109, 117, 109,
    86,  97,  108, 117, 101, 34,  58,  32,  49,  46,  48,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108,
    111, 97,  116, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105,
    111, 110, 34,  58,  32,  49,  48,  125, 125, 125, 0};
const char* ScatterPlotProperties::_getPrototypeJson() {
  return _prototype_ScatterPlot_;
}

ScatterPlotProperties::~ScatterPlotProperties() {}

QList<vx::ColorizerEntry> ScatterPlotProperties::colorMap() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(_node->getNodePropertyTyped<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap"));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
ScatterPlotProperties::colorMapRaw() {
  return _node->getNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::colorMapProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap", false);
}
void ScatterPlotProperties::setColorMap(QList<vx::ColorizerEntry> value) {
  _node->setNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint32>>,
          QList<vx::ColorizerEntry>>::toRaw(value));
}
QString ScatterPlotProperties::columnColor() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnColor"));
}
QString ScatterPlotProperties::columnColorRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnColor");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::columnColorProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnColor", false);
}
void ScatterPlotProperties::setColumnColor(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnColor",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
QString ScatterPlotProperties::columnX() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX"));
}
QString ScatterPlotProperties::columnXRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::columnXProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX", false);
}
void ScatterPlotProperties::setColumnX(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
QString ScatterPlotProperties::columnY() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY"));
}
QString ScatterPlotProperties::columnYRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::columnYProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY", false);
}
void ScatterPlotProperties::setColumnY(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
bool ScatterPlotProperties::logarithmicX() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicX"));
}
bool ScatterPlotProperties::logarithmicXRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicX");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::logarithmicXProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicX", false);
}
void ScatterPlotProperties::setLogarithmicX(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicX",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
bool ScatterPlotProperties::logarithmicY() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicY"));
}
bool ScatterPlotProperties::logarithmicYRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicY");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::logarithmicYProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicY", false);
}
void ScatterPlotProperties::setLogarithmicY(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicY",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
qint64 ScatterPlotProperties::pointLimit() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      _node->getNodePropertyTyped<qint64>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit"));
}
qint64 ScatterPlotProperties::pointLimitRaw() {
  return _node->getNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::pointLimitProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit", false);
}
void ScatterPlotProperties::setPointLimit(qint64 value) {
  _node->setNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit",
      vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value));
}
double ScatterPlotProperties::pointScale() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale"));
}
double ScatterPlotProperties::pointScaleRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::pointScaleProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale", false);
}
void ScatterPlotProperties::setPointScale(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
vx::Node* ScatterPlotProperties::table() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table"));
}
QDBusObjectPath ScatterPlotProperties::tableRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::tableProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table", false);
}
void ScatterPlotProperties::setTable(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
double ScatterPlotProperties::viewMargin() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin"));
}
double ScatterPlotProperties::viewMarginRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::viewMarginProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin", false);
}
void ScatterPlotProperties::setViewMargin(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
double ScatterPlotProperties::viewPercentile() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewPercentile"));
}
double ScatterPlotProperties::viewPercentileRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewPercentile");
}
QSharedPointer<NodeProperty> ScatterPlotProperties::viewPercentileProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewPercentile", false);
}
void ScatterPlotProperties::setViewPercentile(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewPercentile",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
ScatterPlotProperties::ScatterPlotProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_ColorMap = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ColorMap](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_ColorMap) return;
        QList<vx::ColorizerEntry> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>,
              QList<vx::ColorizerEntry>>::
              fromRaw(Node::parseVariant<QList<std::tuple<
                          double, std::tuple<double, double, double, double>,
                          qint32>>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColorMap\":"
              << e.what();
          return;
        }
        Q_EMIT this->colorMapChanged(valueCasted);
      });
  auto _prop_ColumnColor = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnColor", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ColumnColor](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_ColumnColor) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot."
                         "ColumnColor\":"
                      << e.what();
          return;
        }
        Q_EMIT this->columnColorChanged(valueCasted);
      });
  auto _prop_ColumnX = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ColumnX](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_ColumnX) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnX\":"
              << e.what();
          return;
        }
        Q_EMIT this->columnXChanged(valueCasted);
      });
  auto _prop_ColumnY = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ColumnY](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_ColumnY) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ColumnY\":"
              << e.what();
          return;
        }
        Q_EMIT this->columnYChanged(valueCasted);
      });
  auto _prop_LogarithmicX = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicX", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LogarithmicX](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_LogarithmicX) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot."
                         "LogarithmicX\":"
                      << e.what();
          return;
        }
        Q_EMIT this->logarithmicXChanged(valueCasted);
      });
  auto _prop_LogarithmicY = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.LogarithmicY", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LogarithmicY](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_LogarithmicY) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot."
                         "LogarithmicY\":"
                      << e.what();
          return;
        }
        Q_EMIT this->logarithmicYChanged(valueCasted);
      });
  auto _prop_PointLimit = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_PointLimit](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_PointLimit) return;
        qint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
              Node::parseVariant<qint64>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointLimit\":"
              << e.what();
          return;
        }
        Q_EMIT this->pointLimitChanged(valueCasted);
      });
  auto _prop_PointScale = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_PointScale](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_PointScale) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.PointScale\":"
              << e.what();
          return;
        }
        Q_EMIT this->pointScaleChanged(valueCasted);
      });
  auto _prop_Table = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Table](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Table) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.Table\":"
              << e.what();
          return;
        }
        Q_EMIT this->tableChanged(valueCasted);
      });
  auto _prop_ViewMargin = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ViewMargin](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_ViewMargin) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewMargin\":"
              << e.what();
          return;
        }
        Q_EMIT this->viewMarginChanged(valueCasted);
      });
  auto _prop_ViewPercentile = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.ScatterPlot.ViewPercentile", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ViewPercentile](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_ViewPercentile) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.ScatterPlot."
                         "ViewPercentile\":"
                      << e.what();
          return;
        }
        Q_EMIT this->viewPercentileChanged(valueCasted);
      });
}

}  // namespace visualizer_prop
inline namespace visualizer_prop {
TablePropertiesEntry::~TablePropertiesEntry() {}
TablePropertiesEntry::TablePropertiesEntry(vx::PropType::RowLimit,
                                           qint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit",
          QVariant::fromValue<qint64>(
              vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value_))) {}
TablePropertiesEntry::TablePropertiesEntry(vx::PropType::SortColumn,
                                           QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
TablePropertiesEntry::TablePropertiesEntry(vx::PropType::SortOrder,
                                           QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
TablePropertiesEntry::TablePropertiesEntry(vx::PropType::Table,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Table.Table",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
TablePropertiesBase::~TablePropertiesBase() {}
TablePropertiesCopy::TablePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
qint64 TablePropertiesCopy::rowLimit() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      vx::Node::parseVariant<qint64>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit"]));
}
qint64 TablePropertiesCopy::rowLimitRaw() {
  return vx::Node::parseVariant<qint64>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit"]);
}
QString TablePropertiesCopy::sortColumn() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>((
          *_properties)["de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn"]));
}
QString TablePropertiesCopy::sortColumnRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn"]);
}
QString TablePropertiesCopy::sortOrder() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder"]));
}
QString TablePropertiesCopy::sortOrderRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder"]);
}
vx::Node* TablePropertiesCopy::table() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Table.Table"]));
}
QDBusObjectPath TablePropertiesCopy::tableRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Table.Table"]);
}
static const char _prototype_Table_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  84,  97,  98,  108, 101, 86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 34,  93,  44,  32,  34,  68,  101, 115, 99,  114, 105, 112,
    116, 105, 111, 110, 34,  58,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    32,  116, 97,  98,  108, 101, 32,  100, 97,  116, 97,  34,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    84,  97,  98,  108, 101, 32,  118, 105, 115, 117, 97,  108, 105, 122, 101,
    114, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  84,  97,  98,  108, 101, 34,  44,  32,  34,  78,  111, 100, 101,
    75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114,
    116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  84,  97,
    98,  108, 101, 46,  82,  111, 119, 76,  105, 109, 105, 116, 34,  58,  32,
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  84,  97,  98,  108, 101, 86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  82,  111, 119, 76,  105, 109, 105, 116, 34,  93,  44,
    32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,
    58,  32,  49,  48,  48,  48,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  82,  111, 119, 32,  100, 105,
    115, 112, 108, 97,  121, 32,  108, 105, 109, 105, 116, 34,  44,  32,  34,
    77,  105, 110, 105, 109, 117, 109, 86,  97,  108, 117, 101, 34,  58,  32,
    49,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  73,  110, 116, 34,  44,  32,  34,  85,  73,  80,  111, 115,
    105, 116, 105, 111, 110, 34,  58,  32,  50,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  84,  97,  98,  108, 101, 46,  83,  111, 114, 116, 67,  111, 108,
    117, 109, 110, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105,
    98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  84,  97,  98,  108, 101, 86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  111, 114, 116, 67,
    111, 108, 117, 109, 110, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  111, 114, 116, 105,
    110, 103, 32,  99,  111, 108, 117, 109, 110, 34,  44,  32,  34,  73,  115,
    67,  117, 115, 116, 111, 109, 83,  116, 111, 114, 97,  103, 101, 34,  58,
    32,  116, 114, 117, 101, 44,  32,  34,  73,  115, 67,  117, 115, 116, 111,
    109, 85,  73,  34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  83,  116, 114,
    105, 110, 103, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105,
    111, 110, 34,  58,  32,  51,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  84,
    97,  98,  108, 101, 46,  83,  111, 114, 116, 79,  114, 100, 101, 114, 34,
    58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105,
    116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  84,  97,  98,  108, 101, 86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  83,  111, 114, 116, 79,  114, 100, 101, 114,
    34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108,
    117, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  84,  97,  98,  108, 101,
    46,  83,  111, 114, 116, 79,  114, 100, 101, 114, 46,  65,  115, 99,  101,
    110, 100, 105, 110, 103, 34,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  111, 114, 116, 105, 110,
    103, 32,  111, 114, 100, 101, 114, 34,  44,  32,  34,  69,  110, 117, 109,
    69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  84,  97,  98,  108, 101, 46,  83,  111, 114, 116, 79,  114, 100, 101,
    114, 46,  65,  115, 99,  101, 110, 100, 105, 110, 103, 34,  58,  32,  123,
    34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,
    97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  84,  97,  98,  108, 101, 86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  83,  111, 114, 116, 79,  114, 100, 101, 114, 46,  65,  115,
    99,  101, 110, 100, 105, 110, 103, 34,  93,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  65,  115, 99,
    101, 110, 100, 105, 110, 103, 34,  44,  32,  34,  85,  73,  80,  111, 115,
    105, 116, 105, 111, 110, 34,  58,  32,  49,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  84,  97,  98,  108, 101, 46,  83,  111, 114, 116, 79,  114, 100,
    101, 114, 46,  68,  101, 115, 99,  101, 110, 100, 105, 110, 103, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  84,  97,  98,  108, 101, 86,  105, 115, 117, 97,  108,
    105, 122, 101, 114, 46,  83,  111, 114, 116, 79,  114, 100, 101, 114, 46,
    68,  101, 115, 99,  101, 110, 100, 105, 110, 103, 34,  93,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    68,  101, 115, 99,  101, 110, 100, 105, 110, 103, 34,  44,  32,  34,  85,
    73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  50,  125, 125,
    44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 83,  116, 111, 114,
    97,  103, 101, 34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  73,  115,
    67,  117, 115, 116, 111, 109, 85,  73,  34,  58,  32,  116, 114, 117, 101,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  69,  110, 117, 109, 101, 114, 97,  116, 105, 111, 110, 34,  44,
    32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,
    52,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  84,  97,  98,  108, 101, 46,
    84,  97,  98,  108, 101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119,
    101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101,
    115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,
    97,  116, 97,  46,  84,  97,  98,  108, 101, 34,  93,  44,  32,  34,  67,
    111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109,
    101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    84,  97,  98,  108, 101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  84,  97,  98,  108, 101, 34,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  84,  97,  98,  108,
    101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,
    121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110,
    99,  101, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111,
    110, 34,  58,  32,  49,  125, 125, 44,  32,  34,  85,  73,  34,  58,  32,
    123, 34,  83,  105, 100, 101, 80,  97,  110, 101, 108, 83,  101, 99,  116,
    105, 111, 110, 115, 34,  58,  32,  91,  93,  44,  32,  34,  84,  79,  68,
    79,  34,  58,  32,  34,  65,  100, 100, 32,  116, 97,  98,  108, 101, 32,
    99,  111, 108, 117, 109, 110, 32,  108, 105, 115, 116, 32,  40,  119, 105,
    116, 104, 32,  118, 105, 115, 105, 98,  105, 108, 105, 116, 121, 47,  115,
    111, 114, 116, 105, 110, 103, 47,  112, 111, 115, 105, 116, 105, 111, 110,
    41,  32,  97,  110, 100, 32,  114, 111, 119, 32,  99,  111, 117, 110, 116,
    32,  105, 110, 102, 111, 114, 109, 97,  116, 105, 111, 110, 34,  125, 125,
    0};
const char* TableProperties::_getPrototypeJson() { return _prototype_Table_; }

TableProperties::~TableProperties() {}

qint64 TableProperties::rowLimit() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      _node->getNodePropertyTyped<qint64>(
          "de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit"));
}
qint64 TableProperties::rowLimitRaw() {
  return _node->getNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit");
}
QSharedPointer<NodeProperty> TableProperties::rowLimitProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit", false);
}
void TableProperties::setRowLimit(qint64 value) {
  _node->setNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit",
      vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value));
}
QString TableProperties::sortColumn() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn"));
}
QString TableProperties::sortColumnRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn");
}
QSharedPointer<NodeProperty> TableProperties::sortColumnProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn", false);
}
void TableProperties::setSortColumn(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
QString TableProperties::sortOrder() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder"));
}
QString TableProperties::sortOrderRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder");
}
QSharedPointer<NodeProperty> TableProperties::sortOrderProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder", false);
}
void TableProperties::setSortOrder(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
vx::Node* TableProperties::table() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Table.Table"));
}
QDBusObjectPath TableProperties::tableRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Table.Table");
}
QSharedPointer<NodeProperty> TableProperties::tableProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Table.Table", false);
}
void TableProperties::setTable(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Table.Table",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
TableProperties::TableProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_RowLimit = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_RowLimit](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_RowLimit) return;
        qint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
              Node::parseVariant<qint64>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Table.RowLimit\":"
                      << e.what();
          return;
        }
        Q_EMIT this->rowLimitChanged(valueCasted);
      });
  auto _prop_SortColumn = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_SortColumn](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_SortColumn) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Table.SortColumn\":"
              << e.what();
          return;
        }
        Q_EMIT this->sortColumnChanged(valueCasted);
      });
  auto _prop_SortOrder = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_SortOrder](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_SortOrder) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Table.SortOrder\":"
              << e.what();
          return;
        }
        Q_EMIT this->sortOrderChanged(valueCasted);
      });
  auto _prop_Table = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Table.Table", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Table](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Table) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Visualizer.Table.Table\":"
              << e.what();
          return;
        }
        Q_EMIT this->tableChanged(valueCasted);
      });
}

}  // namespace visualizer_prop
}  // namespace vx
