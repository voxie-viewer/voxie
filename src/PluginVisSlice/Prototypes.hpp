// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#pragma once

#include <QtCore/QJsonObject>
#include <QtCore/QList>
#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtGui/QQuaternion>
#include <QtGui/QVector3D>
#include <Voxie/Data/Color.hpp>
#include <Voxie/Data/ColorizerEntry.hpp>
#include <Voxie/Node/Node.hpp>
#include <Voxie/Node/Types.hpp>
#include <VoxieBackend/Data/DataType.hpp>

namespace vx {
#ifndef VOXIE_PROP_DEFINED_CenterPoint
#define VOXIE_PROP_DEFINED_CenterPoint
namespace PropType {
class CenterPoint : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::CenterPoint CenterPoint = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Filter2DConfiguration
#define VOXIE_PROP_DEFINED_Filter2DConfiguration
namespace PropType {
class Filter2DConfiguration : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Filter2DConfiguration Filter2DConfiguration = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GeometricPrimitive
#define VOXIE_PROP_DEFINED_GeometricPrimitive
namespace PropType {
class GeometricPrimitive : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GeometricPrimitive GeometricPrimitive = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GeometricPrimitiveColorBehindSlice
#define VOXIE_PROP_DEFINED_GeometricPrimitiveColorBehindSlice
namespace PropType {
class GeometricPrimitiveColorBehindSlice : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GeometricPrimitiveColorBehindSlice
    GeometricPrimitiveColorBehindSlice = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GeometricPrimitiveColorInFrontOfSlice
#define VOXIE_PROP_DEFINED_GeometricPrimitiveColorInFrontOfSlice
namespace PropType {
class GeometricPrimitiveColorInFrontOfSlice : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GeometricPrimitiveColorInFrontOfSlice
    GeometricPrimitiveColorInFrontOfSlice = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GeometricPrimitiveColorOnSlice
#define VOXIE_PROP_DEFINED_GeometricPrimitiveColorOnSlice
namespace PropType {
class GeometricPrimitiveColorOnSlice : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GeometricPrimitiveColorOnSlice
    GeometricPrimitiveColorOnSlice = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GeometricPrimitiveVisibilityDistance
#define VOXIE_PROP_DEFINED_GeometricPrimitiveVisibilityDistance
namespace PropType {
class GeometricPrimitiveVisibilityDistance : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GeometricPrimitiveVisibilityDistance
    GeometricPrimitiveVisibilityDistance = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GridColor
#define VOXIE_PROP_DEFINED_GridColor
namespace PropType {
class GridColor : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GridColor GridColor = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GridShow
#define VOXIE_PROP_DEFINED_GridShow
namespace PropType {
class GridShow : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GridShow GridShow = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GridSpacing
#define VOXIE_PROP_DEFINED_GridSpacing
namespace PropType {
class GridSpacing : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GridSpacing GridSpacing = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_GridSpacingAutomatic
#define VOXIE_PROP_DEFINED_GridSpacingAutomatic
namespace PropType {
class GridSpacingAutomatic : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GridSpacingAutomatic GridSpacingAutomatic = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_InfoTable
#define VOXIE_PROP_DEFINED_InfoTable
namespace PropType {
class InfoTable : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::InfoTable InfoTable = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Interpolation
#define VOXIE_PROP_DEFINED_Interpolation
namespace PropType {
class Interpolation : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Interpolation Interpolation = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_LabelContainer
#define VOXIE_PROP_DEFINED_LabelContainer
namespace PropType {
class LabelContainer : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::LabelContainer LabelContainer = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Orientation
#define VOXIE_PROP_DEFINED_Orientation
namespace PropType {
class Orientation : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Orientation Orientation = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Origin
#define VOXIE_PROP_DEFINED_Origin
namespace PropType {
class Origin : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Origin Origin = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Plane
#define VOXIE_PROP_DEFINED_Plane
namespace PropType {
class Plane : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Plane Plane = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_RulerColor
#define VOXIE_PROP_DEFINED_RulerColor
namespace PropType {
class RulerColor : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::RulerColor RulerColor = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_RulerShow
#define VOXIE_PROP_DEFINED_RulerShow
namespace PropType {
class RulerShow : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::RulerShow RulerShow = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_RulerSpacing
#define VOXIE_PROP_DEFINED_RulerSpacing
namespace PropType {
class RulerSpacing : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::RulerSpacing RulerSpacing = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_RulerSpacingAutomatic
#define VOXIE_PROP_DEFINED_RulerSpacingAutomatic
namespace PropType {
class RulerSpacingAutomatic : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::RulerSpacingAutomatic RulerSpacingAutomatic = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_SegmentationFilter
#define VOXIE_PROP_DEFINED_SegmentationFilter
namespace PropType {
class SegmentationFilter : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::SegmentationFilter SegmentationFilter = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Show2DFilterMask
#define VOXIE_PROP_DEFINED_Show2DFilterMask
namespace PropType {
class Show2DFilterMask : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Show2DFilterMask Show2DFilterMask = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_ShowSliceCenter
#define VOXIE_PROP_DEFINED_ShowSliceCenter
namespace PropType {
class ShowSliceCenter : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::ShowSliceCenter ShowSliceCenter = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_ShowViewCenter
#define VOXIE_PROP_DEFINED_ShowViewCenter
namespace PropType {
class ShowViewCenter : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::ShowViewCenter ShowViewCenter = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Surface
#define VOXIE_PROP_DEFINED_Surface
namespace PropType {
class Surface : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Surface Surface = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_ValueColorMapping
#define VOXIE_PROP_DEFINED_ValueColorMapping
namespace PropType {
class ValueColorMapping : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::ValueColorMapping ValueColorMapping = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_VerticalSize
#define VOXIE_PROP_DEFINED_VerticalSize
namespace PropType {
class VerticalSize : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::VerticalSize VerticalSize = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Volume
#define VOXIE_PROP_DEFINED_Volume
namespace PropType {
class Volume : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Volume Volume = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_VolumeGridColor
#define VOXIE_PROP_DEFINED_VolumeGridColor
namespace PropType {
class VolumeGridColor : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::VolumeGridColor VolumeGridColor = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_VolumeGridShow
#define VOXIE_PROP_DEFINED_VolumeGridShow
namespace PropType {
class VolumeGridShow : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::VolumeGridShow VolumeGridShow = {};
}
#endif
inline namespace visualizer_prop {
class SlicePropertiesEntry : public vx::PropertiesEntryBase {
  SlicePropertiesEntry() = delete;

 public:
  ~SlicePropertiesEntry();
  SlicePropertiesEntry(vx::PropType::CenterPoint, QPointF);
  SlicePropertiesEntry(vx::PropType::VerticalSize, double);
  SlicePropertiesEntry(vx::PropType::Filter2DConfiguration, QString);
  SlicePropertiesEntry(vx::PropType::GeometricPrimitive, vx::Node*);
  SlicePropertiesEntry(vx::PropType::GeometricPrimitiveColorBehindSlice,
                       vx::Color);
  SlicePropertiesEntry(vx::PropType::GeometricPrimitiveColorInFrontOfSlice,
                       vx::Color);
  SlicePropertiesEntry(vx::PropType::GeometricPrimitiveColorOnSlice, vx::Color);
  SlicePropertiesEntry(vx::PropType::GeometricPrimitiveVisibilityDistance,
                       double);
  SlicePropertiesEntry(vx::PropType::GridColor, vx::Color);
  SlicePropertiesEntry(vx::PropType::GridShow, bool);
  SlicePropertiesEntry(vx::PropType::GridSpacing, double);
  SlicePropertiesEntry(vx::PropType::GridSpacingAutomatic, bool);
  SlicePropertiesEntry(vx::PropType::InfoTable, vx::Node*);
  SlicePropertiesEntry(vx::PropType::Interpolation, QString);
  SlicePropertiesEntry(vx::PropType::LabelContainer, vx::Node*);
  SlicePropertiesEntry(vx::PropType::Plane, vx::Node*);
  SlicePropertiesEntry(vx::PropType::Orientation, QQuaternion);
  SlicePropertiesEntry(vx::PropType::Origin, QVector3D);
  SlicePropertiesEntry(vx::PropType::RulerColor, vx::Color);
  SlicePropertiesEntry(vx::PropType::RulerShow, bool);
  SlicePropertiesEntry(vx::PropType::RulerSpacing, double);
  SlicePropertiesEntry(vx::PropType::RulerSpacingAutomatic, bool);
  SlicePropertiesEntry(vx::PropType::SegmentationFilter, vx::Node*);
  SlicePropertiesEntry(vx::PropType::Show2DFilterMask, qint64);
  SlicePropertiesEntry(vx::PropType::ShowSliceCenter, bool);
  SlicePropertiesEntry(vx::PropType::ShowViewCenter, bool);
  SlicePropertiesEntry(vx::PropType::Surface, QList<vx::Node*>);
  SlicePropertiesEntry(vx::PropType::ValueColorMapping,
                       QList<vx::ColorizerEntry>);
  SlicePropertiesEntry(vx::PropType::Volume, vx::Node*);
  SlicePropertiesEntry(vx::PropType::VolumeGridColor, vx::Color);
  SlicePropertiesEntry(vx::PropType::VolumeGridShow, bool);
};
class SlicePropertiesBase {
 public:
  virtual ~SlicePropertiesBase();
  virtual QPointF centerPoint() = 0;
  virtual std::tuple<double, double> centerPointRaw() = 0;
  virtual double verticalSize() = 0;
  virtual double verticalSizeRaw() = 0;
  virtual QString filter2DConfiguration() = 0;
  virtual QString filter2DConfigurationRaw() = 0;
  virtual vx::Node* geometricPrimitive() = 0;
  virtual QDBusObjectPath geometricPrimitiveRaw() = 0;
  virtual vx::Color geometricPrimitiveColorBehindSlice() = 0;
  virtual std::tuple<double, double, double, double>
  geometricPrimitiveColorBehindSliceRaw() = 0;
  virtual vx::Color geometricPrimitiveColorInFrontOfSlice() = 0;
  virtual std::tuple<double, double, double, double>
  geometricPrimitiveColorInFrontOfSliceRaw() = 0;
  virtual vx::Color geometricPrimitiveColorOnSlice() = 0;
  virtual std::tuple<double, double, double, double>
  geometricPrimitiveColorOnSliceRaw() = 0;
  virtual double geometricPrimitiveVisibilityDistance() = 0;
  virtual double geometricPrimitiveVisibilityDistanceRaw() = 0;
  virtual vx::Color gridColor() = 0;
  virtual std::tuple<double, double, double, double> gridColorRaw() = 0;
  virtual bool gridShow() = 0;
  virtual bool gridShowRaw() = 0;
  virtual double gridSpacing() = 0;
  virtual double gridSpacingRaw() = 0;
  virtual bool gridSpacingAutomatic() = 0;
  virtual bool gridSpacingAutomaticRaw() = 0;
  virtual vx::Node* infoTable() = 0;
  virtual QDBusObjectPath infoTableRaw() = 0;
  virtual QString interpolation() = 0;
  virtual QString interpolationRaw() = 0;
  virtual vx::Node* labelContainer() = 0;
  virtual QDBusObjectPath labelContainerRaw() = 0;
  virtual vx::Node* plane() = 0;
  virtual QDBusObjectPath planeRaw() = 0;
  virtual QQuaternion orientation() = 0;
  virtual std::tuple<double, double, double, double> orientationRaw() = 0;
  virtual QVector3D origin() = 0;
  virtual std::tuple<double, double, double> originRaw() = 0;
  virtual vx::Color rulerColor() = 0;
  virtual std::tuple<double, double, double, double> rulerColorRaw() = 0;
  virtual bool rulerShow() = 0;
  virtual bool rulerShowRaw() = 0;
  virtual double rulerSpacing() = 0;
  virtual double rulerSpacingRaw() = 0;
  virtual bool rulerSpacingAutomatic() = 0;
  virtual bool rulerSpacingAutomaticRaw() = 0;
  virtual vx::Node* segmentationFilter() = 0;
  virtual QDBusObjectPath segmentationFilterRaw() = 0;
  virtual qint64 show2DFilterMask() = 0;
  virtual qint64 show2DFilterMaskRaw() = 0;
  virtual bool showSliceCenter() = 0;
  virtual bool showSliceCenterRaw() = 0;
  virtual bool showViewCenter() = 0;
  virtual bool showViewCenterRaw() = 0;
  virtual QList<vx::Node*> surface() = 0;
  virtual QList<QDBusObjectPath> surfaceRaw() = 0;
  virtual QList<vx::ColorizerEntry> valueColorMapping() = 0;
  virtual QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  valueColorMappingRaw() = 0;
  virtual vx::Node* volume() = 0;
  virtual QDBusObjectPath volumeRaw() = 0;
  virtual vx::Color volumeGridColor() = 0;
  virtual std::tuple<double, double, double, double> volumeGridColorRaw() = 0;
  virtual bool volumeGridShow() = 0;
  virtual bool volumeGridShowRaw() = 0;
};
class SlicePropertiesCopy : public SlicePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  SlicePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QPointF centerPoint() override final;
  std::tuple<double, double> centerPointRaw() override final;
  double verticalSize() override final;
  double verticalSizeRaw() override final;
  QString filter2DConfiguration() override final;
  QString filter2DConfigurationRaw() override final;
  vx::Node* geometricPrimitive() override final;
  QDBusObjectPath geometricPrimitiveRaw() override final;
  vx::Color geometricPrimitiveColorBehindSlice() override final;
  std::tuple<double, double, double, double>
  geometricPrimitiveColorBehindSliceRaw() override final;
  vx::Color geometricPrimitiveColorInFrontOfSlice() override final;
  std::tuple<double, double, double, double>
  geometricPrimitiveColorInFrontOfSliceRaw() override final;
  vx::Color geometricPrimitiveColorOnSlice() override final;
  std::tuple<double, double, double, double> geometricPrimitiveColorOnSliceRaw()
      override final;
  double geometricPrimitiveVisibilityDistance() override final;
  double geometricPrimitiveVisibilityDistanceRaw() override final;
  vx::Color gridColor() override final;
  std::tuple<double, double, double, double> gridColorRaw() override final;
  bool gridShow() override final;
  bool gridShowRaw() override final;
  double gridSpacing() override final;
  double gridSpacingRaw() override final;
  bool gridSpacingAutomatic() override final;
  bool gridSpacingAutomaticRaw() override final;
  vx::Node* infoTable() override final;
  QDBusObjectPath infoTableRaw() override final;
  QString interpolation() override final;
  QString interpolationRaw() override final;
  vx::Node* labelContainer() override final;
  QDBusObjectPath labelContainerRaw() override final;
  vx::Node* plane() override final;
  QDBusObjectPath planeRaw() override final;
  QQuaternion orientation() override final;
  std::tuple<double, double, double, double> orientationRaw() override final;
  QVector3D origin() override final;
  std::tuple<double, double, double> originRaw() override final;
  vx::Color rulerColor() override final;
  std::tuple<double, double, double, double> rulerColorRaw() override final;
  bool rulerShow() override final;
  bool rulerShowRaw() override final;
  double rulerSpacing() override final;
  double rulerSpacingRaw() override final;
  bool rulerSpacingAutomatic() override final;
  bool rulerSpacingAutomaticRaw() override final;
  vx::Node* segmentationFilter() override final;
  QDBusObjectPath segmentationFilterRaw() override final;
  qint64 show2DFilterMask() override final;
  qint64 show2DFilterMaskRaw() override final;
  bool showSliceCenter() override final;
  bool showSliceCenterRaw() override final;
  bool showViewCenter() override final;
  bool showViewCenterRaw() override final;
  QList<vx::Node*> surface() override final;
  QList<QDBusObjectPath> surfaceRaw() override final;
  QList<vx::ColorizerEntry> valueColorMapping() override final;
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  valueColorMappingRaw() override final;
  vx::Node* volume() override final;
  QDBusObjectPath volumeRaw() override final;
  vx::Color volumeGridColor() override final;
  std::tuple<double, double, double, double> volumeGridColorRaw()
      override final;
  bool volumeGridShow() override final;
  bool volumeGridShowRaw() override final;
};
class SliceProperties : public QObject, public SlicePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  SliceProperties(vx::Node* parent);
  ~SliceProperties();

  QPointF centerPoint() override final;
  std::tuple<double, double> centerPointRaw() override final;
  static QSharedPointer<NodeProperty> centerPointProperty();
  static NodePropertyTyped<vx::types::Point2D> centerPointPropertyTyped();
  void setCenterPoint(QPointF value);
 Q_SIGNALS:
  void centerPointChanged(QPointF value);

 public:
  // Q_PROPERTY(QPointF CenterPoint READ centerPoint WRITE setCenterPoint NOTIFY
  // centerPointChanged)

  double verticalSize() override final;
  double verticalSizeRaw() override final;
  static QSharedPointer<NodeProperty> verticalSizeProperty();
  static NodePropertyTyped<vx::types::Float> verticalSizePropertyTyped();
  void setVerticalSize(double value);
 Q_SIGNALS:
  void verticalSizeChanged(double value);

 public:
  // Q_PROPERTY(double VerticalSize READ verticalSize WRITE setVerticalSize
  // NOTIFY verticalSizeChanged)

  QString filter2DConfiguration() override final;
  QString filter2DConfigurationRaw() override final;
  static QSharedPointer<NodeProperty> filter2DConfigurationProperty();
  static NodePropertyTyped<vx::types::String>
  filter2DConfigurationPropertyTyped();
  void setFilter2DConfiguration(QString value);
 Q_SIGNALS:
  void filter2DConfigurationChanged(QString value);

 public:
  // Q_PROPERTY(QString Filter2DConfiguration READ filter2DConfiguration WRITE
  // setFilter2DConfiguration NOTIFY filter2DConfigurationChanged)

  vx::Node* geometricPrimitive() override final;
  QDBusObjectPath geometricPrimitiveRaw() override final;
  static QSharedPointer<NodeProperty> geometricPrimitiveProperty();
  static NodePropertyTyped<vx::types::NodeReference>
  geometricPrimitivePropertyTyped();
  void setGeometricPrimitive(vx::Node* value);
 Q_SIGNALS:
  void geometricPrimitiveChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* GeometricPrimitive READ geometricPrimitive WRITE
  // setGeometricPrimitive NOTIFY geometricPrimitiveChanged)

  vx::Color geometricPrimitiveColorBehindSlice() override final;
  std::tuple<double, double, double, double>
  geometricPrimitiveColorBehindSliceRaw() override final;
  static QSharedPointer<NodeProperty>
  geometricPrimitiveColorBehindSliceProperty();
  static NodePropertyTyped<vx::types::Color>
  geometricPrimitiveColorBehindSlicePropertyTyped();
  void setGeometricPrimitiveColorBehindSlice(vx::Color value);
 Q_SIGNALS:
  void geometricPrimitiveColorBehindSliceChanged(vx::Color value);

 public:
  // Q_PROPERTY(vx::Color GeometricPrimitiveColorBehindSlice READ
  // geometricPrimitiveColorBehindSlice WRITE
  // setGeometricPrimitiveColorBehindSlice NOTIFY
  // geometricPrimitiveColorBehindSliceChanged)

  vx::Color geometricPrimitiveColorInFrontOfSlice() override final;
  std::tuple<double, double, double, double>
  geometricPrimitiveColorInFrontOfSliceRaw() override final;
  static QSharedPointer<NodeProperty>
  geometricPrimitiveColorInFrontOfSliceProperty();
  static NodePropertyTyped<vx::types::Color>
  geometricPrimitiveColorInFrontOfSlicePropertyTyped();
  void setGeometricPrimitiveColorInFrontOfSlice(vx::Color value);
 Q_SIGNALS:
  void geometricPrimitiveColorInFrontOfSliceChanged(vx::Color value);

 public:
  // Q_PROPERTY(vx::Color GeometricPrimitiveColorInFrontOfSlice READ
  // geometricPrimitiveColorInFrontOfSlice WRITE
  // setGeometricPrimitiveColorInFrontOfSlice NOTIFY
  // geometricPrimitiveColorInFrontOfSliceChanged)

  vx::Color geometricPrimitiveColorOnSlice() override final;
  std::tuple<double, double, double, double> geometricPrimitiveColorOnSliceRaw()
      override final;
  static QSharedPointer<NodeProperty> geometricPrimitiveColorOnSliceProperty();
  static NodePropertyTyped<vx::types::Color>
  geometricPrimitiveColorOnSlicePropertyTyped();
  void setGeometricPrimitiveColorOnSlice(vx::Color value);
 Q_SIGNALS:
  void geometricPrimitiveColorOnSliceChanged(vx::Color value);

 public:
  // Q_PROPERTY(vx::Color GeometricPrimitiveColorOnSlice READ
  // geometricPrimitiveColorOnSlice WRITE setGeometricPrimitiveColorOnSlice
  // NOTIFY geometricPrimitiveColorOnSliceChanged)

  double geometricPrimitiveVisibilityDistance() override final;
  double geometricPrimitiveVisibilityDistanceRaw() override final;
  static QSharedPointer<NodeProperty>
  geometricPrimitiveVisibilityDistanceProperty();
  static NodePropertyTyped<vx::types::Float>
  geometricPrimitiveVisibilityDistancePropertyTyped();
  void setGeometricPrimitiveVisibilityDistance(double value);
 Q_SIGNALS:
  void geometricPrimitiveVisibilityDistanceChanged(double value);

 public:
  // Q_PROPERTY(double GeometricPrimitiveVisibilityDistance READ
  // geometricPrimitiveVisibilityDistance WRITE
  // setGeometricPrimitiveVisibilityDistance NOTIFY
  // geometricPrimitiveVisibilityDistanceChanged)

  vx::Color gridColor() override final;
  std::tuple<double, double, double, double> gridColorRaw() override final;
  static QSharedPointer<NodeProperty> gridColorProperty();
  static NodePropertyTyped<vx::types::Color> gridColorPropertyTyped();
  void setGridColor(vx::Color value);
 Q_SIGNALS:
  void gridColorChanged(vx::Color value);

 public:
  // Q_PROPERTY(vx::Color GridColor READ gridColor WRITE setGridColor NOTIFY
  // gridColorChanged)

  bool gridShow() override final;
  bool gridShowRaw() override final;
  static QSharedPointer<NodeProperty> gridShowProperty();
  static NodePropertyTyped<vx::types::Boolean> gridShowPropertyTyped();
  void setGridShow(bool value);
 Q_SIGNALS:
  void gridShowChanged(bool value);

 public:
  // Q_PROPERTY(bool GridShow READ gridShow WRITE setGridShow NOTIFY
  // gridShowChanged)

  double gridSpacing() override final;
  double gridSpacingRaw() override final;
  static QSharedPointer<NodeProperty> gridSpacingProperty();
  static NodePropertyTyped<vx::types::Float> gridSpacingPropertyTyped();
  void setGridSpacing(double value);
 Q_SIGNALS:
  void gridSpacingChanged(double value);

 public:
  // Q_PROPERTY(double GridSpacing READ gridSpacing WRITE setGridSpacing NOTIFY
  // gridSpacingChanged)

  bool gridSpacingAutomatic() override final;
  bool gridSpacingAutomaticRaw() override final;
  static QSharedPointer<NodeProperty> gridSpacingAutomaticProperty();
  static NodePropertyTyped<vx::types::Boolean>
  gridSpacingAutomaticPropertyTyped();
  void setGridSpacingAutomatic(bool value);
 Q_SIGNALS:
  void gridSpacingAutomaticChanged(bool value);

 public:
  // Q_PROPERTY(bool GridSpacingAutomatic READ gridSpacingAutomatic WRITE
  // setGridSpacingAutomatic NOTIFY gridSpacingAutomaticChanged)

  vx::Node* infoTable() override final;
  QDBusObjectPath infoTableRaw() override final;
  static QSharedPointer<NodeProperty> infoTableProperty();
  static NodePropertyTyped<vx::types::NodeReference> infoTablePropertyTyped();
  void setInfoTable(vx::Node* value);
 Q_SIGNALS:
  void infoTableChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* InfoTable READ infoTable WRITE setInfoTable NOTIFY
  // infoTableChanged)

  QString interpolation() override final;
  QString interpolationRaw() override final;
  static QSharedPointer<NodeProperty> interpolationProperty();
  static NodePropertyTyped<vx::types::Enumeration> interpolationPropertyTyped();
  void setInterpolation(QString value);
 Q_SIGNALS:
  void interpolationChanged(QString value);

 public:
  // Q_PROPERTY(QString Interpolation READ interpolation WRITE setInterpolation
  // NOTIFY interpolationChanged)

  vx::Node* labelContainer() override final;
  QDBusObjectPath labelContainerRaw() override final;
  static QSharedPointer<NodeProperty> labelContainerProperty();
  static NodePropertyTyped<vx::types::NodeReference>
  labelContainerPropertyTyped();
  void setLabelContainer(vx::Node* value);
 Q_SIGNALS:
  void labelContainerChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* LabelContainer READ labelContainer WRITE
  // setLabelContainer NOTIFY labelContainerChanged)

  vx::Node* plane() override final;
  QDBusObjectPath planeRaw() override final;
  static QSharedPointer<NodeProperty> planeProperty();
  static NodePropertyTyped<vx::types::NodeReference> planePropertyTyped();
  void setPlane(vx::Node* value);
 Q_SIGNALS:
  void planeChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Plane READ plane WRITE setPlane NOTIFY planeChanged)

  QQuaternion orientation() override final;
  std::tuple<double, double, double, double> orientationRaw() override final;
  static QSharedPointer<NodeProperty> orientationProperty();
  static NodePropertyTyped<vx::types::Orientation3D> orientationPropertyTyped();
  void setOrientation(QQuaternion value);
 Q_SIGNALS:
  void orientationChanged(QQuaternion value);

 public:
  // Q_PROPERTY(QQuaternion Orientation READ orientation WRITE setOrientation
  // NOTIFY orientationChanged)

  QVector3D origin() override final;
  std::tuple<double, double, double> originRaw() override final;
  static QSharedPointer<NodeProperty> originProperty();
  static NodePropertyTyped<vx::types::Position3D> originPropertyTyped();
  void setOrigin(QVector3D value);
 Q_SIGNALS:
  void originChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D Origin READ origin WRITE setOrigin NOTIFY
  // originChanged)

  vx::Color rulerColor() override final;
  std::tuple<double, double, double, double> rulerColorRaw() override final;
  static QSharedPointer<NodeProperty> rulerColorProperty();
  static NodePropertyTyped<vx::types::Color> rulerColorPropertyTyped();
  void setRulerColor(vx::Color value);
 Q_SIGNALS:
  void rulerColorChanged(vx::Color value);

 public:
  // Q_PROPERTY(vx::Color RulerColor READ rulerColor WRITE setRulerColor NOTIFY
  // rulerColorChanged)

  bool rulerShow() override final;
  bool rulerShowRaw() override final;
  static QSharedPointer<NodeProperty> rulerShowProperty();
  static NodePropertyTyped<vx::types::Boolean> rulerShowPropertyTyped();
  void setRulerShow(bool value);
 Q_SIGNALS:
  void rulerShowChanged(bool value);

 public:
  // Q_PROPERTY(bool RulerShow READ rulerShow WRITE setRulerShow NOTIFY
  // rulerShowChanged)

  double rulerSpacing() override final;
  double rulerSpacingRaw() override final;
  static QSharedPointer<NodeProperty> rulerSpacingProperty();
  static NodePropertyTyped<vx::types::Float> rulerSpacingPropertyTyped();
  void setRulerSpacing(double value);
 Q_SIGNALS:
  void rulerSpacingChanged(double value);

 public:
  // Q_PROPERTY(double RulerSpacing READ rulerSpacing WRITE setRulerSpacing
  // NOTIFY rulerSpacingChanged)

  bool rulerSpacingAutomatic() override final;
  bool rulerSpacingAutomaticRaw() override final;
  static QSharedPointer<NodeProperty> rulerSpacingAutomaticProperty();
  static NodePropertyTyped<vx::types::Boolean>
  rulerSpacingAutomaticPropertyTyped();
  void setRulerSpacingAutomatic(bool value);
 Q_SIGNALS:
  void rulerSpacingAutomaticChanged(bool value);

 public:
  // Q_PROPERTY(bool RulerSpacingAutomatic READ rulerSpacingAutomatic WRITE
  // setRulerSpacingAutomatic NOTIFY rulerSpacingAutomaticChanged)

  vx::Node* segmentationFilter() override final;
  QDBusObjectPath segmentationFilterRaw() override final;
  static QSharedPointer<NodeProperty> segmentationFilterProperty();
  static NodePropertyTyped<vx::types::NodeReference>
  segmentationFilterPropertyTyped();
  void setSegmentationFilter(vx::Node* value);
 Q_SIGNALS:
  void segmentationFilterChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* SegmentationFilter READ segmentationFilter WRITE
  // setSegmentationFilter NOTIFY segmentationFilterChanged)

  qint64 show2DFilterMask() override final;
  qint64 show2DFilterMaskRaw() override final;
  static QSharedPointer<NodeProperty> show2DFilterMaskProperty();
  static NodePropertyTyped<vx::types::Int> show2DFilterMaskPropertyTyped();
  void setShow2DFilterMask(qint64 value);
 Q_SIGNALS:
  void show2DFilterMaskChanged(qint64 value);

 public:
  // Q_PROPERTY(qint64 Show2DFilterMask READ show2DFilterMask WRITE
  // setShow2DFilterMask NOTIFY show2DFilterMaskChanged)

  bool showSliceCenter() override final;
  bool showSliceCenterRaw() override final;
  static QSharedPointer<NodeProperty> showSliceCenterProperty();
  static NodePropertyTyped<vx::types::Boolean> showSliceCenterPropertyTyped();
  void setShowSliceCenter(bool value);
 Q_SIGNALS:
  void showSliceCenterChanged(bool value);

 public:
  // Q_PROPERTY(bool ShowSliceCenter READ showSliceCenter WRITE
  // setShowSliceCenter NOTIFY showSliceCenterChanged)

  bool showViewCenter() override final;
  bool showViewCenterRaw() override final;
  static QSharedPointer<NodeProperty> showViewCenterProperty();
  static NodePropertyTyped<vx::types::Boolean> showViewCenterPropertyTyped();
  void setShowViewCenter(bool value);
 Q_SIGNALS:
  void showViewCenterChanged(bool value);

 public:
  // Q_PROPERTY(bool ShowViewCenter READ showViewCenter WRITE setShowViewCenter
  // NOTIFY showViewCenterChanged)

  QList<vx::Node*> surface() override final;
  QList<QDBusObjectPath> surfaceRaw() override final;
  static QSharedPointer<NodeProperty> surfaceProperty();
  static NodePropertyTyped<vx::types::NodeReferenceList> surfacePropertyTyped();
  void setSurface(QList<vx::Node*> value);
 Q_SIGNALS:
  void surfaceChanged(QList<vx::Node*> value);

 public:
  // Q_PROPERTY(QList<vx::Node*> Surface READ surface WRITE setSurface NOTIFY
  // surfaceChanged)

  QList<vx::ColorizerEntry> valueColorMapping() override final;
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  valueColorMappingRaw() override final;
  static QSharedPointer<NodeProperty> valueColorMappingProperty();
  static NodePropertyTyped<vx::types::ValueColorMapping>
  valueColorMappingPropertyTyped();
  void setValueColorMapping(QList<vx::ColorizerEntry> value);
 Q_SIGNALS:
  void valueColorMappingChanged(QList<vx::ColorizerEntry> value);

 public:
  // Q_PROPERTY(QList<vx::ColorizerEntry> ValueColorMapping READ
  // valueColorMapping WRITE setValueColorMapping NOTIFY
  // valueColorMappingChanged)

  vx::Node* volume() override final;
  QDBusObjectPath volumeRaw() override final;
  static QSharedPointer<NodeProperty> volumeProperty();
  static NodePropertyTyped<vx::types::NodeReference> volumePropertyTyped();
  void setVolume(vx::Node* value);
 Q_SIGNALS:
  void volumeChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Volume READ volume WRITE setVolume NOTIFY
  // volumeChanged)

  vx::Color volumeGridColor() override final;
  std::tuple<double, double, double, double> volumeGridColorRaw()
      override final;
  static QSharedPointer<NodeProperty> volumeGridColorProperty();
  static NodePropertyTyped<vx::types::Color> volumeGridColorPropertyTyped();
  void setVolumeGridColor(vx::Color value);
 Q_SIGNALS:
  void volumeGridColorChanged(vx::Color value);

 public:
  // Q_PROPERTY(vx::Color VolumeGridColor READ volumeGridColor WRITE
  // setVolumeGridColor NOTIFY volumeGridColorChanged)

  bool volumeGridShow() override final;
  bool volumeGridShowRaw() override final;
  static QSharedPointer<NodeProperty> volumeGridShowProperty();
  static NodePropertyTyped<vx::types::Boolean> volumeGridShowPropertyTyped();
  void setVolumeGridShow(bool value);
 Q_SIGNALS:
  void volumeGridShowChanged(bool value);

 public:
  // Q_PROPERTY(bool VolumeGridShow READ volumeGridShow WRITE setVolumeGridShow
  // NOTIFY volumeGridShowChanged)
};

}  // namespace visualizer_prop
}  // namespace vx
