// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#include "Prototypes.hpp"

#include <Voxie/Node/NodePrototype.hpp>
#include <Voxie/Node/PropertyValueConvertDBus.hpp>
#include <Voxie/Node/PropertyValueConvertRaw.hpp>
namespace vx {
inline namespace visualizer_prop {
SlicePropertiesEntry::~SlicePropertiesEntry() {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::CenterPoint,
                                           QPointF value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.View2D.CenterPoint",
          QVariant::fromValue<std::tuple<double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double>,
                                          QPointF>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::VerticalSize,
                                           double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.View2D.VerticalSize",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::Filter2DConfiguration,
                                           QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Filter2DConfiguration",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::GeometricPrimitive,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitive",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(
    vx::PropType::GeometricPrimitiveColorBehindSlice, vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorBehindSlice",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(
    vx::PropType::GeometricPrimitiveColorInFrontOfSlice, vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorInFrontOfSlice",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(
    vx::PropType::GeometricPrimitiveColorOnSlice, vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorOnSlice",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(
    vx::PropType::GeometricPrimitiveVisibilityDistance, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveVisibilityDistance",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::GridColor,
                                           vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::GridShow, bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::GridSpacing,
                                           double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::GridSpacingAutomatic,
                                           bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacingAutomatic",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::InfoTable,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::Interpolation,
                                           QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::LabelContainer,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::Plane,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::Orientation,
                                           QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Orientation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::Origin,
                                           QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::RulerColor,
                                           vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::RulerShow, bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::RulerSpacing,
                                           double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::RulerSpacingAutomatic,
                                           bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacingAutomatic",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::SegmentationFilter,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.SegmentationFilter",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::Show2DFilterMask,
                                           qint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask",
          QVariant::fromValue<qint64>(
              vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::ShowSliceCenter,
                                           bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::Surface,
                                           QList<vx::Node*> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Surface",
          QVariant::fromValue<QList<QDBusObjectPath>>(
              vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                          QList<vx::Node*>>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::ValueColorMapping,
                                           QList<vx::ColorizerEntry> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.ValueColorMapping",
          QVariant::fromValue<QList<std::tuple<
              double, std::tuple<double, double, double, double>, qint32>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint32>>,
                  QList<vx::ColorizerEntry>>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::Volume,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Volume",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::VolumeGridColor,
                                           vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
SlicePropertiesEntry::SlicePropertiesEntry(vx::PropType::VolumeGridShow,
                                           bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SlicePropertiesBase::~SlicePropertiesBase() {}
SlicePropertiesCopy::SlicePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QPointF SlicePropertiesCopy::centerPoint() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double>, QPointF>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.View2D.CenterPoint"]));
}
std::tuple<double, double> SlicePropertiesCopy::centerPointRaw() {
  return vx::Node::parseVariant<std::tuple<double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.View2D.CenterPoint"]);
}
double SlicePropertiesCopy::verticalSize() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.View2D.VerticalSize"]));
}
double SlicePropertiesCopy::verticalSizeRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.View2D.VerticalSize"]);
}
QString SlicePropertiesCopy::filter2DConfiguration() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "Filter2DConfiguration"]));
}
QString SlicePropertiesCopy::filter2DConfigurationRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.Filter2DConfiguration"]);
}
vx::Node* SlicePropertiesCopy::geometricPrimitive() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitive"]));
}
QDBusObjectPath SlicePropertiesCopy::geometricPrimitiveRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitive"]);
}
vx::Color SlicePropertiesCopy::geometricPrimitiveColorBehindSlice() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                             "GeometricPrimitiveColorBehindSlice"]));
}
std::tuple<double, double, double, double>
SlicePropertiesCopy::geometricPrimitiveColorBehindSliceRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                     "GeometricPrimitiveColorBehindSlice"]);
}
vx::Color SlicePropertiesCopy::geometricPrimitiveColorInFrontOfSlice() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                             "GeometricPrimitiveColorInFrontOfSlice"]));
}
std::tuple<double, double, double, double>
SlicePropertiesCopy::geometricPrimitiveColorInFrontOfSliceRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                     "GeometricPrimitiveColorInFrontOfSlice"]);
}
vx::Color SlicePropertiesCopy::geometricPrimitiveColorOnSlice() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                             "GeometricPrimitiveColorOnSlice"]));
}
std::tuple<double, double, double, double>
SlicePropertiesCopy::geometricPrimitiveColorOnSliceRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                     "GeometricPrimitiveColorOnSlice"]);
}
double SlicePropertiesCopy::geometricPrimitiveVisibilityDistance() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "GeometricPrimitiveVisibilityDistance"]));
}
double SlicePropertiesCopy::geometricPrimitiveVisibilityDistanceRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                     "GeometricPrimitiveVisibilityDistance"]);
}
vx::Color SlicePropertiesCopy::gridColor() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      vx::Color>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                            double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor"]));
}
std::tuple<double, double, double, double> SlicePropertiesCopy::gridColorRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor"]);
}
bool SlicePropertiesCopy::gridShow() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow"]));
}
bool SlicePropertiesCopy::gridShowRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow"]);
}
double SlicePropertiesCopy::gridSpacing() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing"]));
}
double SlicePropertiesCopy::gridSpacingRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing"]);
}
bool SlicePropertiesCopy::gridSpacingAutomatic() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "GridSpacingAutomatic"]));
}
bool SlicePropertiesCopy::gridSpacingAutomaticRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacingAutomatic"]);
}
vx::Node* SlicePropertiesCopy::infoTable() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable"]));
}
QDBusObjectPath SlicePropertiesCopy::infoTableRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable"]);
}
QString SlicePropertiesCopy::interpolation() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation"]));
}
QString SlicePropertiesCopy::interpolationRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation"]);
}
vx::Node* SlicePropertiesCopy::labelContainer() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer"]));
}
QDBusObjectPath SlicePropertiesCopy::labelContainerRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer"]);
}
vx::Node* SlicePropertiesCopy::plane() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Plane"]));
}
QDBusObjectPath SlicePropertiesCopy::planeRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Plane"]);
}
QQuaternion SlicePropertiesCopy::orientation() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      QQuaternion>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                              double, double>>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Orientation"]));
}
std::tuple<double, double, double, double>
SlicePropertiesCopy::orientationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Orientation"]);
}
QVector3D SlicePropertiesCopy::origin() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double>,
      QVector3D>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                            double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin"]));
}
std::tuple<double, double, double> SlicePropertiesCopy::originRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin"]);
}
vx::Color SlicePropertiesCopy::rulerColor() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      vx::Color>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                            double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor"]));
}
std::tuple<double, double, double, double>
SlicePropertiesCopy::rulerColorRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor"]);
}
bool SlicePropertiesCopy::rulerShow() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow"]));
}
bool SlicePropertiesCopy::rulerShowRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow"]);
}
double SlicePropertiesCopy::rulerSpacing() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing"]));
}
double SlicePropertiesCopy::rulerSpacingRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing"]);
}
bool SlicePropertiesCopy::rulerSpacingAutomatic() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "RulerSpacingAutomatic"]));
}
bool SlicePropertiesCopy::rulerSpacingAutomaticRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacingAutomatic"]);
}
vx::Node* SlicePropertiesCopy::segmentationFilter() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.SegmentationFilter"]));
}
QDBusObjectPath SlicePropertiesCopy::segmentationFilterRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.SegmentationFilter"]);
}
qint64 SlicePropertiesCopy::show2DFilterMask() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      vx::Node::parseVariant<qint64>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask"]));
}
qint64 SlicePropertiesCopy::show2DFilterMaskRaw() {
  return vx::Node::parseVariant<qint64>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask"]);
}
bool SlicePropertiesCopy::showSliceCenter() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter"]));
}
bool SlicePropertiesCopy::showSliceCenterRaw() {
  return vx::Node::parseVariant<bool>((
      *_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter"]);
}
QList<vx::Node*> SlicePropertiesCopy::surface() {
  return vx::PropertyValueConvertRaw<QList<QDBusObjectPath>, QList<vx::Node*>>::
      fromRaw(vx::Node::parseVariant<QList<QDBusObjectPath>>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Surface"]));
}
QList<QDBusObjectPath> SlicePropertiesCopy::surfaceRaw() {
  return vx::Node::parseVariant<QList<QDBusObjectPath>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Surface"]);
}
QList<vx::ColorizerEntry> SlicePropertiesCopy::valueColorMapping() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.ValueColorMapping"]));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
SlicePropertiesCopy::valueColorMappingRaw() {
  return vx::Node::parseVariant<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.Slice.ValueColorMapping"]);
}
vx::Node* SlicePropertiesCopy::volume() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Volume"]));
}
QDBusObjectPath SlicePropertiesCopy::volumeRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.Volume"]);
}
vx::Color SlicePropertiesCopy::volumeGridColor() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)
                  ["de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor"]));
}
std::tuple<double, double, double, double>
SlicePropertiesCopy::volumeGridColorRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>((
      *_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor"]);
}
bool SlicePropertiesCopy::volumeGridShow() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow"]));
}
bool SlicePropertiesCopy::volumeGridShowRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow"]);
}
static const char _prototype_Slice_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 34,  93,  44,  32,  34,  68,  101, 115, 99,  114, 105, 112,
    116, 105, 111, 110, 34,  58,  32,  34,  84,  79,  68,  79,  34,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  83,  108, 105, 99,  101, 32,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,
    47,  105, 99,  111, 110, 115, 47,  108, 97,  121, 101, 114, 115, 46,  112,
    110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  83,  108, 105, 99,  101, 34,  44,  32,  34,  78,  111, 100,
    101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 34,  44,  32,  34,  80,  114, 111, 112, 101,
    114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 101, 119, 50,  68,  46,  67,  101, 110, 116, 101,
    114, 80,  111, 105, 110, 116, 34,  58,  32,  123, 34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  67,  101, 110, 116,
    101, 114, 32,  112, 111, 105, 110, 116, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  80,  111, 105, 110,
    116, 50,  68,  34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  86,  105, 101, 119, 50,  68,  46,  86,  101, 114, 116, 105, 99,  97,
    108, 83,  105, 122, 101, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  86,  101, 114, 116, 105,
    99,  97,  108, 32,  115, 105, 122, 101, 32,  40,  109, 41,  34,  44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,
    70,  108, 111, 97,  116, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,
    108, 105, 99,  101, 46,  70,  105, 108, 116, 101, 114, 50,  68,  67,  111,
    110, 102, 105, 103, 117, 114, 97,  116, 105, 111, 110, 34,  58,  32,  123,
    34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,
    97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  70,  105, 108, 116, 101, 114, 50,  68,  67,  111, 110, 102,
    105, 103, 117, 114, 97,  116, 105, 111, 110, 34,  93,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  50,
    68,  32,  70,  105, 108, 116, 101, 114, 32,  67,  111, 110, 102, 105, 103,
    117, 114, 97,  116, 105, 111, 110, 34,  44,  32,  34,  73,  115, 67,  117,
    115, 116, 111, 109, 83,  116, 111, 114, 97,  103, 101, 34,  58,  32,  116,
    114, 117, 101, 44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 85,
    73,  34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  83,  116, 114, 105, 110,
    103, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101,
    46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105, 109, 105,
    116, 105, 118, 101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101,
    100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115,
    34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,
    116, 97,  46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105,
    109, 105, 116, 105, 118, 101, 34,  93,  44,  32,  34,  67,  97,  108, 108,
    83,  101, 116, 79,  114, 100, 101, 114, 34,  58,  32,  45,  49,  48,  44,
    32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114,
    105, 109, 105, 116, 105, 118, 101, 34,  93,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  71,  101, 111,
    109, 101, 116, 114, 105, 99,  32,  112, 114, 105, 109, 105, 116, 105, 118,
    101, 115, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101,
    110, 99,  101, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105,
    99,  101, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105,
    109, 105, 116, 105, 118, 101, 67,  111, 108, 111, 114, 66,  101, 104, 105,
    110, 100, 83,  108, 105, 99,  101, 34,  58,  32,  123, 34,  67,  111, 109,
    112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115,
    34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108,
    105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  71,
    101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105,
    118, 101, 67,  111, 108, 111, 114, 66,  101, 104, 105, 110, 100, 83,  108,
    105, 99,  101, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116,
    86,  97,  108, 117, 101, 34,  58,  32,  91,  48,  46,  48,  44,  32,  48,
    46,  48,  44,  32,  49,  46,  48,  44,  32,  49,  46,  48,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  71,  101, 111, 109, 101, 116, 114, 105, 99,  32,  112, 114, 105, 109,
    105, 116, 105, 118, 101, 115, 58,  32,  67,  111, 108, 111, 114, 32,  98,
    101, 104, 105, 110, 100, 32,  115, 108, 105, 99,  101, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  67,
    111, 108, 111, 114, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108,
    105, 99,  101, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114,
    105, 109, 105, 116, 105, 118, 101, 67,  111, 108, 111, 114, 73,  110, 70,
    114, 111, 110, 116, 79,  102, 83,  108, 105, 99,  101, 34,  58,  32,  123,
    34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,
    97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105,
    109, 105, 116, 105, 118, 101, 67,  111, 108, 111, 114, 73,  110, 70,  114,
    111, 110, 116, 79,  102, 83,  108, 105, 99,  101, 34,  93,  44,  32,  34,
    68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,
    91,  49,  46,  48,  44,  32,  48,  46,  48,  44,  32,  48,  46,  48,  44,
    32,  49,  46,  48,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  71,  101, 111, 109, 101, 116, 114,
    105, 99,  32,  112, 114, 105, 109, 105, 116, 105, 118, 101, 115, 58,  32,
    67,  111, 108, 111, 114, 32,  105, 110, 32,  102, 114, 111, 110, 116, 32,
    111, 102, 32,  115, 108, 105, 99,  101, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  67,  111, 108, 111,
    114, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101,
    46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105, 109, 105,
    116, 105, 118, 101, 67,  111, 108, 111, 114, 79,  110, 83,  108, 105, 99,
    101, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105,
    108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  71,  101, 111, 109, 101, 116, 114,
    105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101, 67,  111, 108, 111,
    114, 79,  110, 83,  108, 105, 99,  101, 34,  93,  44,  32,  34,  68,  101,
    102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  91,  48,
    46,  48,  44,  32,  49,  46,  48,  44,  32,  48,  46,  48,  44,  32,  49,
    46,  48,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  71,  101, 111, 109, 101, 116, 114, 105, 99,
    32,  112, 114, 105, 109, 105, 116, 105, 118, 101, 115, 58,  32,  67,  111,
    108, 111, 114, 32,  111, 110, 32,  115, 108, 105, 99,  101, 34,  44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,
    67,  111, 108, 111, 114, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,
    108, 105, 99,  101, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,
    114, 105, 109, 105, 116, 105, 118, 101, 86,  105, 115, 105, 98,  105, 108,
    105, 116, 121, 68,  105, 115, 116, 97,  110, 99,  101, 34,  58,  32,  123,
    34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,
    97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105,
    109, 105, 116, 105, 118, 101, 86,  105, 115, 105, 98,  105, 108, 105, 116,
    121, 68,  105, 115, 116, 97,  110, 99,  101, 34,  93,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  71,
    101, 111, 109, 101, 116, 114, 105, 99,  32,  112, 114, 105, 109, 105, 116,
    105, 118, 101, 115, 58,  32,  86,  105, 115, 105, 98,  105, 108, 105, 116,
    121, 32,  100, 105, 115, 116, 97,  110, 99,  101, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108,
    111, 97,  116, 34,  44,  32,  34,  85,  110, 105, 116, 34,  58,  32,  91,
    91,  34,  109, 34,  44,  32,  49,  93,  93,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  83,  108, 105, 99,  101, 46,  71,  114, 105, 100, 67,  111, 108,
    111, 114, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  71,  114, 105, 100, 67,  111,
    108, 111, 114, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116,
    86,  97,  108, 117, 101, 34,  58,  32,  91,  49,  46,  48,  44,  32,  49,
    46,  48,  44,  32,  48,  46,  48,  44,  32,  48,  46,  53,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  71,  114, 105, 100, 32,  99,  111, 108, 111, 114, 34,  44,  32,  34,
    69,  110, 97,  98,  108, 101, 100, 67,  111, 110, 100, 105, 116, 105, 111,
    110, 34,  58,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  71,  114,
    105, 100, 83,  104, 111, 119, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111, 110, 46,  72,
    97,  115, 86,  97,  108, 117, 101, 34,  44,  32,  34,  86,  97,  108, 117,
    101, 115, 34,  58,  32,  91,  116, 114, 117, 101, 93,  125, 44,  32,  34,
    83,  104, 111, 119, 65,  108, 112, 104, 97,  34,  58,  32,  116, 114, 117,
    101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  67,  111, 108, 111, 114, 34,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  83,  108, 105, 99,  101, 46,  71,  114, 105, 100, 83,  104, 111,
    119, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105,
    108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  71,  114, 105, 100, 83,  104, 111,
    119, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  83,  104, 111, 119, 32,  103, 114, 105, 100,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  66,  111, 111, 108, 101, 97,  110, 34,  125, 44,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  71,  114, 105, 100, 83,
    112, 97,  99,  105, 110, 103, 34,  58,  32,  123, 34,  67,  111, 109, 112,
    97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105,
    99,  101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  71,  114,
    105, 100, 83,  112, 97,  99,  105, 110, 103, 34,  93,  44,  32,  34,  68,
    101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  48,
    46,  48,  48,  49,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  71,  114, 105, 100, 32,  115, 112, 97,
    99,  105, 110, 103, 34,  44,  32,  34,  69,  110, 97,  98,  108, 101, 100,
    67,  111, 110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123, 34,  67,
    111, 110, 100, 105, 116, 105, 111, 110, 115, 34,  58,  32,  91,  123, 34,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  83,  108, 105, 99,  101, 46,  71,  114, 105, 100, 83,  104, 111, 119,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 67,  111,
    110, 100, 105, 116, 105, 111, 110, 46,  72,  97,  115, 86,  97,  108, 117,
    101, 34,  44,  32,  34,  86,  97,  108, 117, 101, 115, 34,  58,  32,  91,
    116, 114, 117, 101, 93,  125, 44,  32,  123, 34,  80,  114, 111, 112, 101,
    114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,
    101, 46,  71,  114, 105, 100, 83,  112, 97,  99,  105, 110, 103, 65,  117,
    116, 111, 109, 97,  116, 105, 99,  34,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111, 110, 46,
    72,  97,  115, 86,  97,  108, 117, 101, 34,  44,  32,  34,  86,  97,  108,
    117, 101, 115, 34,  58,  32,  91,  102, 97,  108, 115, 101, 93,  125, 93,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 67,  111, 110,
    100, 105, 116, 105, 111, 110, 46,  65,  110, 100, 34,  125, 44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  70,
    108, 111, 97,  116, 34,  44,  32,  34,  85,  110, 105, 116, 34,  58,  32,
    91,  91,  34,  109, 34,  44,  32,  49,  93,  93,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  83,  108, 105, 99,  101, 46,  71,  114, 105, 100, 83,  112,
    97,  99,  105, 110, 103, 65,  117, 116, 111, 109, 97,  116, 105, 99,  34,
    58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105,
    116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  71,  114, 105, 100, 83,  112, 97,  99,  105,
    110, 103, 65,  117, 116, 111, 109, 97,  116, 105, 99,  34,  93,  44,  32,
    34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,
    32,  116, 114, 117, 101, 44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  67,  104, 111, 111, 115, 101, 32,
    103, 114, 105, 100, 32,  115, 112, 97,  99,  105, 110, 103, 32,  97,  117,
    116, 111, 109, 97,  116, 105, 99,  97,  108, 108, 121, 34,  44,  32,  34,
    69,  110, 97,  98,  108, 101, 100, 67,  111, 110, 100, 105, 116, 105, 111,
    110, 34,  58,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  71,  114,
    105, 100, 83,  104, 111, 119, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111, 110, 46,  72,
    97,  115, 86,  97,  108, 117, 101, 34,  44,  32,  34,  86,  97,  108, 117,
    101, 115, 34,  58,  32,  91,  116, 114, 117, 101, 93,  125, 44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  66,
    111, 111, 108, 101, 97,  110, 34,  125, 44,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    83,  108, 105, 99,  101, 46,  73,  110, 102, 111, 84,  97,  98,  108, 101,
    34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100,
    101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  84,
    97,  98,  108, 101, 34,  93,  44,  32,  34,  67,  97,  108, 108, 83,  101,
    116, 79,  114, 100, 101, 114, 34,  58,  32,  45,  49,  48,  44,  32,  34,
    67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,
    109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  73,  110, 102, 111, 84,  97,  98,  108, 101, 34,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  73,  110, 102, 111, 32,  116, 97,  98,  108, 101, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,
    111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125, 44,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  73,  110, 116,
    101, 114, 112, 111, 108, 97,  116, 105, 111, 110, 34,  58,  32,  123, 34,
    67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,
    109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  73,  110, 116, 101, 114, 112, 111, 108, 97,  116, 105, 111, 110,
    34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108,
    117, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  73,
    110, 116, 101, 114, 112, 111, 108, 97,  116, 105, 111, 110, 46,  76,  105,
    110, 101, 97,  114, 34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  73,  110, 116, 101, 114, 112, 111,
    108, 97,  116, 105, 111, 110, 34,  44,  32,  34,  69,  110, 117, 109, 69,
    110, 116, 114, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  73,  110, 116, 101, 114, 112, 111, 108, 97,  116, 105,
    111, 110, 46,  76,  105, 110, 101, 97,  114, 34,  58,  32,  123, 34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,
    105, 110, 101, 97,  114, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105,
    116, 105, 111, 110, 34,  58,  32,  50,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  73,  110, 116, 101, 114, 112, 111, 108, 97,  116,
    105, 111, 110, 46,  78,  101, 97,  114, 101, 115, 116, 78,  101, 105, 103,
    104, 98,  111, 114, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  78,  101, 97,  114, 101, 115,
    116, 32,  110, 101, 105, 103, 104, 98,  111, 114, 34,  44,  32,  34,  85,
    73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  49,  125, 125,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  69,  110, 117, 109, 101, 114, 97,  116, 105, 111, 110, 34,  125,
    44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  76,  97,
    98,  101, 108, 67,  111, 110, 116, 97,  105, 110, 101, 114, 34,  58,  32,
    123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 80,  114,
    111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  67,  111, 110, 116,
    97,  105, 110, 101, 114, 78,  111, 100, 101, 34,  93,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,
    97,  98,  101, 108, 67,  111, 110, 116, 97,  105, 110, 101, 114, 34,  44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101,
    46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 34,
    125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  80,
    108, 97,  110, 101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101,
    100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115,
    34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 46,  80,  108, 97,  110, 101, 34,  93,  44,
    32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  80,  108, 97,  110, 101, 34,  93,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  80,
    108, 97,  110, 101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101,
    114, 101, 110, 99,  101, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,
    108, 105, 99,  101, 46,  80,  108, 97,  110, 101, 46,  79,  114, 105, 101,
    110, 116, 97,  116, 105, 111, 110, 34,  58,  32,  123, 34,  67,  97,  108,
    108, 83,  101, 116, 79,  114, 100, 101, 114, 34,  58,  32,  49,  48,  44,
    32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  80,  108, 97,  110, 101, 46,  79,  114, 105, 101, 110,
    116, 97,  116, 105, 111, 110, 34,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  114, 111, 116, 97,
    116, 105, 111, 110, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111,
    109, 83,  116, 111, 114, 97,  103, 101, 34,  58,  32,  116, 114, 117, 101,
    44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 85,  73,  34,  58,
    32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  79,  114, 105, 101, 110, 116, 97,  116,
    105, 111, 110, 51,  68,  34,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,
    108, 105, 99,  101, 46,  80,  108, 97,  110, 101, 46,  79,  114, 105, 103,
    105, 110, 34,  58,  32,  123, 34,  67,  97,  108, 108, 83,  101, 116, 79,
    114, 100, 101, 114, 34,  58,  32,  49,  48,  44,  32,  34,  67,  111, 109,
    112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115,
    34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108,
    105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  80,
    108, 97,  110, 101, 46,  79,  114, 105, 103, 105, 110, 34,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  112, 111, 115, 105, 116, 105, 111, 110, 34,  44,  32,  34,  73,  115,
    67,  117, 115, 116, 111, 109, 83,  116, 111, 114, 97,  103, 101, 34,  58,
    32,  116, 114, 117, 101, 44,  32,  34,  73,  115, 67,  117, 115, 116, 111,
    109, 85,  73,  34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  80,  111, 115,
    105, 116, 105, 111, 110, 51,  68,  34,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  83,  108, 105, 99,  101, 46,  82,  117, 108, 101, 114, 67,  111, 108,
    111, 114, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  82,  117, 108, 101, 114, 67,
    111, 108, 111, 114, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108,
    116, 86,  97,  108, 117, 101, 34,  58,  32,  91,  49,  46,  48,  44,  32,
    49,  46,  48,  44,  32,  48,  46,  48,  44,  32,  48,  46,  53,  93,  44,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  82,  117, 108, 101, 114, 32,  99,  111, 108, 111, 114, 34,  44,
    32,  34,  69,  110, 97,  98,  108, 101, 100, 67,  111, 110, 100, 105, 116,
    105, 111, 110, 34,  58,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116,
    121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,
    82,  117, 108, 101, 114, 83,  104, 111, 119, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111,
    110, 46,  72,  97,  115, 86,  97,  108, 117, 101, 34,  44,  32,  34,  86,
    97,  108, 117, 101, 115, 34,  58,  32,  91,  116, 114, 117, 101, 93,  125,
    44,  32,  34,  83,  104, 111, 119, 65,  108, 112, 104, 97,  34,  58,  32,
    116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116,
    121, 84,  121, 112, 101, 46,  67,  111, 108, 111, 114, 34,  125, 44,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108,
    105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  82,  117, 108, 101,
    114, 83,  104, 111, 119, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,
    116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,
    32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,
    101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  82,  117, 108,
    101, 114, 83,  104, 111, 119, 34,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  104, 111, 119,
    32,  114, 117, 108, 101, 114, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  66,  111, 111, 108, 101, 97,
    110, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101,
    46,  82,  117, 108, 101, 114, 83,  112, 97,  99,  105, 110, 103, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108,
    105, 122, 101, 114, 46,  82,  117, 108, 101, 114, 83,  112, 97,  99,  105,
    110, 103, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 86,
    97,  108, 117, 101, 34,  58,  32,  48,  46,  48,  48,  49,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    82,  117, 108, 101, 114, 32,  115, 112, 97,  99,  105, 110, 103, 34,  44,
    32,  34,  69,  110, 97,  98,  108, 101, 100, 67,  111, 110, 100, 105, 116,
    105, 111, 110, 34,  58,  32,  123, 34,  67,  111, 110, 100, 105, 116, 105,
    111, 110, 115, 34,  58,  32,  91,  123, 34,  80,  114, 111, 112, 101, 114,
    116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101,
    46,  82,  117, 108, 101, 114, 83,  104, 111, 119, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105,
    111, 110, 46,  72,  97,  115, 86,  97,  108, 117, 101, 34,  44,  32,  34,
    86,  97,  108, 117, 101, 115, 34,  58,  32,  91,  116, 114, 117, 101, 93,
    125, 44,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  82,  117, 108,
    101, 114, 83,  112, 97,  99,  105, 110, 103, 65,  117, 116, 111, 109, 97,
    116, 105, 99,  34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116,
    121, 67,  111, 110, 100, 105, 116, 105, 111, 110, 46,  72,  97,  115, 86,
    97,  108, 117, 101, 34,  44,  32,  34,  86,  97,  108, 117, 101, 115, 34,
    58,  32,  91,  102, 97,  108, 115, 101, 93,  125, 93,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105,
    111, 110, 46,  65,  110, 100, 34,  125, 44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108, 111, 97,  116,
    34,  44,  32,  34,  85,  110, 105, 116, 34,  58,  32,  91,  91,  34,  109,
    34,  44,  32,  49,  93,  93,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,
    108, 105, 99,  101, 46,  82,  117, 108, 101, 114, 83,  112, 97,  99,  105,
    110, 103, 65,  117, 116, 111, 109, 97,  116, 105, 99,  34,  58,  32,  123,
    34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,
    97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  82,  117, 108, 101, 114, 83,  112, 97,  99,  105, 110, 103,
    65,  117, 116, 111, 109, 97,  116, 105, 99,  34,  93,  44,  32,  34,  68,
    101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  116,
    114, 117, 101, 44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  67,  104, 111, 111, 115, 101, 32,  114, 117,
    108, 101, 114, 32,  115, 112, 97,  99,  105, 110, 103, 32,  97,  117, 116,
    111, 109, 97,  116, 105, 99,  97,  108, 108, 121, 34,  44,  32,  34,  69,
    110, 97,  98,  108, 101, 100, 67,  111, 110, 100, 105, 116, 105, 111, 110,
    34,  58,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  82,  117, 108,
    101, 114, 83,  104, 111, 119, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111, 110, 46,  72,
    97,  115, 86,  97,  108, 117, 101, 34,  44,  32,  34,  86,  97,  108, 117,
    101, 115, 34,  58,  32,  91,  116, 114, 117, 101, 93,  125, 44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  66,
    111, 111, 108, 101, 97,  110, 34,  125, 44,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    83,  108, 105, 99,  101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116,
    105, 111, 110, 70,  105, 108, 116, 101, 114, 34,  58,  32,  123, 34,  65,
    108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 75,  105, 110, 100, 115,
    34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111,
    100, 101, 75,  105, 110, 100, 46,  70,  105, 108, 116, 101, 114, 34,  93,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110,
    70,  105, 108, 116, 101, 114, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101,
    102, 101, 114, 101, 110, 99,  101, 34,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  83,  108, 105, 99,  101, 46,  83,  104, 111, 119, 50,  68,  70,  105,
    108, 116, 101, 114, 77,  97,  115, 107, 34,  58,  32,  123, 34,  67,  111,
    109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101,
    115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,
    108, 105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    83,  104, 111, 119, 50,  68,  70,  105, 108, 116, 101, 114, 77,  97,  115,
    107, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,
    108, 117, 101, 34,  58,  32,  48,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  104, 111, 119, 32,
    50,  68,  32,  102, 105, 108, 116, 101, 114, 32,  109, 97,  115, 107, 34,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  73,  110, 116, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,
    108, 105, 99,  101, 46,  83,  104, 111, 119, 83,  108, 105, 99,  101, 67,
    101, 110, 116, 101, 114, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,
    116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,
    32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,
    101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  104, 111,
    119, 83,  108, 105, 99,  101, 67,  101, 110, 116, 101, 114, 34,  93,  44,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  83,  104, 111, 119, 32,  115, 108, 105, 99,  101, 32,  99,  101,
    110, 116, 101, 114, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111,
    109, 83,  116, 111, 114, 97,  103, 101, 34,  58,  32,  116, 114, 117, 101,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  66,  111, 111, 108, 101, 97,  110, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  83,  108, 105, 99,  101, 46,  83,  117, 114, 102, 97,  99,
    101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111,
    100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,
    91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,
    83,  117, 114, 102, 97,  99,  101, 34,  93,  44,  32,  34,  67,  97,  108,
    108, 83,  101, 116, 79,  114, 100, 101, 114, 34,  58,  32,  45,  49,  48,
    44,  32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108,
    105, 122, 101, 114, 46,  83,  117, 114, 102, 97,  99,  101, 34,  93,  44,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  83,  117, 114, 102, 97,  99,  101, 115, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111,
    100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 76,  105, 115, 116,
    34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,
    86,  97,  108, 117, 101, 67,  111, 108, 111, 114, 77,  97,  112, 112, 105,
    110, 103, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  97,  108, 117, 101, 67,
    111, 108, 111, 114, 77,  97,  112, 112, 105, 110, 103, 34,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  86,  97,  108, 117, 101, 32,  116, 111, 32,  99,  111, 108, 111, 114,
    32,  109, 97,  112, 112, 105, 110, 103, 34,  44,  32,  34,  84,  79,  68,
    79,  34,  58,  32,  34,  65,  100, 100, 32,  112, 114, 111, 112, 101, 114,
    116, 105, 101, 115, 32,  102, 111, 114, 32,  104, 105, 115, 116, 111, 103,
    114, 97,  109, 32,  119, 105, 100, 103, 101, 116, 63,  34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  86,
    97,  108, 117, 101, 67,  111, 108, 111, 114, 77,  97,  112, 112, 105, 110,
    103, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101,
    46,  86,  111, 108, 117, 109, 101, 34,  58,  32,  123, 34,  65,  108, 108,
    111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121,
    112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  68,  97,  116, 97,  46,  86,  111, 108, 117, 109, 101, 34,  93,  44,
    32,  34,  67,  97,  108, 108, 83,  101, 116, 79,  114, 100, 101, 114, 34,
    58,  32,  45,  50,  48,  44,  32,  34,  67,  111, 109, 112, 97,  116, 105,
    98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,  101, 86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  111, 108, 117, 109,
    101, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  86,  111, 108, 117, 109, 101, 34,  44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,
    78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125,
    44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  86,  111,
    108, 117, 109, 101, 71,  114, 105, 100, 67,  111, 108, 111, 114, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  83,  108, 105, 99,  101, 86,  105, 115, 117, 97,  108,
    105, 122, 101, 114, 46,  86,  111, 108, 117, 109, 101, 71,  114, 105, 100,
    67,  111, 108, 111, 114, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117,
    108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  91,  49,  46,  48,  44,
    32,  49,  46,  48,  44,  32,  48,  46,  48,  44,  32,  48,  46,  53,  93,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  86,  111, 108, 117, 109, 101, 32,  103, 114, 105, 100, 32,
    99,  111, 108, 111, 114, 34,  44,  32,  34,  69,  110, 97,  98,  108, 101,
    100, 67,  111, 110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123, 34,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  83,  108, 105, 99,  101, 46,  86,  111, 108, 117, 109, 101, 71,  114,
    105, 100, 83,  104, 111, 119, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111, 110, 46,  72,
    97,  115, 86,  97,  108, 117, 101, 34,  44,  32,  34,  86,  97,  108, 117,
    101, 115, 34,  58,  32,  91,  116, 114, 117, 101, 93,  125, 44,  32,  34,
    83,  104, 111, 119, 65,  108, 112, 104, 97,  34,  58,  32,  116, 114, 117,
    101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  67,  111, 108, 111, 114, 34,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  83,  108, 105, 99,  101, 46,  86,  111, 108, 117, 109, 101, 71,
    114, 105, 100, 83,  104, 111, 119, 34,  58,  32,  123, 34,  67,  111, 109,
    112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115,
    34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108,
    105, 99,  101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  86,
    111, 108, 117, 109, 101, 71,  114, 105, 100, 83,  104, 111, 119, 34,  93,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  83,  104, 111, 119, 32,  118, 111, 108, 117, 109, 101, 32,
    103, 114, 105, 100, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  66,  111, 111, 108, 101, 97,  110, 34,
    125, 125, 44,  32,  34,  85,  73,  34,  58,  32,  123, 34,  83,  105, 100,
    101, 80,  97,  110, 101, 108, 83,  101, 99,  116, 105, 111, 110, 115, 34,
    58,  32,  91,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  73,  110, 102, 111, 34,  44,  32,  34,  69,  110,
    116, 114, 105, 101, 115, 34,  58,  32,  91,  123, 34,  78,  97,  109, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105,
    99,  101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  73,  110,
    102, 111, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  67,
    117, 115, 116, 111, 109, 34,  125, 93,  44,  32,  34,  78,  97,  109, 101,
    34,  58,  32,  34,  73,  110, 102, 111, 83,  101, 99,  116, 105, 111, 110,
    34,  125, 44,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  67,  111, 108, 111, 114, 105, 122, 101, 114,
    34,  44,  32,  34,  69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  91,
    123, 34,  76,  97,  98,  101, 108, 83,  116, 121, 108, 101, 34,  58,  32,
    34,  78,  111, 110, 101, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114,
    116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101,
    46,  86,  97,  108, 117, 101, 67,  111, 108, 111, 114, 77,  97,  112, 112,
    105, 110, 103, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 93,  44,  32,  34,  78,
    97,  109, 101, 34,  58,  32,  34,  67,  111, 108, 111, 114, 105, 122, 101,
    114, 83,  101, 99,  116, 105, 111, 110, 34,  125, 44,  32,  123, 34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  72,
    105, 115, 116, 111, 103, 114, 97,  109, 34,  44,  32,  34,  69,  110, 116,
    114, 105, 101, 115, 34,  58,  32,  91,  123, 34,  78,  97,  109, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  108, 105, 99,
    101, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  72,  105, 115,
    116, 111, 103, 114, 97,  109, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  67,  117, 115, 116, 111, 109, 34,  125, 93,  44,  32,  34,
    78,  97,  109, 101, 34,  58,  32,  34,  72,  105, 115, 116, 111, 103, 114,
    97,  109, 83,  101, 99,  116, 105, 111, 110, 34,  125, 44,  32,  123, 34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    83,  105, 122, 101, 32,  97,  110, 100, 32,  112, 111, 115, 105, 116, 105,
    111, 110, 34,  44,  32,  34,  69,  110, 116, 114, 105, 101, 115, 34,  58,
    32,  91,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 101, 119, 50,  68,
    46,  67,  101, 110, 116, 101, 114, 80,  111, 105, 110, 116, 34,  44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101, 114,
    116, 121, 34,  125, 44,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116,
    121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    101, 119, 50,  68,  46,  86,  101, 114, 116, 105, 99,  97,  108, 83,  105,
    122, 101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  80,
    114, 111, 112, 101, 114, 116, 121, 34,  125, 93,  44,  32,  34,  78,  97,
    109, 101, 34,  58,  32,  34,  83,  105, 122, 101, 80,  111, 115, 105, 116,
    105, 111, 110, 34,  125, 44,  32,  123, 34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  71,  114, 105, 100, 34,  44,
    32,  34,  69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  91,  123, 34,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  83,  108, 105, 99,  101, 46,  71,  114, 105, 100, 83,  104, 111, 119,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  80,  114, 111,
    112, 101, 114, 116, 121, 34,  125, 44,  32,  123, 34,  80,  114, 111, 112,
    101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105,
    99,  101, 46,  71,  114, 105, 100, 67,  111, 108, 111, 114, 34,  44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101, 114,
    116, 121, 34,  125, 44,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116,
    121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,
    71,  114, 105, 100, 83,  112, 97,  99,  105, 110, 103, 65,  117, 116, 111,
    109, 97,  116, 105, 99,  34,  44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 44,  32,  123,
    34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  83,  108, 105, 99,  101, 46,  71,  114, 105, 100, 83,  112, 97,
    99,  105, 110, 103, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 93,  44,  32,  34,
    78,  97,  109, 101, 34,  58,  32,  34,  71,  114, 105, 100, 34,  125, 44,
    32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  82,  117, 108, 101, 114, 34,  44,  32,  34,  69,  110, 116,
    114, 105, 101, 115, 34,  58,  32,  91,  123, 34,  80,  114, 111, 112, 101,
    114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,
    101, 46,  82,  117, 108, 101, 114, 83,  104, 111, 119, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101, 114, 116,
    121, 34,  125, 44,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  82,
    117, 108, 101, 114, 67,  111, 108, 111, 114, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101, 114, 116, 121, 34,
    125, 44,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  82,  117, 108,
    101, 114, 83,  112, 97,  99,  105, 110, 103, 65,  117, 116, 111, 109, 97,
    116, 105, 99,  34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 44,  32,  123, 34,  80,
    114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,
    83,  108, 105, 99,  101, 46,  82,  117, 108, 101, 114, 83,  112, 97,  99,
    105, 110, 103, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 93,  44,  32,  34,  78,
    97,  109, 101, 34,  58,  32,  34,  82,  117, 108, 101, 114, 34,  125, 44,
    32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  86,  111, 108, 117, 109, 101, 32,  103, 114, 105, 100, 34,
    44,  32,  34,  69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  91,  123,
    34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  83,  108, 105, 99,  101, 46,  86,  111, 108, 117, 109, 101, 71,
    114, 105, 100, 83,  104, 111, 119, 34,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 44,
    32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 46,  83,  108, 105, 99,  101, 46,  86,  111, 108, 117, 109,
    101, 71,  114, 105, 100, 67,  111, 108, 111, 114, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101, 114, 116, 121,
    34,  125, 93,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  86,
    111, 108, 117, 109, 101, 71,  114, 105, 100, 34,  125, 93,  125, 125, 0};
const char* SliceProperties::_getPrototypeJson() { return _prototype_Slice_; }

SliceProperties::~SliceProperties() {}

QPointF SliceProperties::centerPoint() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double>, QPointF>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double>>(
          "de.uni_stuttgart.Voxie.View2D.CenterPoint"));
}
std::tuple<double, double> SliceProperties::centerPointRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double>>(
      "de.uni_stuttgart.Voxie.View2D.CenterPoint");
}
QSharedPointer<NodeProperty> SliceProperties::centerPointProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.View2D.CenterPoint", false);
}
void SliceProperties::setCenterPoint(QPointF value) {
  _node->setNodePropertyTyped<std::tuple<double, double>>(
      "de.uni_stuttgart.Voxie.View2D.CenterPoint",
      vx::PropertyValueConvertRaw<std::tuple<double, double>, QPointF>::toRaw(
          value));
}
double SliceProperties::verticalSize() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.View2D.VerticalSize"));
}
double SliceProperties::verticalSizeRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.View2D.VerticalSize");
}
QSharedPointer<NodeProperty> SliceProperties::verticalSizeProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.View2D.VerticalSize", false);
}
void SliceProperties::setVerticalSize(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.View2D.VerticalSize",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
QString SliceProperties::filter2DConfiguration() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Filter2DConfiguration"));
}
QString SliceProperties::filter2DConfigurationRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Filter2DConfiguration");
}
QSharedPointer<NodeProperty> SliceProperties::filter2DConfigurationProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Filter2DConfiguration", false);
}
void SliceProperties::setFilter2DConfiguration(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Filter2DConfiguration",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
vx::Node* SliceProperties::geometricPrimitive() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitive"));
}
QDBusObjectPath SliceProperties::geometricPrimitiveRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitive");
}
QSharedPointer<NodeProperty> SliceProperties::geometricPrimitiveProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitive", false);
}
void SliceProperties::setGeometricPrimitive(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitive",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Color SliceProperties::geometricPrimitiveColorBehindSlice() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorBehindSlice"));
}
std::tuple<double, double, double, double>
SliceProperties::geometricPrimitiveColorBehindSliceRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorBehindSlice");
}
QSharedPointer<NodeProperty>
SliceProperties::geometricPrimitiveColorBehindSliceProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice."
      "GeometricPrimitiveColorBehindSlice",
      false);
}
void SliceProperties::setGeometricPrimitiveColorBehindSlice(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice."
      "GeometricPrimitiveColorBehindSlice",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
vx::Color SliceProperties::geometricPrimitiveColorInFrontOfSlice() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorInFrontOfSlice"));
}
std::tuple<double, double, double, double>
SliceProperties::geometricPrimitiveColorInFrontOfSliceRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorInFrontOfSlice");
}
QSharedPointer<NodeProperty>
SliceProperties::geometricPrimitiveColorInFrontOfSliceProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice."
      "GeometricPrimitiveColorInFrontOfSlice",
      false);
}
void SliceProperties::setGeometricPrimitiveColorInFrontOfSlice(
    vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice."
      "GeometricPrimitiveColorInFrontOfSlice",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
vx::Color SliceProperties::geometricPrimitiveColorOnSlice() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorOnSlice"));
}
std::tuple<double, double, double, double>
SliceProperties::geometricPrimitiveColorOnSliceRaw() {
  return _node->getNodePropertyTyped<
      std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitiveColorOnSlice");
}
QSharedPointer<NodeProperty>
SliceProperties::geometricPrimitiveColorOnSliceProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitiveColorOnSlice",
      false);
}
void SliceProperties::setGeometricPrimitiveColorOnSlice(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitiveColorOnSlice",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
double SliceProperties::geometricPrimitiveVisibilityDistance() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveVisibilityDistance"));
}
double SliceProperties::geometricPrimitiveVisibilityDistanceRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice."
      "GeometricPrimitiveVisibilityDistance");
}
QSharedPointer<NodeProperty>
SliceProperties::geometricPrimitiveVisibilityDistanceProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice."
      "GeometricPrimitiveVisibilityDistance",
      false);
}
void SliceProperties::setGeometricPrimitiveVisibilityDistance(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice."
      "GeometricPrimitiveVisibilityDistance",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
vx::Color SliceProperties::gridColor() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor"));
}
std::tuple<double, double, double, double> SliceProperties::gridColorRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor");
}
QSharedPointer<NodeProperty> SliceProperties::gridColorProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor", false);
}
void SliceProperties::setGridColor(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
bool SliceProperties::gridShow() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow"));
}
bool SliceProperties::gridShowRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow");
}
QSharedPointer<NodeProperty> SliceProperties::gridShowProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow", false);
}
void SliceProperties::setGridShow(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
double SliceProperties::gridSpacing() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing"));
}
double SliceProperties::gridSpacingRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing");
}
QSharedPointer<NodeProperty> SliceProperties::gridSpacingProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing", false);
}
void SliceProperties::setGridSpacing(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
bool SliceProperties::gridSpacingAutomatic() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacingAutomatic"));
}
bool SliceProperties::gridSpacingAutomaticRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacingAutomatic");
}
QSharedPointer<NodeProperty> SliceProperties::gridSpacingAutomaticProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacingAutomatic", false);
}
void SliceProperties::setGridSpacingAutomatic(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacingAutomatic",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
vx::Node* SliceProperties::infoTable() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable"));
}
QDBusObjectPath SliceProperties::infoTableRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable");
}
QSharedPointer<NodeProperty> SliceProperties::infoTableProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable", false);
}
void SliceProperties::setInfoTable(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
QString SliceProperties::interpolation() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation"));
}
QString SliceProperties::interpolationRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation");
}
QSharedPointer<NodeProperty> SliceProperties::interpolationProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation", false);
}
void SliceProperties::setInterpolation(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
vx::Node* SliceProperties::labelContainer() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer"));
}
QDBusObjectPath SliceProperties::labelContainerRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer");
}
QSharedPointer<NodeProperty> SliceProperties::labelContainerProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer", false);
}
void SliceProperties::setLabelContainer(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Node* SliceProperties::plane() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane"));
}
QDBusObjectPath SliceProperties::planeRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane");
}
QSharedPointer<NodeProperty> SliceProperties::planeProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane", false);
}
void SliceProperties::setPlane(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
QQuaternion SliceProperties::orientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Orientation"));
}
std::tuple<double, double, double, double> SliceProperties::orientationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Orientation");
}
QSharedPointer<NodeProperty> SliceProperties::orientationProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Orientation", false);
}
void SliceProperties::setOrientation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Orientation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
QVector3D SliceProperties::origin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin"));
}
std::tuple<double, double, double> SliceProperties::originRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin");
}
QSharedPointer<NodeProperty> SliceProperties::originProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin", false);
}
void SliceProperties::setOrigin(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
vx::Color SliceProperties::rulerColor() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor"));
}
std::tuple<double, double, double, double> SliceProperties::rulerColorRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor");
}
QSharedPointer<NodeProperty> SliceProperties::rulerColorProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor", false);
}
void SliceProperties::setRulerColor(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
bool SliceProperties::rulerShow() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow"));
}
bool SliceProperties::rulerShowRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow");
}
QSharedPointer<NodeProperty> SliceProperties::rulerShowProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow", false);
}
void SliceProperties::setRulerShow(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
double SliceProperties::rulerSpacing() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing"));
}
double SliceProperties::rulerSpacingRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing");
}
QSharedPointer<NodeProperty> SliceProperties::rulerSpacingProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing", false);
}
void SliceProperties::setRulerSpacing(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
bool SliceProperties::rulerSpacingAutomatic() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacingAutomatic"));
}
bool SliceProperties::rulerSpacingAutomaticRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacingAutomatic");
}
QSharedPointer<NodeProperty> SliceProperties::rulerSpacingAutomaticProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacingAutomatic", false);
}
void SliceProperties::setRulerSpacingAutomatic(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacingAutomatic",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
vx::Node* SliceProperties::segmentationFilter() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.SegmentationFilter"));
}
QDBusObjectPath SliceProperties::segmentationFilterRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.SegmentationFilter");
}
QSharedPointer<NodeProperty> SliceProperties::segmentationFilterProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.SegmentationFilter", false);
}
void SliceProperties::setSegmentationFilter(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.SegmentationFilter",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
qint64 SliceProperties::show2DFilterMask() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      _node->getNodePropertyTyped<qint64>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask"));
}
qint64 SliceProperties::show2DFilterMaskRaw() {
  return _node->getNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask");
}
QSharedPointer<NodeProperty> SliceProperties::show2DFilterMaskProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask", false);
}
void SliceProperties::setShow2DFilterMask(qint64 value) {
  _node->setNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask",
      vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value));
}
bool SliceProperties::showSliceCenter() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter"));
}
bool SliceProperties::showSliceCenterRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter");
}
QSharedPointer<NodeProperty> SliceProperties::showSliceCenterProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter", false);
}
void SliceProperties::setShowSliceCenter(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
QList<vx::Node*> SliceProperties::surface() {
  return vx::PropertyValueConvertRaw<QList<QDBusObjectPath>, QList<vx::Node*>>::
      fromRaw(_node->getNodePropertyTyped<QList<QDBusObjectPath>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Surface"));
}
QList<QDBusObjectPath> SliceProperties::surfaceRaw() {
  return _node->getNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Surface");
}
QSharedPointer<NodeProperty> SliceProperties::surfaceProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Surface", false);
}
void SliceProperties::setSurface(QList<vx::Node*> value) {
  _node->setNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Surface",
      vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                  QList<vx::Node*>>::toRaw(value));
}
QList<vx::ColorizerEntry> SliceProperties::valueColorMapping() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(_node->getNodePropertyTyped<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.ValueColorMapping"));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
SliceProperties::valueColorMappingRaw() {
  return _node->getNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.ValueColorMapping");
}
QSharedPointer<NodeProperty> SliceProperties::valueColorMappingProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.ValueColorMapping", false);
}
void SliceProperties::setValueColorMapping(QList<vx::ColorizerEntry> value) {
  _node->setNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.ValueColorMapping",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint32>>,
          QList<vx::ColorizerEntry>>::toRaw(value));
}
vx::Node* SliceProperties::volume() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.Volume"));
}
QDBusObjectPath SliceProperties::volumeRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Volume");
}
QSharedPointer<NodeProperty> SliceProperties::volumeProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Volume", false);
}
void SliceProperties::setVolume(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Volume",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Color SliceProperties::volumeGridColor() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor"));
}
std::tuple<double, double, double, double>
SliceProperties::volumeGridColorRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor");
}
QSharedPointer<NodeProperty> SliceProperties::volumeGridColorProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor", false);
}
void SliceProperties::setVolumeGridColor(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
bool SliceProperties::volumeGridShow() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow"));
}
bool SliceProperties::volumeGridShowRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow");
}
QSharedPointer<NodeProperty> SliceProperties::volumeGridShowProperty() {
  return _node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow", false);
}
void SliceProperties::setVolumeGridShow(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
SliceProperties::SliceProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_CenterPoint = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.View2D.CenterPoint", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_CenterPoint](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_CenterPoint) return;
        QPointF valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double>, QPointF>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.View2D.CenterPoint\":"
              << e.what();
          return;
        }
        Q_EMIT this->centerPointChanged(valueCasted);
      });
  auto _prop_VerticalSize = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.View2D.VerticalSize", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VerticalSize](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_VerticalSize) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.View2D.VerticalSize\":"
              << e.what();
          return;
        }
        Q_EMIT this->verticalSizeChanged(valueCasted);
      });
  auto _prop_Filter2DConfiguration = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Filter2DConfiguration", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Filter2DConfiguration](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_Filter2DConfiguration) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "Filter2DConfiguration\":"
                      << e.what();
          return;
        }
        Q_EMIT this->filter2DConfigurationChanged(valueCasted);
      });
  auto _prop_GeometricPrimitive = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GeometricPrimitive", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GeometricPrimitive](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_GeometricPrimitive) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "GeometricPrimitive\":"
                      << e.what();
          return;
        }
        Q_EMIT this->geometricPrimitiveChanged(valueCasted);
      });
  auto _prop_GeometricPrimitiveColorBehindSlice =
      this->_node->prototype()->getProperty(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorBehindSlice",
          false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GeometricPrimitiveColorBehindSlice](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_GeometricPrimitiveColorBehindSlice) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "GeometricPrimitiveColorBehindSlice\":"
                      << e.what();
          return;
        }
        Q_EMIT this->geometricPrimitiveColorBehindSliceChanged(valueCasted);
      });
  auto _prop_GeometricPrimitiveColorInFrontOfSlice =
      this->_node->prototype()->getProperty(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorInFrontOfSlice",
          false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GeometricPrimitiveColorInFrontOfSlice](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_GeometricPrimitiveColorInFrontOfSlice) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "GeometricPrimitiveColorInFrontOfSlice\":"
                      << e.what();
          return;
        }
        Q_EMIT this->geometricPrimitiveColorInFrontOfSliceChanged(valueCasted);
      });
  auto _prop_GeometricPrimitiveColorOnSlice =
      this->_node->prototype()->getProperty(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveColorOnSlice",
          false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GeometricPrimitiveColorOnSlice](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_GeometricPrimitiveColorOnSlice) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "GeometricPrimitiveColorOnSlice\":"
                      << e.what();
          return;
        }
        Q_EMIT this->geometricPrimitiveColorOnSliceChanged(valueCasted);
      });
  auto _prop_GeometricPrimitiveVisibilityDistance =
      this->_node->prototype()->getProperty(
          "de.uni_stuttgart.Voxie.Visualizer.Slice."
          "GeometricPrimitiveVisibilityDistance",
          false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GeometricPrimitiveVisibilityDistance](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_GeometricPrimitiveVisibilityDistance) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "GeometricPrimitiveVisibilityDistance\":"
                      << e.what();
          return;
        }
        Q_EMIT this->geometricPrimitiveVisibilityDistanceChanged(valueCasted);
      });
  auto _prop_GridColor = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GridColor](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_GridColor) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.GridColor\":"
              << e.what();
          return;
        }
        Q_EMIT this->gridColorChanged(valueCasted);
      });
  auto _prop_GridShow = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GridShow](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_GridShow) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice.GridShow\":"
                      << e.what();
          return;
        }
        Q_EMIT this->gridShowChanged(valueCasted);
      });
  auto _prop_GridSpacing = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GridSpacing](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_GridSpacing) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacing\":"
              << e.what();
          return;
        }
        Q_EMIT this->gridSpacingChanged(valueCasted);
      });
  auto _prop_GridSpacingAutomatic = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.GridSpacingAutomatic", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GridSpacingAutomatic](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_GridSpacingAutomatic) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "GridSpacingAutomatic\":"
                      << e.what();
          return;
        }
        Q_EMIT this->gridSpacingAutomaticChanged(valueCasted);
      });
  auto _prop_InfoTable = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_InfoTable](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_InfoTable) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.InfoTable\":"
              << e.what();
          return;
        }
        Q_EMIT this->infoTableChanged(valueCasted);
      });
  auto _prop_Interpolation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Interpolation](const QSharedPointer<NodeProperty>& property,
                                  const QVariant& value) {
        if (property != _prop_Interpolation) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.Interpolation\":"
              << e.what();
          return;
        }
        Q_EMIT this->interpolationChanged(valueCasted);
      });
  auto _prop_LabelContainer = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LabelContainer](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_LabelContainer) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.LabelContainer\":"
              << e.what();
          return;
        }
        Q_EMIT this->labelContainerChanged(valueCasted);
      });
  auto _prop_Plane = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Plane](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Plane) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Visualizer.Slice.Plane\":"
              << e.what();
          return;
        }
        Q_EMIT this->planeChanged(valueCasted);
      });
  auto _prop_Orientation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Orientation", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Orientation](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_Orientation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice.Plane."
                         "Orientation\":"
                      << e.what();
          return;
        }
        Q_EMIT this->orientationChanged(valueCasted);
      });
  auto _prop_Origin = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Origin](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Origin) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.Plane.Origin\":"
              << e.what();
          return;
        }
        Q_EMIT this->originChanged(valueCasted);
      });
  auto _prop_RulerColor = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_RulerColor](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_RulerColor) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.RulerColor\":"
              << e.what();
          return;
        }
        Q_EMIT this->rulerColorChanged(valueCasted);
      });
  auto _prop_RulerShow = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_RulerShow](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_RulerShow) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.RulerShow\":"
              << e.what();
          return;
        }
        Q_EMIT this->rulerShowChanged(valueCasted);
      });
  auto _prop_RulerSpacing = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_RulerSpacing](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_RulerSpacing) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacing\":"
              << e.what();
          return;
        }
        Q_EMIT this->rulerSpacingChanged(valueCasted);
      });
  auto _prop_RulerSpacingAutomatic = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.RulerSpacingAutomatic", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_RulerSpacingAutomatic](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_RulerSpacingAutomatic) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "RulerSpacingAutomatic\":"
                      << e.what();
          return;
        }
        Q_EMIT this->rulerSpacingAutomaticChanged(valueCasted);
      });
  auto _prop_SegmentationFilter = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.SegmentationFilter", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_SegmentationFilter](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_SegmentationFilter) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "SegmentationFilter\":"
                      << e.what();
          return;
        }
        Q_EMIT this->segmentationFilterChanged(valueCasted);
      });
  auto _prop_Show2DFilterMask = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Show2DFilterMask](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_Show2DFilterMask) return;
        qint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
              Node::parseVariant<qint64>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.Show2DFilterMask\":"
              << e.what();
          return;
        }
        Q_EMIT this->show2DFilterMaskChanged(valueCasted);
      });
  auto _prop_ShowSliceCenter = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ShowSliceCenter](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ShowSliceCenter) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.ShowSliceCenter\":"
              << e.what();
          return;
        }
        Q_EMIT this->showSliceCenterChanged(valueCasted);
      });
  auto _prop_Surface = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Surface", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Surface](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_Surface) return;
        QList<vx::Node*> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                                    QList<vx::Node*>>::
              fromRaw(Node::parseVariant<QList<QDBusObjectPath>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Visualizer.Slice.Surface\":"
              << e.what();
          return;
        }
        Q_EMIT this->surfaceChanged(valueCasted);
      });
  auto _prop_ValueColorMapping = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.ValueColorMapping", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ValueColorMapping](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ValueColorMapping) return;
        QList<vx::ColorizerEntry> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>,
              QList<vx::ColorizerEntry>>::
              fromRaw(Node::parseVariant<QList<std::tuple<
                          double, std::tuple<double, double, double, double>,
                          qint32>>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.Slice."
                         "ValueColorMapping\":"
                      << e.what();
          return;
        }
        Q_EMIT this->valueColorMappingChanged(valueCasted);
      });
  auto _prop_Volume = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.Volume", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Volume](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Volume) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Visualizer.Slice.Volume\":"
              << e.what();
          return;
        }
        Q_EMIT this->volumeChanged(valueCasted);
      });
  auto _prop_VolumeGridColor = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VolumeGridColor](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_VolumeGridColor) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridColor\":"
              << e.what();
          return;
        }
        Q_EMIT this->volumeGridColorChanged(valueCasted);
      });
  auto _prop_VolumeGridShow = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VolumeGridShow](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_VolumeGridShow) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.Slice.VolumeGridShow\":"
              << e.what();
          return;
        }
        Q_EMIT this->volumeGridShowChanged(valueCasted);
      });
}

}  // namespace visualizer_prop
}  // namespace vx
