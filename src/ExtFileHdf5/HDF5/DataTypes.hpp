/*
 * Copyright (c) 2010-2012 Steffen Kie√ü
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifndef HDF5_DATATYPES_HPP_INCLUDED
#define HDF5_DATATYPES_HPP_INCLUDED

// Predefined HDF5 data types

#include <Core/Assert.hpp>
#include <Core/Util.hpp>

#include <hdf5.h>

#include <HDF5/AtomicTypes.hpp>
#include <HDF5/OpaqueType.hpp>
#include <HDF5/ReferenceType.hpp>

namespace HDF5 {
#define DTYPE(Name, Type)                                          \
  inline Type Name() {                                             \
    Exception::check("H5open", H5open());                          \
    return Type(Exception::check("H5Tcopy", H5Tcopy(H5T_##Name))); \
  }
DTYPE(NATIVE_CHAR, IntegerType)
// List generated by GetConsts
DTYPE(IEEE_F32BE, FloatType)
DTYPE(IEEE_F32LE, FloatType)
DTYPE(IEEE_F64BE, FloatType)
DTYPE(IEEE_F64LE, FloatType)
DTYPE(STD_I8BE, IntegerType)
DTYPE(STD_I8LE, IntegerType)
DTYPE(STD_I16BE, IntegerType)
DTYPE(STD_I16LE, IntegerType)
DTYPE(STD_I32BE, IntegerType)
DTYPE(STD_I32LE, IntegerType)
DTYPE(STD_I64BE, IntegerType)
DTYPE(STD_I64LE, IntegerType)
DTYPE(STD_U8BE, IntegerType)
DTYPE(STD_U8LE, IntegerType)
DTYPE(STD_U16BE, IntegerType)
DTYPE(STD_U16LE, IntegerType)
DTYPE(STD_U32BE, IntegerType)
DTYPE(STD_U32LE, IntegerType)
DTYPE(STD_U64BE, IntegerType)
DTYPE(STD_U64LE, IntegerType)
DTYPE(STD_B8BE, BitFieldType)
DTYPE(STD_B8LE, BitFieldType)
DTYPE(STD_B16BE, BitFieldType)
DTYPE(STD_B16LE, BitFieldType)
DTYPE(STD_B32BE, BitFieldType)
DTYPE(STD_B32LE, BitFieldType)
DTYPE(STD_B64BE, BitFieldType)
DTYPE(STD_B64LE, BitFieldType)
DTYPE(STD_REF_OBJ, ReferenceType)
DTYPE(STD_REF_DSETREG, ReferenceType)
DTYPE(UNIX_D32BE, TimeType)
DTYPE(UNIX_D32LE, TimeType)
DTYPE(UNIX_D64BE, TimeType)
DTYPE(UNIX_D64LE, TimeType)
DTYPE(C_S1, StringType)
DTYPE(FORTRAN_S1, StringType)
DTYPE(VAX_F32, FloatType)
DTYPE(VAX_F64, FloatType)
DTYPE(NATIVE_SCHAR, IntegerType)
DTYPE(NATIVE_UCHAR, IntegerType)
DTYPE(NATIVE_SHORT, IntegerType)
DTYPE(NATIVE_USHORT, IntegerType)
DTYPE(NATIVE_INT, IntegerType)
DTYPE(NATIVE_UINT, IntegerType)
DTYPE(NATIVE_LONG, IntegerType)
DTYPE(NATIVE_ULONG, IntegerType)
DTYPE(NATIVE_LLONG, IntegerType)
DTYPE(NATIVE_ULLONG, IntegerType)
DTYPE(NATIVE_FLOAT, FloatType)
DTYPE(NATIVE_DOUBLE, FloatType)
DTYPE(NATIVE_LDOUBLE, FloatType)
DTYPE(NATIVE_B8, BitFieldType)
DTYPE(NATIVE_B16, BitFieldType)
DTYPE(NATIVE_B32, BitFieldType)
DTYPE(NATIVE_B64, BitFieldType)
DTYPE(NATIVE_OPAQUE, OpaqueType)
DTYPE(NATIVE_HADDR, IntegerType)
DTYPE(NATIVE_HSIZE, IntegerType)
DTYPE(NATIVE_HSSIZE, IntegerType)
DTYPE(NATIVE_HERR, IntegerType)
DTYPE(NATIVE_HBOOL, IntegerType)
DTYPE(NATIVE_INT8, IntegerType)
DTYPE(NATIVE_UINT8, IntegerType)
DTYPE(NATIVE_INT_LEAST8, IntegerType)
DTYPE(NATIVE_UINT_LEAST8, IntegerType)
DTYPE(NATIVE_INT_FAST8, IntegerType)
DTYPE(NATIVE_UINT_FAST8, IntegerType)
DTYPE(NATIVE_INT16, IntegerType)
DTYPE(NATIVE_UINT16, IntegerType)
DTYPE(NATIVE_INT_LEAST16, IntegerType)
DTYPE(NATIVE_UINT_LEAST16, IntegerType)
DTYPE(NATIVE_INT_FAST16, IntegerType)
DTYPE(NATIVE_UINT_FAST16, IntegerType)
DTYPE(NATIVE_INT32, IntegerType)
DTYPE(NATIVE_UINT32, IntegerType)
DTYPE(NATIVE_INT_LEAST32, IntegerType)
DTYPE(NATIVE_UINT_LEAST32, IntegerType)
DTYPE(NATIVE_INT_FAST32, IntegerType)
DTYPE(NATIVE_UINT_FAST32, IntegerType)
DTYPE(NATIVE_INT64, IntegerType)
DTYPE(NATIVE_UINT64, IntegerType)
DTYPE(NATIVE_INT_LEAST64, IntegerType)
DTYPE(NATIVE_UINT_LEAST64, IntegerType)
DTYPE(NATIVE_INT_FAST64, IntegerType)
DTYPE(NATIVE_UINT_FAST64, IntegerType)
#undef DTYPE
}  // namespace HDF5

#endif  // !HDF5_DATATYPES_HPP_INCLUDED
