#include <VoxieClient/DBusTypeList.hpp>
/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p tmp-dbus/DBusProxies -a
 * tmp-dbus/DBusAdaptors
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef DBUSADAPTORS_H
#define DBUSADAPTORS_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
QT_BEGIN_NAMESPACE
class QByteArray;
template <class T>
class QList;
template <class Key, class Value>
class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Client
 */
class VOXIECLIENT_EXPORT ClientAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Client")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Client\">\n"
      "    <property access=\"read\" type=\"s\" "
      "name=\"UniqueConnectionName\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"DBusConnectionName\"/>\n"
      "    <method name=\"DecRefCount\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"o\"/>\n"
      "    </method>\n"
      "    <method name=\"IncRefCount\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"o\"/>\n"
      "    </method>\n"
      "    <method name=\"GetReferencedObjects\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"a{ot}\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QDBusObjectPath, "
      "quint64&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ClientAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ClientAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString DBusConnectionName READ dBusConnectionName)
  virtual QString dBusConnectionName() const = 0;

  Q_PROPERTY(QString UniqueConnectionName READ uniqueConnectionName)
  virtual QString uniqueConnectionName() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void DecRefCount(const QDBusObjectPath& o) = 0;
  virtual VX_IDENTITY_TYPE((QMap<QDBusObjectPath, quint64>))
      GetReferencedObjects(
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void IncRefCount(const QDBusObjectPath& o) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ClientManager
 */
class VOXIECLIENT_EXPORT ClientManagerAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ClientManager")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.ClientManager\">\n"
              "    <method name=\"CreateClient\">\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
              "      <arg direction=\"out\" type=\"o\" name=\"ret\"/>\n"
              "    </method>\n"
              "    <method name=\"CreateIndependentClient\">\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
              "      <arg direction=\"out\" type=\"o\" name=\"ret\"/>\n"
              "    </method>\n"
              "    <method name=\"DestroyClient\">\n"
              "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
              "    </method>\n"
              "  </interface>\n"
              "")
 public:
  ClientManagerAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ClientManagerAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath CreateClient(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateIndependentClient(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void DestroyClient(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Component
 */
class VOXIECLIENT_EXPORT ComponentAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Component")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Component\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.DynamicObject\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"ComponentContainer\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.ComponentContainer\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"s\" name=\"ComponentType\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "  </interface>\n"
      "")
 public:
  ComponentAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ComponentAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath ComponentContainer READ componentContainer)
  virtual QDBusObjectPath componentContainer() const = 0;

  Q_PROPERTY(QString ComponentType READ componentType)
  virtual QString componentType() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ComponentContainer
 */
class VOXIECLIENT_EXPORT ComponentContainerAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ComponentContainer")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.ComponentContainer\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.DynamicObject\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <method name=\"ListComponents\">\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"type\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"GetComponent\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"type\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ComponentContainerAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ComponentContainerAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath GetComponent(
      const QString& type, const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QList<QDBusObjectPath> ListComponents(
      const QString& type,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ContainerData
 */
class VOXIECLIENT_EXPORT ContainerDataAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ContainerData")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.ContainerData\">\n"
              "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
              "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
              "    <method name=\"GetElement\">\n"
              "      <arg direction=\"in\" type=\"s\" name=\"key\"/>\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
              "      <arg direction=\"out\" type=\"o\" name=\"data\"/>\n"
              "    </method>\n"
              "    <method name=\"GetName\">\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
              "      <arg direction=\"out\" type=\"s\" name=\"name\"/>\n"
              "    </method>\n"
              "    <method name=\"GetValues\">\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
              "      <arg direction=\"out\" type=\"ao\" name=\"data\"/>\n"
              "    </method>\n"
              "    <method name=\"GetKeys\">\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
              "      <arg direction=\"out\" type=\"as\" name=\"data\"/>\n"
              "    </method>\n"
              "    <method name=\"InsertElement\">\n"
              "      <arg direction=\"in\" type=\"s\" name=\"key\"/>\n"
              "      <arg direction=\"in\" type=\"o\" name=\"value\"/>\n"
              "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
              "    </method>\n"
              "  </interface>\n"
              "")
 public:
  ContainerDataAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ContainerDataAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath GetElement(
      const QString& key,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QStringList GetKeys(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QString GetName(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QList<QDBusObjectPath> GetValues(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void InsertElement(
      const QString& key, const QDBusObjectPath& value,
      const QDBusObjectPath& update,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Data
 */
class VOXIECLIENT_EXPORT DataAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Data")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Data\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.DynamicObject\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <method name=\"CreateUpdate\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "    <property access=\"read\" type=\"s\" "
      "name=\"CurrentVersionString\"/>\n"
      "    <method name=\"GetCurrentVersion\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "    <signal name=\"DataChanged\">\n"
      "      <arg direction=\"out\" type=\"o\" name=\"newVersion\"/>\n"
      "      <arg direction=\"out\" type=\"s\" "
      "name=\"newVersionVersionString\"/>\n"
      "      <arg direction=\"out\" type=\"b\" "
      "name=\"newVersionUpdateIsRunning\"/>\n"
      "      <arg direction=\"out\" type=\"s\" name=\"newVersionDate\"/>\n"
      "      <arg direction=\"out\" type=\"s\" name=\"reason\"/>\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In5\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out5\"/>\n"
      "    </signal>\n"
      "  </interface>\n"
      "")
 public:
  DataAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~DataAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString CurrentVersionString READ currentVersionString)
  virtual QString currentVersionString() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath CreateUpdate(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath GetCurrentVersion(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
  void DataChanged(const QDBusObjectPath& newVersion,
                   const QString& newVersionVersionString,
                   bool newVersionUpdateIsRunning,
                   const QString& newVersionDate, const QString& reason,
                   const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                       options);
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.DataNode
 */
class VOXIECLIENT_EXPORT DataNodeAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.DataNode")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.DataNode\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Node\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"FileName\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"Importer\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Importer\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"a{sv}\" "
      "name=\"ImportProperties\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"Data\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"DefaultExporter\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Exporter\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  DataNodeAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~DataNodeAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath Data READ data)
  virtual QDBusObjectPath data() const = 0;

  Q_PROPERTY(QDBusObjectPath DefaultExporter READ defaultExporter)
  virtual QDBusObjectPath defaultExporter() const = 0;

  Q_PROPERTY(QString FileName READ fileName)
  virtual QString fileName() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 ImportProperties READ importProperties)
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      importProperties() const = 0;

  Q_PROPERTY(QDBusObjectPath Importer READ importer)
  virtual QDBusObjectPath importer() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.DataObject
 */
class VOXIECLIENT_EXPORT DataObjectAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.DataObject")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.DataObject\">\n"
      "    <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Object\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"FileName\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"Importer\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Importer\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"a{sv}\" "
      "name=\"ImportProperties\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"Data\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"DefaultExporter\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Exporter\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  DataObjectAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~DataObjectAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath Data READ data)
  virtual QDBusObjectPath data() const = 0;

  Q_PROPERTY(QDBusObjectPath DefaultExporter READ defaultExporter)
  virtual QDBusObjectPath defaultExporter() const = 0;

  Q_PROPERTY(QString FileName READ fileName)
  virtual QString fileName() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 ImportProperties READ importProperties)
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      importProperties() const = 0;

  Q_PROPERTY(QDBusObjectPath Importer READ importer)
  virtual QDBusObjectPath importer() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.DataVersion
 */
class VOXIECLIENT_EXPORT DataVersionAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.DataVersion")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.DataVersion\">\n"
      "    <property access=\"read\" type=\"o\" name=\"Data\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"s\" name=\"VersionString\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Date\"/>\n"
      "    <property access=\"read\" type=\"b\" name=\"UpdateIsRunning\"/>\n"
      "    <property access=\"read\" type=\"a{sv}\" name=\"Metadata\">\n"
      "      <annotation value=\"true\" "
      "name=\"de.uni_stuttgart.Voxie.IsJSONAsDBusVariant\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  DataVersionAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~DataVersionAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath Data READ data)
  virtual QDBusObjectPath data() const = 0;

  Q_PROPERTY(QString Date READ date)
  virtual QString date() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 Metadata READ metadata)
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) metadata() const = 0;

  Q_PROPERTY(bool UpdateIsRunning READ updateIsRunning)
  virtual bool updateIsRunning() const = 0;

  Q_PROPERTY(QString VersionString READ versionString)
  virtual QString versionString() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.DebugOption
 */
class VOXIECLIENT_EXPORT DebugOptionAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.DebugOption")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.DebugOption\">\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "    <property access=\"read\" type=\"g\" name=\"DBusSignature\"/>\n"
      "    <method name=\"GetValue\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"v\" name=\"value\"/>\n"
      "    </method>\n"
      "    <method name=\"SetValue\">\n"
      "      <arg direction=\"in\" type=\"v\" name=\"value\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  DebugOptionAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~DebugOptionAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusSignature DBusSignature READ dBusSignature)
  virtual QDBusSignature dBusSignature() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QDBusVariant GetValue(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void SetValue(const QDBusVariant& value,
                        const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                            options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.DynamicObject
 */
class VOXIECLIENT_EXPORT DynamicObjectAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.DynamicObject")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.DynamicObject\">\n"
              "    <property access=\"read\" type=\"as\" "
              "name=\"SupportedInterfaces\"/>\n"
              "  </interface>\n"
              "")
 public:
  DynamicObjectAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~DynamicObjectAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QStringList SupportedInterfaces READ supportedInterfaces)
  virtual QStringList supportedInterfaces() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.EventListDataAccessor
 */
class VOXIECLIENT_EXPORT EventListDataAccessorAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.EventListDataAccessor")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.EventListDataAccessor\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <annotation "
      "value=\"de.uni_stuttgart.Voxie.EventListDataAccessorOperations\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "  </interface>\n"
      "")
 public:
  EventListDataAccessorAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~EventListDataAccessorAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface
 * de.uni_stuttgart.Voxie.EventListDataAccessorOperations
 */
class VOXIECLIENT_EXPORT EventListDataAccessorOperationsAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.EventListDataAccessorOperations")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.EventListDataAccessorOperations\">\n"
      "    <property access=\"read\" type=\"t\" name=\"StreamCount\"/>\n"
      "    <method name=\"GetMetadata\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"ret\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetStreamInfo\">\n"
      "      <arg direction=\"in\" type=\"t\" name=\"streamID\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"t\" name=\"eventCount\"/>\n"
      "      <arg direction=\"out\" type=\"x\" name=\"minimumTimestamp\"/>\n"
      "      <arg direction=\"out\" type=\"x\" name=\"maximumTimestamp\"/>\n"
      "      <arg direction=\"out\" type=\"a(s(sus)sa{sv}a{sv})\" "
      "name=\"attributes\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;QString, "
      "std::tuple&lt;QString, quint32, QString&gt;, QString, QMap&lt;QString, "
      "QDBusVariant&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out3\"/>\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"metadata\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName.Out4\"/>\n"
      "    </method>\n"
      "    <method name=\"ReadEvents\">\n"
      "      <arg direction=\"in\" type=\"t\" name=\"streamID\"/>\n"
      "      <arg direction=\"in\" type=\"x\" name=\"firstTimestamp\"/>\n"
      "      <arg direction=\"in\" type=\"x\" name=\"lastTimestamp\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"targetEventOffset\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"targetEventCount\"/>\n"
      "      <arg direction=\"in\" type=\"(so)\" name=\"output\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;QString, QDBusObjectPath&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In5\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In6\"/>\n"
      "      <arg direction=\"out\" type=\"t\" name=\"readEventCount\"/>\n"
      "      <arg direction=\"out\" type=\"x\" name=\"lastReadTimestamp\"/>\n"
      "      <arg direction=\"out\" type=\"s\" name=\"versionString\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  EventListDataAccessorOperationsAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~EventListDataAccessorOperationsAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(qulonglong StreamCount READ streamCount)
  virtual qulonglong streamCount() const = 0;

 public Q_SLOTS:  // METHODS
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      GetMetadata(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                  options) = 0;
  virtual qulonglong GetStreamInfo(
      qulonglong streamID,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options,
      qlonglong& minimumTimestamp, qlonglong& maximumTimestamp,
      VX_IDENTITY_TYPE(
          (QList<std::tuple<QString, std::tuple<QString, quint32, QString>,
                            QString, QMap<QString, QDBusVariant>,
                            QMap<QString, QDBusVariant>>>)) &
          attributes,
      VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & metadata) = 0;
  virtual qulonglong ReadEvents(
      qulonglong streamID, qlonglong firstTimestamp, qlonglong lastTimestamp,
      qulonglong targetEventOffset, qulonglong targetEventCount,
      const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) & output,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options,
      qlonglong& lastReadTimestamp, QString& versionString) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.EventListDataBuffer
 */
class VOXIECLIENT_EXPORT EventListDataBufferAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.EventListDataBuffer")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.EventListDataBuffer\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"t\" name=\"Capacity\"/>\n"
      "    <property access=\"read\" type=\"a(s(sus)sa{sv}a{sv})\" "
      "name=\"Attributes\">\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;QString, "
      "std::tuple&lt;QString, quint32, QString&gt;, QString, QMap&lt;QString, "
      "QDBusVariant&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <method name=\"GetAttributeReadonly\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(t)(x)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64&gt;, std::tuple&lt;qint64&gt;, QMap&lt;QString, "
      "QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetAttributeWritable\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(t)(x)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64&gt;, std::tuple&lt;qint64&gt;, QMap&lt;QString, "
      "QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  EventListDataBufferAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~EventListDataBufferAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE(
      (QList<std::tuple<QString, std::tuple<QString, quint32, QString>, QString,
                        QMap<QString, QDBusVariant>,
                        QMap<QString, QDBusVariant>>>))
                 Attributes READ attributes)
  virtual VX_IDENTITY_TYPE(
      (QList<std::tuple<QString, std::tuple<QString, quint32, QString>, QString,
                        QMap<QString, QDBusVariant>,
                        QMap<QString, QDBusVariant>>>)) attributes() const = 0;

  Q_PROPERTY(qulonglong Capacity READ capacity)
  virtual qulonglong capacity() const = 0;

 public Q_SLOTS:  // METHODS
  virtual VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>, std::tuple<quint64>,
                  std::tuple<qint64>, QMap<QString, QDBusVariant>>))
      GetAttributeReadonly(
          const QString& name,
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>, std::tuple<quint64>,
                  std::tuple<qint64>, QMap<QString, QDBusVariant>>))
      GetAttributeWritable(
          const QDBusObjectPath& update, const QString& name,
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Exporter
 */
class VOXIECLIENT_EXPORT ExporterAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Exporter")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Exporter\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Component\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"a{sv}\" name=\"Filter\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <method name=\"FilterAddExtension\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"filename\"/>\n"
      "      <arg direction=\"out\" type=\"s\" name=\"filenameOut\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"StartExport\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"data\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"fileName\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "    <method name=\"Export\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"data\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"fileName\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ExporterAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ExporterAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) Filter READ filter)
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) filter() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void Export(const QDBusObjectPath& data, const QString& fileName,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) = 0;
  virtual QString FilterAddExtension(
      const QString& filename,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath StartExport(
      const QDBusObjectPath& client, const QDBusObjectPath& data,
      const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Extension
 */
class VOXIECLIENT_EXPORT ExtensionAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Extension")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Extension\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.ComponentContainer\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"ExecutableFilename\"/>\n"
      "  </interface>\n"
      "")
 public:
  ExtensionAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ExtensionAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString ExecutableFilename READ executableFilename)
  virtual QString executableFilename() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ExternalDataUpdate
 */
class VOXIECLIENT_EXPORT ExternalDataUpdateAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ExternalDataUpdate")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.ExternalDataUpdate\">\n"
      "    <property access=\"read\" type=\"o\" name=\"Data\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <method name=\"Finish\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ExternalDataUpdateAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ExternalDataUpdateAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath Data READ data)
  virtual QDBusObjectPath data() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath Finish(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ExternalOperation
 */
class VOXIECLIENT_EXPORT ExternalOperationAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ExternalOperation")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.ExternalOperation\">\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Action\"/>\n"
      "    <property access=\"read\" type=\"b\" name=\"IsCancelled\"/>\n"
      "    <signal name=\"Cancelled\">\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </signal>\n"
      "    <method name=\"ClaimOperation\">\n"
      "      <annotation value=\"1\" "
      "name=\"de.uni_stuttgart.Voxie.ReferenceCountChange\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"SetProgress\">\n"
      "      <arg direction=\"in\" type=\"d\" name=\"progress\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"FinishError\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"message\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ExternalOperationAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ExternalOperationAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString Action READ action)
  virtual QString action() const = 0;

  Q_PROPERTY(bool IsCancelled READ isCancelled)
  virtual bool isCancelled() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void ClaimOperation(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void FinishError(
      const QString& name, const QString& message,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void SetProgress(
      double progress,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
  void Cancelled(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                 options);
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ExternalOperationExport
 */
class VOXIECLIENT_EXPORT ExternalOperationExportAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.ExternalOperationExport")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.ExternalOperationExport\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.ExternalOperation\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"Data\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"s\" name=\"Filename\"/>\n"
      "    <method name=\"Finish\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ExternalOperationExportAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~ExternalOperationExportAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath Data READ data)
  virtual QDBusObjectPath data() const = 0;

  Q_PROPERTY(QString Filename READ filename)
  virtual QString filename() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void Finish(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ExternalOperationImport
 */
class VOXIECLIENT_EXPORT ExternalOperationImportAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.ExternalOperationImport")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.ExternalOperationImport\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.ExternalOperation\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Filename\"/>\n"
      "    <property access=\"read\" type=\"a{sv}\" name=\"Properties\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <method name=\"Finish\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"data\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"version\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ExternalOperationImportAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~ExternalOperationImportAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString Filename READ filename)
  virtual QString filename() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 Properties READ properties)
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      properties() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void Finish(const QDBusObjectPath& data,
                      const QDBusObjectPath& version,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ExternalOperationRunFilter
 */
class VOXIECLIENT_EXPORT ExternalOperationRunFilterAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.ExternalOperationRunFilter")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.ExternalOperationRunFilter\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.ExternalOperation\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"FilterNode\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.FilterNode\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"FilterObject\">\n"
      "      <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.FilterObject\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"b\" "
      "name=\"IsAutomaticFilterRun\"/>\n"
      "    <property access=\"read\" type=\"a{oa{sv}}\" name=\"Parameters\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QDBusObjectPath, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <method name=\"Finish\">\n"
      "      <arg direction=\"in\" type=\"a{oa{sv}}\" name=\"result\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((QMap&lt;QDBusObjectPath, QMap&lt;QString, "
      "QDBusVariant&gt;&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ExternalOperationRunFilterAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~ExternalOperationRunFilterAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath FilterNode READ filterNode)
  virtual QDBusObjectPath filterNode() const = 0;

  Q_PROPERTY(QDBusObjectPath FilterObject READ filterObject)
  virtual QDBusObjectPath filterObject() const = 0;

  Q_PROPERTY(bool IsAutomaticFilterRun READ isAutomaticFilterRun)
  virtual bool isAutomaticFilterRun() const = 0;

  Q_PROPERTY(
      VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))
          Parameters READ parameters)
  virtual VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))
      parameters() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void Finish(const VX_IDENTITY_TYPE((
                          QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>)) &
                          result,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface
 * de.uni_stuttgart.Voxie.ExternalOperationRunSegmentationStep
 */
class VOXIECLIENT_EXPORT ExternalOperationRunSegmentationStepAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.ExternalOperationRunSegmentationStep")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.ExternalOperationRunSegmentationStep\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.ExternalOperation\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" "
      "name=\"SegmentationStepNode\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Node\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"InputNode\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.DataNode\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"LabelData\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.DataNode\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"ContainerData\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.DataNode\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"a{oa{sv}}\" name=\"Parameters\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QDBusObjectPath, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <method name=\"Finish\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"labelDataVersion\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ExternalOperationRunSegmentationStepAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~ExternalOperationRunSegmentationStepAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath ContainerData READ containerData)
  virtual QDBusObjectPath containerData() const = 0;

  Q_PROPERTY(QDBusObjectPath InputNode READ inputNode)
  virtual QDBusObjectPath inputNode() const = 0;

  Q_PROPERTY(QDBusObjectPath LabelData READ labelData)
  virtual QDBusObjectPath labelData() const = 0;

  Q_PROPERTY(
      VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))
          Parameters READ parameters)
  virtual VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))
      parameters() const = 0;

  Q_PROPERTY(QDBusObjectPath SegmentationStepNode READ segmentationStepNode)
  virtual QDBusObjectPath segmentationStepNode() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void Finish(const QDBusObjectPath& labelDataVersion,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ExternalTask
 */
class VOXIECLIENT_EXPORT ExternalTaskAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ExternalTask")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.ExternalTask\">\n"
      "    <property access=\"read\" type=\"o\" name=\"Task\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Task\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <method name=\"SetState\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"state\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <property access=\"readwrite\" type=\"b\" "
      "name=\"FinishAutomatically\"/>\n"
      "    <method name=\"SetDisplayName\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"displayName\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"SetProgress\">\n"
      "      <arg direction=\"in\" type=\"d\" name=\"progress\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"SetSubTasks\">\n"
      "      <arg direction=\"in\" type=\"a(od)\" name=\"subtasks\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;QDBusObjectPath, "
      "double&gt;&gt;))&amp;\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ExternalTaskAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ExternalTaskAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(bool FinishAutomatically READ finishAutomatically WRITE
                 setFinishAutomatically)
  virtual bool finishAutomatically() const = 0;
  virtual void setFinishAutomatically(bool value) = 0;

  Q_PROPERTY(QDBusObjectPath Task READ task)
  virtual QDBusObjectPath task() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void SetDisplayName(
      const QString& displayName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void SetProgress(
      double progress,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void SetState(const QString& state,
                        const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                            options) = 0;
  virtual void SetSubTasks(
      const VX_IDENTITY_TYPE((QList<std::tuple<QDBusObjectPath, double>>)) &
          subtasks,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.FilterNode
 */
class VOXIECLIENT_EXPORT FilterNodeAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.FilterNode")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.FilterNode\">\n"
              "    <method name=\"RunFilter\">\n"
              "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
              "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
              "      <annotation value=\"const "
              "VX_IDENTITY_TYPE((QMap&lt;QString, QDBusVariant&gt;))&amp;\" "
              "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
              "      <arg direction=\"out\" type=\"o\"/>\n"
              "    </method>\n"
              "  </interface>\n"
              "")
 public:
  FilterNodeAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~FilterNodeAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath RunFilter(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.FilterObject
 */
class VOXIECLIENT_EXPORT FilterObjectAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.FilterObject")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.FilterObject\">\n"
      "    <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "    <property access=\"read\" type=\"b\" name=\"PreviewActive\"/>\n"
      "    <property access=\"read\" type=\"(dddd)\" name=\"PreviewPoint\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double, double&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  FilterObjectAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~FilterObjectAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(bool PreviewActive READ previewActive)
  virtual bool previewActive() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double, double>))
                 PreviewPoint READ previewPoint)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double, double, double>))
      previewPoint() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.GeometricPrimitiveData
 */
class VOXIECLIENT_EXPORT GeometricPrimitiveDataAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.GeometricPrimitiveData")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.GeometricPrimitiveData\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <method name=\"AddPrimitive\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"primitiveType\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"displayName\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"primitiveValues\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In4\"/>\n"
      "      <arg direction=\"out\" type=\"t\" name=\"resultId\"/>\n"
      "    </method>\n"
      "    <method name=\"GetPrimitives\">\n"
      "      <arg direction=\"in\" type=\"t\" name=\"firstID\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"lastID\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"a(tosa{sv}a{sv})\" "
      "name=\"result\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;quint64, "
      "QDBusObjectPath, QString, QMap&lt;QString, QDBusVariant&gt;, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  GeometricPrimitiveDataAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~GeometricPrimitiveDataAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
  virtual qulonglong AddPrimitive(
      const QDBusObjectPath& update, const QDBusObjectPath& primitiveType,
      const QString& displayName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & primitiveValues,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE((QList<std::tuple<quint64, QDBusObjectPath, QString,
                                             QMap<QString, QDBusVariant>,
                                             QMap<QString, QDBusVariant>>>))
      GetPrimitives(qulonglong firstID, qulonglong lastID,
                    const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                        options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.GeometricPrimitiveType
 */
class VOXIECLIENT_EXPORT GeometricPrimitiveTypeAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.GeometricPrimitiveType")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.GeometricPrimitiveType\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Component\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"DisplayName\"/>\n"
      "    <property access=\"read\" type=\"a{sg}\" "
      "name=\"ValueDBusSignatures\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusSignature&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  GeometricPrimitiveTypeAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~GeometricPrimitiveTypeAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString DisplayName READ displayName)
  virtual QString displayName() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusSignature>))
                 ValueDBusSignatures READ valueDBusSignatures)
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusSignature>))
      valueDBusSignatures() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Gui
 */
class VOXIECLIENT_EXPORT GuiAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Gui")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Gui\">\n"
      "    <property access=\"read\" type=\"o\" name=\"ActiveVisualizer\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.VisualizerNode\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"ao\" name=\"SelectedNodes\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Node\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"ao\" name=\"SelectedObjects\">\n"
      "      <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Object\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"s\" name=\"MdiViewMode\"/>\n"
      "    <method name=\"RaiseWindow\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetMainWindowID\">\n"
      "      <arg direction=\"out\" type=\"t\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  GuiAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~GuiAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath ActiveVisualizer READ activeVisualizer)
  virtual QDBusObjectPath activeVisualizer() const = 0;

  Q_PROPERTY(QString MdiViewMode READ mdiViewMode WRITE setMdiViewMode)
  virtual QString mdiViewMode() const = 0;
  virtual void setMdiViewMode(const QString& value) = 0;

  Q_PROPERTY(QList<QDBusObjectPath> SelectedNodes READ selectedNodes WRITE
                 setSelectedNodes)
  virtual QList<QDBusObjectPath> selectedNodes() const = 0;
  virtual void setSelectedNodes(const QList<QDBusObjectPath>& value) = 0;

  Q_PROPERTY(QList<QDBusObjectPath> SelectedObjects READ selectedObjects)
  virtual QList<QDBusObjectPath> selectedObjects() const = 0;

 public Q_SLOTS:  // METHODS
  virtual qulonglong GetMainWindowID(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void RaiseWindow(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ImageDataPixel
 */
class VOXIECLIENT_EXPORT ImageDataPixelAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ImageDataPixel")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.ImageDataPixel\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"(tt)\" name=\"Size\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;quint64, "
      "quint64&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"t\" name=\"ComponentCount\"/>\n"
      "    <property access=\"read\" type=\"(sus)\" name=\"DataType\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;QString, "
      "quint32, QString&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <method name=\"GetDataReadonly\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(ttt)(xxx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64, quint64&gt;, std::tuple&lt;qint64, "
      "qint64, qint64&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetDataWritable\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(ttt)(xxx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64, quint64&gt;, std::tuple&lt;qint64, "
      "qint64, qint64&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ImageDataPixelAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ImageDataPixelAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(qulonglong ComponentCount READ componentCount)
  virtual qulonglong componentCount() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
                 DataType READ dataType)
  virtual VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
      dataType() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) Size READ size)
  virtual VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) size() const = 0;

 public Q_SLOTS:  // METHODS
  virtual VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                       std::tuple<QString, quint32, QString>,
                                       std::tuple<quint64, quint64, quint64>,
                                       std::tuple<qint64, qint64, qint64>,
                                       QMap<QString, QDBusVariant>>))
      GetDataReadonly(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) = 0;
  virtual VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                       std::tuple<QString, quint32, QString>,
                                       std::tuple<quint64, quint64, quint64>,
                                       std::tuple<qint64, qint64, qint64>,
                                       QMap<QString, QDBusVariant>>))
      GetDataWritable(const QDBusObjectPath& update,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Importer
 */
class VOXIECLIENT_EXPORT ImporterAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Importer")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Importer\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Component\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"a{sv}\" name=\"Filter\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <method name=\"StartImport\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"fileName\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "    <method name=\"ListProperties\">\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ImporterAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ImporterAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) Filter READ filter)
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) filter() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QList<QDBusObjectPath> ListProperties(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath StartImport(
      const QDBusObjectPath& client, const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ImporterProperty
 */
class VOXIECLIENT_EXPORT ImporterPropertyAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ImporterProperty")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.ImporterProperty\">\n"
              "    <annotation value=\"de.uni_stuttgart.Voxie.Property\" "
              "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
              "  </interface>\n"
              "")
 public:
  ImporterPropertyAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ImporterPropertyAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Instance
 */
class VOXIECLIENT_EXPORT InstanceAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Instance")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Instance\">\n"
      "    <property access=\"read\" type=\"a{sv}\" "
      "name=\"VersionInformation\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"Gui\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Gui\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"Utilities\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Utilities\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"Components\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.ComponentContainer\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <method name=\"ListPrototypes\">\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetComponent\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"componentType\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "    <method name=\"ListPlugins\">\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetPluginByName\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"ListNodes\">\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"ListObjects\">\n"
      "      <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateImage\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"size\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"componentCount\"/>\n"
      "      <arg direction=\"in\" type=\"(sus)\" name=\"dataType\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;QString, quint32, QString&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In4\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateEventListDataBuffer\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"capacity\"/>\n"
      "      <arg direction=\"in\" type=\"a(s(sus)sa{sv}a{sv})\" "
      "name=\"attributes\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;QString, "
      "std::tuple&lt;QString, quint32, QString&gt;, QString, QMap&lt;QString, "
      "QDBusVariant&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateEventListDataAccessor\">\n"
      "      <arg direction=\"out\" type=\"o\" name=\"result\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"(so)\" name=\"backend\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;QString, QDBusObjectPath&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateSurfaceDataTriangleIndexed\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"triangleCount\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"vertexCount\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"triangleSource\"/>\n"
      "      <arg direction=\"in\" type=\"b\" name=\"triangleWritable\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In5\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateVolumeDataVoxel\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"(ttt)\" name=\"arrayShape\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"(sus)\" name=\"dataType\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;QString, quint32, QString&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"in\" type=\"(ddd)\" name=\"volumeOrigin\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "      <arg direction=\"in\" type=\"(ddd)\" name=\"gridSpacing\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In4\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In5\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateTomographyRawData2DRegular\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"imageShape\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"imageCount\"/>\n"
      "      <arg direction=\"in\" type=\"(sus)\" name=\"dataType\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;QString, quint32, QString&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In4\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateTableData\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"a(sosa{sv}a{sv})\" "
      "name=\"columns\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;QString, QDBusObjectPath, "
      "QString, QMap&lt;QString, QDBusVariant&gt;, QMap&lt;QString, "
      "QDBusVariant&gt;&gt;&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateContainerData\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateSeriesDimension\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"displayName\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"type\"/>\n"
      "      <arg direction=\"in\" type=\"v\" name=\"entries\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In5\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateVolumeSeriesData\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"ao\" name=\"dimensions\"/>\n"
      "      <arg direction=\"in\" type=\"(ddd)\" name=\"volumeOrigin\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"in\" type=\"(ddd)\" name=\"volumeSize\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In4\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateGeometricPrimitiveData\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"CreateTomographyRawData2DAccessor\">\n"
      "      <arg direction=\"out\" type=\"o\" name=\"result\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"(so)\" name=\"backend\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;QString, QDBusObjectPath&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "    <method name=\"Quit\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"OpenFile\">\n"
      "      <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"file\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"Import\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"fileName\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "    <method name=\"RunAllFilters\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"client\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "    </method>\n"
      "    <method name=\"GetDebugOption\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"ListDebugOptions\">\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  InstanceAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~InstanceAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath Components READ components)
  virtual QDBusObjectPath components() const = 0;

  Q_PROPERTY(QDBusObjectPath Gui READ gui)
  virtual QDBusObjectPath gui() const = 0;

  Q_PROPERTY(QDBusObjectPath Utilities READ utilities)
  virtual QDBusObjectPath utilities() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 VersionInformation READ versionInformation)
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      versionInformation() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath CreateContainerData(
      const QDBusObjectPath& client, const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateEventListDataAccessor(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) & backend,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateEventListDataBuffer(
      const QDBusObjectPath& client, qulonglong capacity,
      const VX_IDENTITY_TYPE(
          (QList<std::tuple<QString, std::tuple<QString, quint32, QString>,
                            QString, QMap<QString, QDBusVariant>,
                            QMap<QString, QDBusVariant>>>)) &
          attributes,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateGeometricPrimitiveData(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateImage(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & size,
      qulonglong componentCount,
      const VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>)) &
          dataType,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateSeriesDimension(
      const QDBusObjectPath& client, const QString& name,
      const QString& displayName, const QDBusObjectPath& type,
      const QDBusVariant& entries,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateSurfaceDataTriangleIndexed(
      const QDBusObjectPath& client, qulonglong triangleCount,
      qulonglong vertexCount, const QDBusObjectPath& triangleSource,
      bool triangleWritable,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateTableData(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE(
          (QList<std::tuple<QString, QDBusObjectPath, QString,
                            QMap<QString, QDBusVariant>,
                            QMap<QString, QDBusVariant>>>)) &
          columns,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateTomographyRawData2DAccessor(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) & backend,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateTomographyRawData2DRegular(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & imageShape,
      qulonglong imageCount,
      const VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>)) &
          dataType,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateVolumeDataVoxel(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>)) &
          arrayShape,
      const VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>)) &
          dataType,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double>)) &
          volumeOrigin,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double>)) &
          gridSpacing,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath CreateVolumeSeriesData(
      const QDBusObjectPath& client, const QList<QDBusObjectPath>& dimensions,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double>)) &
          volumeOrigin,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double>)) & volumeSize,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath GetComponent(
      const QString& componentType, const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath GetDebugOption(
      const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath GetPluginByName(
      const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath Import(
      const QDBusObjectPath& client, const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QList<QDBusObjectPath> ListDebugOptions(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QList<QDBusObjectPath> ListNodes(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual Q_DECL_DEPRECATED QList<QDBusObjectPath> ListObjects(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QList<QDBusObjectPath> ListPlugins(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QList<QDBusObjectPath> ListPrototypes(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual Q_DECL_DEPRECATED QDBusObjectPath
  OpenFile(const QString& file,
           const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void Quit(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                    options) = 0;
  virtual QDBusObjectPath RunAllFilters(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Node
 */
class VOXIECLIENT_EXPORT NodeAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Node")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Node\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.DynamicObject\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"Prototype\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.NodePrototype\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"s\" name=\"DisplayName\"/>\n"
      "    <property access=\"readwrite\" type=\"(bs)\" "
      "name=\"ManualDisplayName\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;bool, "
      "QString&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"o\" "
      "name=\"ParentNodeGroup\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Node\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"as\" "
      "name=\"ExportedProperties\"/>\n"
      "    <property access=\"readwrite\" type=\"(dd)\" "
      "name=\"GraphPosition\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"s\" "
      "name=\"AutomaticDisplayName\"/>\n"
      "    <signal name=\"PropertyChanged\">\n"
      "      <arg direction=\"out\" type=\"s\" name=\"propertyName\"/>\n"
      "      <arg direction=\"out\" type=\"v\" name=\"value\"/>\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out2\"/>\n"
      "    </signal>\n"
      "    <method name=\"GetProperty\">\n"
      "      <arg direction=\"out\" type=\"v\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"key\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"SetProperty\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"key\"/>\n"
      "      <arg direction=\"in\" type=\"v\" name=\"value\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "    <method name=\"SetProperties\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"values\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"Destroy\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  NodeAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~NodeAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString AutomaticDisplayName READ automaticDisplayName)
  virtual QString automaticDisplayName() const = 0;

  Q_PROPERTY(QString DisplayName READ displayName)
  virtual QString displayName() const = 0;

  Q_PROPERTY(QStringList ExportedProperties READ exportedProperties WRITE
                 setExportedProperties)
  virtual QStringList exportedProperties() const = 0;
  virtual void setExportedProperties(const QStringList& value) = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 GraphPosition READ graphPosition WRITE setGraphPosition)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double>))
      graphPosition() const = 0;
  virtual void setGraphPosition(VX_IDENTITY_TYPE((std::tuple<double, double>))
                                    value) = 0;

  Q_PROPERTY(
      VX_IDENTITY_TYPE((std::tuple<bool, QString>))
          ManualDisplayName READ manualDisplayName WRITE setManualDisplayName)
  virtual VX_IDENTITY_TYPE((std::tuple<bool, QString>))
      manualDisplayName() const = 0;
  virtual void setManualDisplayName(
      VX_IDENTITY_TYPE((std::tuple<bool, QString>)) value) = 0;

  Q_PROPERTY(QDBusObjectPath ParentNodeGroup READ parentNodeGroup WRITE
                 setParentNodeGroup)
  virtual QDBusObjectPath parentNodeGroup() const = 0;
  virtual void setParentNodeGroup(const QDBusObjectPath& value) = 0;

  Q_PROPERTY(QDBusObjectPath Prototype READ prototype)
  virtual QDBusObjectPath prototype() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void Destroy(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                       options) = 0;
  virtual QDBusVariant GetProperty(
      const QString& key,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void SetProperties(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & values,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void SetProperty(
      const QString& key, const QDBusVariant& value,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
  void PropertyChanged(const QString& propertyName, const QDBusVariant& value,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options);
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.NodeProperty
 */
class VOXIECLIENT_EXPORT NodePropertyAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.NodeProperty")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.NodeProperty\">\n"
              "    <annotation value=\"de.uni_stuttgart.Voxie.Property\" "
              "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
              "  </interface>\n"
              "")
 public:
  NodePropertyAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~NodePropertyAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.NodePrototype
 */
class VOXIECLIENT_EXPORT NodePrototypeAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.NodePrototype")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.NodePrototype\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Component\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"NodeKind\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"DisplayName\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Description\"/>\n"
      "    <method name=\"CreateNode\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"properties\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"ListProperties\">\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetPropertyByName\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <property access=\"read\" type=\"as\" "
      "name=\"SupportedDataDBusInterfaces\"/>\n"
      "  </interface>\n"
      "")
 public:
  NodePrototypeAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~NodePrototypeAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString Description READ description)
  virtual QString description() const = 0;

  Q_PROPERTY(QString DisplayName READ displayName)
  virtual QString displayName() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

  Q_PROPERTY(QString NodeKind READ nodeKind)
  virtual QString nodeKind() const = 0;

  Q_PROPERTY(
      QStringList SupportedDataDBusInterfaces READ supportedDataDBusInterfaces)
  virtual QStringList supportedDataDBusInterfaces() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath CreateNode(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & properties,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath GetPropertyByName(
      const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QList<QDBusObjectPath> ListProperties(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Object
 */
class VOXIECLIENT_EXPORT ObjectAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Object")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Object\">\n"
      "    <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.DynamicObject\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"Prototype\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.ObjectPrototype\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"s\" name=\"DisplayName\"/>\n"
      "    <property access=\"readwrite\" type=\"(bs)\" "
      "name=\"ManualDisplayName\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;bool, "
      "QString&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"o\" "
      "name=\"ParentNodeGroup\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Node\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"as\" "
      "name=\"ExportedProperties\"/>\n"
      "    <property access=\"readwrite\" type=\"(dd)\" "
      "name=\"GraphPosition\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"s\" "
      "name=\"AutomaticDisplayName\"/>\n"
      "    <signal name=\"PropertyChanged\">\n"
      "      <arg direction=\"out\" type=\"s\" name=\"propertyName\"/>\n"
      "      <arg direction=\"out\" type=\"v\" name=\"value\"/>\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out2\"/>\n"
      "    </signal>\n"
      "    <method name=\"GetProperty\">\n"
      "      <arg direction=\"out\" type=\"v\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"key\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"SetProperty\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"key\"/>\n"
      "      <arg direction=\"in\" type=\"v\" name=\"value\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "    </method>\n"
      "    <method name=\"SetProperties\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"values\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"Destroy\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ObjectAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ObjectAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString AutomaticDisplayName READ automaticDisplayName)
  virtual QString automaticDisplayName() const = 0;

  Q_PROPERTY(QString DisplayName READ displayName)
  virtual QString displayName() const = 0;

  Q_PROPERTY(QStringList ExportedProperties READ exportedProperties WRITE
                 setExportedProperties)
  virtual QStringList exportedProperties() const = 0;
  virtual void setExportedProperties(const QStringList& value) = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 GraphPosition READ graphPosition WRITE setGraphPosition)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double>))
      graphPosition() const = 0;
  virtual void setGraphPosition(VX_IDENTITY_TYPE((std::tuple<double, double>))
                                    value) = 0;

  Q_PROPERTY(
      VX_IDENTITY_TYPE((std::tuple<bool, QString>))
          ManualDisplayName READ manualDisplayName WRITE setManualDisplayName)
  virtual VX_IDENTITY_TYPE((std::tuple<bool, QString>))
      manualDisplayName() const = 0;
  virtual void setManualDisplayName(
      VX_IDENTITY_TYPE((std::tuple<bool, QString>)) value) = 0;

  Q_PROPERTY(QDBusObjectPath ParentNodeGroup READ parentNodeGroup WRITE
                 setParentNodeGroup)
  virtual QDBusObjectPath parentNodeGroup() const = 0;
  virtual void setParentNodeGroup(const QDBusObjectPath& value) = 0;

  Q_PROPERTY(QDBusObjectPath Prototype READ prototype)
  virtual QDBusObjectPath prototype() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void Destroy(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                       options) = 0;
  virtual QDBusVariant GetProperty(
      const QString& key,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void SetProperties(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & values,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual void SetProperty(
      const QString& key, const QDBusVariant& value,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
  void PropertyChanged(const QString& propertyName, const QDBusVariant& value,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options);
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ObjectProperty
 */
class VOXIECLIENT_EXPORT ObjectPropertyAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ObjectProperty")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.ObjectProperty\">\n"
              "    <annotation value=\"true\" "
              "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
              "    <annotation value=\"de.uni_stuttgart.Voxie.Property\" "
              "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
              "  </interface>\n"
              "")
 public:
  ObjectPropertyAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ObjectPropertyAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.ObjectPrototype
 */
class VOXIECLIENT_EXPORT ObjectPrototypeAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.ObjectPrototype")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.ObjectPrototype\">\n"
      "    <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Component\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"ObjectKind\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"DisplayName\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Description\"/>\n"
      "    <method name=\"CreateObject\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"properties\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <method name=\"ListObjectProperties\">\n"
      "      <arg direction=\"out\" type=\"ao\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetObjectPropertyByName\">\n"
      "      <arg direction=\"out\" type=\"o\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  ObjectPrototypeAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~ObjectPrototypeAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString Description READ description)
  virtual QString description() const = 0;

  Q_PROPERTY(QString DisplayName READ displayName)
  virtual QString displayName() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

  Q_PROPERTY(QString ObjectKind READ objectKind)
  virtual QString objectKind() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QDBusObjectPath CreateObject(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & properties,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath GetObjectPropertyByName(
      const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QList<QDBusObjectPath> ListObjectProperties(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Operation
 */
class VOXIECLIENT_EXPORT OperationAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Operation")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Operation\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Task\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"b\" name=\"IsFinished\"/>\n"
      "    <property access=\"read\" type=\"b\" name=\"IsCancelled\"/>\n"
      "    <signal name=\"Finished\">\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </signal>\n"
      "    <method name=\"WaitFor\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetSucceeded\">\n"
      "      <arg direction=\"out\" type=\"b\"/>\n"
      "    </method>\n"
      "    <method name=\"GetError\">\n"
      "      <arg direction=\"out\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"out\" type=\"s\" name=\"message\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  OperationAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~OperationAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(bool IsCancelled READ isCancelled)
  virtual bool isCancelled() const = 0;

  Q_PROPERTY(bool IsFinished READ isFinished)
  virtual bool isFinished() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QString GetError(QString& message) = 0;
  virtual bool GetSucceeded() = 0;
  virtual void WaitFor(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                       options) = 0;
 Q_SIGNALS:  // SIGNALS
  void Finished(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                options);
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.OperationResult
 */
class VOXIECLIENT_EXPORT OperationResultAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.OperationResult")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.OperationResult\">\n"
              "    <property access=\"read\" type=\"o\" name=\"Operation\">\n"
              "      <annotation value=\"de.uni_stuttgart.Voxie.Operation\" "
              "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
              "    </property>\n"
              "  </interface>\n"
              "")
 public:
  OperationResultAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~OperationResultAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath Operation READ operation)
  virtual QDBusObjectPath operation() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.OperationResultImport
 */
class VOXIECLIENT_EXPORT OperationResultImportAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.OperationResultImport")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.OperationResultImport\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.OperationResult\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.DynamicObject\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"Data\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"o\" name=\"DataVersion\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.DataVersion\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  OperationResultImportAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~OperationResultImportAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath Data READ data)
  virtual QDBusObjectPath data() const = 0;

  Q_PROPERTY(QDBusObjectPath DataVersion READ dataVersion)
  virtual QDBusObjectPath dataVersion() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.OperationResultImportNode
 */
class VOXIECLIENT_EXPORT OperationResultImportNodeAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.OperationResultImportNode")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.OperationResultImportNode\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.OperationResultImport\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"DataNode\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.DataNode\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  OperationResultImportNodeAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~OperationResultImportNodeAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath DataNode READ dataNode)
  virtual QDBusObjectPath dataNode() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface
 * de.uni_stuttgart.Voxie.OperationResultImportObject
 */
class VOXIECLIENT_EXPORT OperationResultImportObjectAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.OperationResultImportObject")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.OperationResultImportObject\">\n"
      "    <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.OperationResultImport\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"DataObject\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.DataObject\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  OperationResultImportObjectAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~OperationResultImportObjectAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusObjectPath DataObject READ dataObject)
  virtual QDBusObjectPath dataObject() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Plugin
 */
class VOXIECLIENT_EXPORT PluginAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Plugin")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Plugin\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.ComponentContainer\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"b\" name=\"IsCorePlugin\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "  </interface>\n"
      "")
 public:
  PluginAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~PluginAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(bool IsCorePlugin READ isCorePlugin)
  virtual bool isCorePlugin() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Property
 */
class VOXIECLIENT_EXPORT PropertyAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Property")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Property\">\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"DisplayName\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"Type\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.PropertyType\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"v\" name=\"PropertyDefinition\">\n"
      "      <annotation value=\"true\" "
      "name=\"de.uni_stuttgart.Voxie.IsJSONAsDBusVariant\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  PropertyAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~PropertyAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString DisplayName READ displayName)
  virtual QString displayName() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

  Q_PROPERTY(QDBusVariant PropertyDefinition READ propertyDefinition)
  virtual QDBusVariant propertyDefinition() const = 0;

  Q_PROPERTY(QDBusObjectPath Type READ type)
  virtual QDBusObjectPath type() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.PropertyType
 */
class VOXIECLIENT_EXPORT PropertyTypeAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.PropertyType")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.PropertyType\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Component\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"DisplayName\"/>\n"
      "    <property access=\"read\" type=\"v\" name=\"DefaultValue\"/>\n"
      "    <property access=\"read\" type=\"g\" name=\"DBusSignature\"/>\n"
      "  </interface>\n"
      "")
 public:
  PropertyTypeAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~PropertyTypeAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QDBusSignature DBusSignature READ dBusSignature)
  virtual QDBusSignature dBusSignature() const = 0;

  Q_PROPERTY(QDBusVariant DefaultValue READ defaultValue)
  virtual QDBusVariant defaultValue() const = 0;

  Q_PROPERTY(QString DisplayName READ displayName)
  virtual QString displayName() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.SeriesData
 */
class VOXIECLIENT_EXPORT SeriesDataAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.SeriesData")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.SeriesData\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"ao\" name=\"Dimensions\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.SeriesDimension\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"t\" name=\"DimensionCount\"/>\n"
      "    <method name=\"ListKeys\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"aat\" name=\"keys\"/>\n"
      "      <annotation value=\"QList&lt;QList&lt;quint64&gt;&gt;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"LookupEntry\">\n"
      "      <arg direction=\"in\" type=\"at\" name=\"key\"/>\n"
      "      <annotation value=\"const QList&lt;quint64&gt;&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"o\" name=\"data\"/>\n"
      "    </method>\n"
      "    <method name=\"AddEntry\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"at\" name=\"key\"/>\n"
      "      <annotation value=\"const QList&lt;quint64&gt;&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"value\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  SeriesDataAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~SeriesDataAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(qulonglong DimensionCount READ dimensionCount)
  virtual qulonglong dimensionCount() const = 0;

  Q_PROPERTY(QList<QDBusObjectPath> Dimensions READ dimensions)
  virtual QList<QDBusObjectPath> dimensions() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void AddEntry(const QDBusObjectPath& update,
                        const QList<quint64>& key, const QDBusObjectPath& value,
                        const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                            options) = 0;
  virtual QList<QList<quint64>> ListKeys(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusObjectPath LookupEntry(
      const QList<quint64>& key,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.SeriesDimension
 */
class VOXIECLIENT_EXPORT SeriesDimensionAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.SeriesDimension")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.SeriesDimension\">\n"
      "    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
      "    <property access=\"read\" type=\"s\" name=\"DisplayName\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"Type\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.PropertyType\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"t\" name=\"Length\"/>\n"
      "    <method name=\"ListEntries\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"v\" name=\"entries\"/>\n"
      "    </method>\n"
      "    <method name=\"GetEntryValue\">\n"
      "      <arg direction=\"in\" type=\"t\" name=\"entryKey\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"v\" name=\"entryValue\"/>\n"
      "    </method>\n"
      "    <method name=\"LookupEntryByValue\">\n"
      "      <arg direction=\"in\" type=\"v\" name=\"entryValue\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"t\" name=\"entryKey\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  SeriesDimensionAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~SeriesDimensionAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString DisplayName READ displayName)
  virtual QString displayName() const = 0;

  Q_PROPERTY(qulonglong Length READ length)
  virtual qulonglong length() const = 0;

  Q_PROPERTY(QString Name READ name)
  virtual QString name() const = 0;

  Q_PROPERTY(QDBusObjectPath Type READ type)
  virtual QDBusObjectPath type() const = 0;

 public Q_SLOTS:  // METHODS
  virtual QDBusVariant GetEntryValue(
      qulonglong entryKey,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QDBusVariant ListEntries(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual qulonglong LookupEntryByValue(
      const QDBusVariant& entryValue,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.SurfaceData
 */
class VOXIECLIENT_EXPORT SurfaceDataAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.SurfaceData")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.SurfaceData\">\n"
              "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
              "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
              "    <property access=\"read\" type=\"a(sst(sus)sa{sv}a{sv})\" "
              "name=\"Attributes\">\n"
              "      <annotation "
              "value=\"VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;QString, "
              "QString, quint64, std::tuple&lt;QString, quint32, QString&gt;, "
              "QString, QMap&lt;QString, QDBusVariant&gt;, QMap&lt;QString, "
              "QDBusVariant&gt;&gt;&gt;))\" "
              "name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
              "    </property>\n"
              "  </interface>\n"
              "")
 public:
  SurfaceDataAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~SurfaceDataAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE(
      (QList<std::tuple<
           QString, QString, quint64, std::tuple<QString, quint32, QString>,
           QString, QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>>))
                 Attributes READ attributes)
  virtual VX_IDENTITY_TYPE(
      (QList<std::tuple<
           QString, QString, quint64, std::tuple<QString, quint32, QString>,
           QString, QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>>))
      attributes() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.SurfaceDataTriangleIndexed
 */
class VOXIECLIENT_EXPORT SurfaceDataTriangleIndexedAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.SurfaceDataTriangleIndexed")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.SurfaceDataTriangleIndexed\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.SurfaceData\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"t\" name=\"TriangleCount\"/>\n"
      "    <property access=\"read\" type=\"t\" name=\"VertexCount\"/>\n"
      "    <property access=\"read\" type=\"b\" name=\"TrianglesWritable\"/>\n"
      "    <method name=\"GetTrianglesReadonly\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(tt)(xx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64&gt;, std::tuple&lt;qint64, qint64&gt;, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetVerticesReadonly\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(tt)(xx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64&gt;, std::tuple&lt;qint64, qint64&gt;, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetTrianglesWritable\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(tt)(xx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64&gt;, std::tuple&lt;qint64, qint64&gt;, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetVerticesWritable\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(tt)(xx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64&gt;, std::tuple&lt;qint64, qint64&gt;, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetAttributeReadonly\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(tt)(xx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64&gt;, std::tuple&lt;qint64, qint64&gt;, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetAttributeWritable\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(tt)(xx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64&gt;, std::tuple&lt;qint64, qint64&gt;, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  SurfaceDataTriangleIndexedAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~SurfaceDataTriangleIndexedAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(qulonglong TriangleCount READ triangleCount)
  virtual qulonglong triangleCount() const = 0;

  Q_PROPERTY(bool TrianglesWritable READ trianglesWritable)
  virtual bool trianglesWritable() const = 0;

  Q_PROPERTY(qulonglong VertexCount READ vertexCount)
  virtual qulonglong vertexCount() const = 0;

 public Q_SLOTS:  // METHODS
  virtual VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))
      GetAttributeReadonly(
          const QString& name,
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))
      GetAttributeWritable(
          const QDBusObjectPath& update, const QString& name,
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))
      GetTrianglesReadonly(
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))
      GetTrianglesWritable(
          const QDBusObjectPath& update,
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))
      GetVerticesReadonly(
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))
      GetVerticesWritable(
          const QDBusObjectPath& update,
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.TableData
 */
class VOXIECLIENT_EXPORT TableDataAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.TableData")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.TableData\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"a(sosa{sv}a{sv})\" "
      "name=\"Columns\">\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;QString, "
      "QDBusObjectPath, QString, QMap&lt;QString, QDBusVariant&gt;, "
      "QMap&lt;QString, QDBusVariant&gt;&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"t\" name=\"RowCount\"/>\n"
      "    <method name=\"GetRows\">\n"
      "      <arg direction=\"in\" type=\"t\" name=\"firstRowID\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"lastRowID\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"a(tav)\" name=\"data\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;quint64, "
      "QList&lt;QDBusVariant&gt;&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"AddRow\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"av\" name=\"data\"/>\n"
      "      <annotation value=\"const QList&lt;QDBusVariant&gt;&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"t\" name=\"rowID\"/>\n"
      "    </method>\n"
      "    <method name=\"RemoveRow\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"rowID\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"b\" name=\"result\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  TableDataAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~TableDataAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE(
      (QList<std::tuple<QString, QDBusObjectPath, QString,
                        QMap<QString, QDBusVariant>,
                        QMap<QString, QDBusVariant>>>)) Columns READ columns)
  virtual VX_IDENTITY_TYPE((QList<std::tuple<QString, QDBusObjectPath, QString,
                                             QMap<QString, QDBusVariant>,
                                             QMap<QString, QDBusVariant>>>))
      columns() const = 0;

  Q_PROPERTY(qulonglong RowCount READ rowCount)
  virtual qulonglong rowCount() const = 0;

 public Q_SLOTS:  // METHODS
  virtual qulonglong AddRow(
      const QDBusObjectPath& update, const QVariantList& data,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE((QList<std::tuple<quint64, QList<QDBusVariant>>>))
      GetRows(qulonglong firstRowID, qulonglong lastRowID,
              const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                  options) = 0;
  virtual bool RemoveRow(const QDBusObjectPath& update, qulonglong rowID,
                         const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                             options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Task
 */
class VOXIECLIENT_EXPORT TaskAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Task")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.Task\">\n"
              "    <property access=\"read\" type=\"s\" name=\"State\"/>\n"
              "  </interface>\n"
              "")
 public:
  TaskAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~TaskAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString State READ state)
  virtual QString state() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.TomographyRawData
 */
class VOXIECLIENT_EXPORT TomographyRawDataAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.TomographyRawData")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.TomographyRawData\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.TomographyRawDataBase\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "  </interface>\n"
      "")
 public:
  TomographyRawDataAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~TomographyRawDataAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface
 * de.uni_stuttgart.Voxie.TomographyRawData2DAccessor
 */
class VOXIECLIENT_EXPORT TomographyRawData2DAccessorAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.TomographyRawData2DAccessor")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.TomographyRawData2DAccessor\">\n"
      "    <annotation "
      "value=\"de.uni_stuttgart.Voxie.TomographyRawDataAccessor\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <annotation "
      "value=\"de.uni_stuttgart.Voxie.TomographyRawData2DAccessorOperations\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "  </interface>\n"
      "")
 public:
  TomographyRawData2DAccessorAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~TomographyRawData2DAccessorAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface
 * de.uni_stuttgart.Voxie.TomographyRawData2DAccessorOperations
 */
class VOXIECLIENT_EXPORT TomographyRawData2DAccessorOperationsAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.TomographyRawData2DAccessorOperations")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.TomographyRawData2DAccessorOperations\">\n"
      "    <method name=\"GetAvailableImageKinds\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"aa{sv}\" name=\"ret\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QList&lt;QMap&lt;QString, "
      "QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetAvailableStreams\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"as\" name=\"ret\"/>\n"
      "    </method>\n"
      "    <method name=\"GetAvailableGeometryTypes\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"as\" name=\"ret\"/>\n"
      "    </method>\n"
      "    <method name=\"GetGeometryData\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"geometryType\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"ret\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetNumberOfImages\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"stream\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"t\" name=\"ret\"/>\n"
      "    </method>\n"
      "    <method name=\"GetMetadata\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"ret\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetImageShape\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"stream\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"id\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"(tt)\" name=\"size\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;quint64, "
      "quint64&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetPerImageMetadata\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"stream\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"id\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"out\" type=\"a{sv}\" name=\"ret\"/>\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"ReadImages\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"imageKind\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"in\" type=\"a(st)\" name=\"images\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((QList&lt;std::tuple&lt;QString, "
      "quint64&gt;&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"inputRegionStart\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"in\" type=\"(so)\" name=\"output\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;QString, QDBusObjectPath&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "      <arg direction=\"in\" type=\"t\" name=\"firstOutputImageId\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"outputRegionStart\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In5\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"regionSize\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In6\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In7\"/>\n"
      "      <arg direction=\"out\" type=\"s\" name=\"versionString\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  TomographyRawData2DAccessorOperationsAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~TomographyRawData2DAccessorOperationsAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
  virtual QStringList GetAvailableGeometryTypes(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE((QList<QMap<QString, QDBusVariant>>))
      GetAvailableImageKinds(
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QStringList GetAvailableStreams(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      GetGeometryData(const QString& geometryType,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) = 0;
  virtual VX_IDENTITY_TYPE((std::tuple<quint64, quint64>))
      GetImageShape(const QString& stream, qulonglong id,
                    const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                        options) = 0;
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      GetMetadata(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                  options) = 0;
  virtual qulonglong GetNumberOfImages(
      const QString& stream,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) GetPerImageMetadata(
      const QString& stream, qulonglong id,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
  virtual QString ReadImages(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & imageKind,
      const VX_IDENTITY_TYPE((QList<std::tuple<QString, quint64>>)) & images,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & inputRegionStart,
      const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) & output,
      qulonglong firstOutputImageId,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) &
          outputRegionStart,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & regionSize,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.TomographyRawData2DRegular
 */
class VOXIECLIENT_EXPORT TomographyRawData2DRegularAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.TomographyRawData2DRegular")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.TomographyRawData2DRegular\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.TomographyRawData\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"(dd)\" name=\"GridSpacing\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"(dd)\" name=\"ImageOrigin\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"(sus)\" name=\"DataType\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;QString, "
      "quint32, QString&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"(tt)\" name=\"ImageShape\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;quint64, "
      "quint64&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"t\" name=\"ImageCount\"/>\n"
      "    <method name=\"GetDataReadonly\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(ttt)(xxx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64, quint64&gt;, std::tuple&lt;qint64, "
      "qint64, qint64&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetDataWritable\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(ttt)(xxx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64, quint64&gt;, std::tuple&lt;qint64, "
      "qint64, qint64&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"Save\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"fileName\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  TomographyRawData2DRegularAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~TomographyRawData2DRegularAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
                 DataType READ dataType)
  virtual VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
      dataType() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 GridSpacing READ gridSpacing)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double>))
      gridSpacing() const = 0;

  Q_PROPERTY(qulonglong ImageCount READ imageCount)
  virtual qulonglong imageCount() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 ImageOrigin READ imageOrigin)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double>))
      imageOrigin() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<quint64, quint64>))
                 ImageShape READ imageShape)
  virtual VX_IDENTITY_TYPE((std::tuple<quint64, quint64>))
      imageShape() const = 0;

 public Q_SLOTS:  // METHODS
  virtual VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                       std::tuple<QString, quint32, QString>,
                                       std::tuple<quint64, quint64, quint64>,
                                       std::tuple<qint64, qint64, qint64>,
                                       QMap<QString, QDBusVariant>>))
      GetDataReadonly(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) = 0;
  virtual VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                       std::tuple<QString, quint32, QString>,
                                       std::tuple<quint64, quint64, quint64>,
                                       std::tuple<qint64, qint64, qint64>,
                                       QMap<QString, QDBusVariant>>))
      GetDataWritable(const QDBusObjectPath& update,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) = 0;
  virtual void Save(const QString& fileName,
                    const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                        options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.TomographyRawDataAccessor
 */
class VOXIECLIENT_EXPORT TomographyRawDataAccessorAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface",
              "de.uni_stuttgart.Voxie.TomographyRawDataAccessor")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface "
      "name=\"de.uni_stuttgart.Voxie.TomographyRawDataAccessor\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.TomographyRawDataBase\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "  </interface>\n"
      "")
 public:
  TomographyRawDataAccessorAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~TomographyRawDataAccessorAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.TomographyRawDataBase
 */
class VOXIECLIENT_EXPORT TomographyRawDataBaseAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.TomographyRawDataBase")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.TomographyRawDataBase\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "  </interface>\n"
      "")
 public:
  TomographyRawDataBaseAdaptor(QObject* parent)
      : QDBusAbstractAdaptor(parent) {}
  virtual ~TomographyRawDataBaseAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.Utilities
 */
class VOXIECLIENT_EXPORT UtilitiesAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.Utilities")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.Utilities\">\n"
      "    <method name=\"ExtractSlice\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"volume\"/>\n"
      "      <arg direction=\"in\" type=\"(ddd)\" name=\"origin\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"(dddd)\" name=\"rotation\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double, double&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"outputSize\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "      <arg direction=\"in\" type=\"(dd)\" name=\"pixelSize\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))&amp;\" name=\"org.qtproject.QtDBus.QtTypeName.In4\"/>\n"
      "      <arg direction=\"in\" type=\"o\" name=\"outputImage\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In6\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  UtilitiesAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~UtilitiesAdaptor() {}

 public:          // PROPERTIES
 public Q_SLOTS:  // METHODS
  virtual void ExtractSlice(
      const QDBusObjectPath& volume,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double>)) & origin,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double, double>)) &
          rotation,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & outputSize,
      const VX_IDENTITY_TYPE((std::tuple<double, double>)) & pixelSize,
      const QDBusObjectPath& outputImage,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.VisualizerNode
 */
class VOXIECLIENT_EXPORT VisualizerNodeAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.VisualizerNode")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.VisualizerNode\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Node\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <method name=\"RenderScreenshot\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"image\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"outputRegionStart\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"size\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "    </method>\n"
      "    <property access=\"readwrite\" type=\"(dd)\" "
      "name=\"VisualizerPosition\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"(dd)\" "
      "name=\"VisualizerSize\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"b\" name=\"IsAttached\"/>\n"
      "  </interface>\n"
      "")
 public:
  VisualizerNodeAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~VisualizerNodeAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(bool IsAttached READ isAttached WRITE setIsAttached)
  virtual bool isAttached() const = 0;
  virtual void setIsAttached(bool value) = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 VisualizerPosition READ visualizerPosition WRITE
                     setVisualizerPosition)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double>))
      visualizerPosition() const = 0;
  virtual void setVisualizerPosition(
      VX_IDENTITY_TYPE((std::tuple<double, double>)) value) = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 VisualizerSize READ visualizerSize WRITE setVisualizerSize)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double>))
      visualizerSize() const = 0;
  virtual void setVisualizerSize(VX_IDENTITY_TYPE((std::tuple<double, double>))
                                     value) = 0;

 public Q_SLOTS:  // METHODS
  virtual void RenderScreenshot(
      const QDBusObjectPath& image,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) &
          outputRegionStart,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & size,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.VisualizerObject
 */
class VOXIECLIENT_EXPORT VisualizerObjectAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.VisualizerObject")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.VisualizerObject\">\n"
      "    <annotation value=\"true\" "
      "name=\"org.freedesktop.DBus.Deprecated\"/>\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Object\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <method name=\"RenderScreenshot\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"image\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"outputRegionStart\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"in\" type=\"(tt)\" name=\"size\"/>\n"
      "      <annotation value=\"const "
      "VX_IDENTITY_TYPE((std::tuple&lt;quint64, quint64&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In3\"/>\n"
      "    </method>\n"
      "    <property access=\"readwrite\" type=\"(dd)\" "
      "name=\"VisualizerPosition\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"(dd)\" "
      "name=\"VisualizerSize\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"readwrite\" type=\"b\" name=\"IsAttached\"/>\n"
      "  </interface>\n"
      "")
 public:
  VisualizerObjectAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~VisualizerObjectAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(bool IsAttached READ isAttached WRITE setIsAttached)
  virtual bool isAttached() const = 0;
  virtual void setIsAttached(bool value) = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 VisualizerPosition READ visualizerPosition WRITE
                     setVisualizerPosition)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double>))
      visualizerPosition() const = 0;
  virtual void setVisualizerPosition(
      VX_IDENTITY_TYPE((std::tuple<double, double>)) value) = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 VisualizerSize READ visualizerSize WRITE setVisualizerSize)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double>))
      visualizerSize() const = 0;
  virtual void setVisualizerSize(VX_IDENTITY_TYPE((std::tuple<double, double>))
                                     value) = 0;

 public Q_SLOTS:  // METHODS
  virtual void RenderScreenshot(
      const QDBusObjectPath& image,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) &
          outputRegionStart,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & size,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.VolumeData
 */
class VOXIECLIENT_EXPORT VolumeDataAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.VolumeData")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.VolumeData\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.Data\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"o\" name=\"VolumeStructure\">\n"
      "      <annotation value=\"de.uni_stuttgart.Voxie.VolumeStructure\" "
      "name=\"de.uni_stuttgart.Voxie.Interface\"/>\n"
      "    </property>\n"
      "    <method name=\"Save\">\n"
      "      <arg direction=\"in\" type=\"s\" name=\"fileName\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "    </method>\n"
      "    <property access=\"read\" type=\"(sus)\" name=\"DataType\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;QString, "
      "quint32, QString&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"(ddd)\" name=\"VolumeOrigin\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"(ddd)\" name=\"VolumeSize\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  VolumeDataAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~VolumeDataAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
                 DataType READ dataType)
  virtual VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
      dataType() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double>))
                 VolumeOrigin READ volumeOrigin)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double, double>))
      volumeOrigin() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double>))
                 VolumeSize READ volumeSize)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double, double>))
      volumeSize() const = 0;

  Q_PROPERTY(QDBusObjectPath VolumeStructure READ volumeStructure)
  virtual QDBusObjectPath volumeStructure() const = 0;

 public Q_SLOTS:  // METHODS
  virtual void Save(const QString& fileName,
                    const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                        options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.VolumeDataVoxel
 */
class VOXIECLIENT_EXPORT VolumeDataVoxelAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.VolumeDataVoxel")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.VolumeDataVoxel\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.VolumeData\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"(ddd)\" name=\"GridSpacing\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"(ttt)\" name=\"ArrayShape\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;quint64, "
      "quint64, quint64&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <method name=\"GetDataReadonly\">\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(ttt)(xxx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64, quint64&gt;, std::tuple&lt;qint64, "
      "qint64, qint64&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "    <method name=\"GetDataWritable\">\n"
      "      <arg direction=\"in\" type=\"o\" name=\"update\"/>\n"
      "      <arg direction=\"in\" type=\"a{sv}\" name=\"options\"/>\n"
      "      <annotation value=\"const VX_IDENTITY_TYPE((QMap&lt;QString, "
      "QDBusVariant&gt;))&amp;\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
      "      <arg direction=\"out\" type=\"(a{sv}x(sus)(ttt)(xxx)a{sv})\"/>\n"
      "      <annotation "
      "value=\"VX_IDENTITY_TYPE((std::tuple&lt;QMap&lt;QString, "
      "QDBusVariant&gt;, qint64, std::tuple&lt;QString, quint32, QString&gt;, "
      "std::tuple&lt;quint64, quint64, quint64&gt;, std::tuple&lt;qint64, "
      "qint64, qint64&gt;, QMap&lt;QString, QDBusVariant&gt;&gt;))\" "
      "name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
      "    </method>\n"
      "  </interface>\n"
      "")
 public:
  VolumeDataVoxelAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~VolumeDataVoxelAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>))
                 ArrayShape READ arrayShape)
  virtual VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>))
      arrayShape() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double>))
                 GridSpacing READ gridSpacing)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double, double>))
      gridSpacing() const = 0;

 public Q_SLOTS:  // METHODS
  virtual VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                       std::tuple<QString, quint32, QString>,
                                       std::tuple<quint64, quint64, quint64>,
                                       std::tuple<qint64, qint64, qint64>,
                                       QMap<QString, QDBusVariant>>))
      GetDataReadonly(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) = 0;
  virtual VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                       std::tuple<QString, quint32, QString>,
                                       std::tuple<quint64, quint64, quint64>,
                                       std::tuple<qint64, qint64, qint64>,
                                       QMap<QString, QDBusVariant>>))
      GetDataWritable(const QDBusObjectPath& update,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) = 0;
 Q_SIGNALS:  // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.VolumeSeriesData
 */
class VOXIECLIENT_EXPORT VolumeSeriesDataAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.VolumeSeriesData")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.VolumeSeriesData\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.SeriesData\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"(ddd)\" name=\"VolumeOrigin\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "    <property access=\"read\" type=\"(ddd)\" name=\"VolumeSize\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;double, "
      "double, double&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  VolumeSeriesDataAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~VolumeSeriesDataAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double>))
                 VolumeOrigin READ volumeOrigin)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double, double>))
      volumeOrigin() const = 0;

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double>))
                 VolumeSize READ volumeSize)
  virtual VX_IDENTITY_TYPE((std::tuple<double, double, double>))
      volumeSize() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.VolumeStructure
 */
class VOXIECLIENT_EXPORT VolumeStructureAdaptor : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.VolumeStructure")
  Q_CLASSINFO("D-Bus Introspection",
              ""
              "  <interface name=\"de.uni_stuttgart.Voxie.VolumeStructure\">\n"
              "    <annotation value=\"de.uni_stuttgart.Voxie.DynamicObject\" "
              "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
              "    <property access=\"read\" type=\"s\" "
              "name=\"VolumeStructureType\"/>\n"
              "  </interface>\n"
              "")
 public:
  VolumeStructureAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~VolumeStructureAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(QString VolumeStructureType READ volumeStructureType)
  virtual QString volumeStructureType() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Adaptor class for interface de.uni_stuttgart.Voxie.VolumeStructureVoxel
 */
class VOXIECLIENT_EXPORT VolumeStructureVoxelAdaptor
    : public QDBusAbstractAdaptor {
  Q_OBJECT
  Q_CLASSINFO("D-Bus Interface", "de.uni_stuttgart.Voxie.VolumeStructureVoxel")
  Q_CLASSINFO(
      "D-Bus Introspection",
      ""
      "  <interface name=\"de.uni_stuttgart.Voxie.VolumeStructureVoxel\">\n"
      "    <annotation value=\"de.uni_stuttgart.Voxie.VolumeStructure\" "
      "name=\"de.uni_stuttgart.Voxie.ParentInterface\"/>\n"
      "    <property access=\"read\" type=\"(ttt)\" name=\"ArrayShape\">\n"
      "      <annotation value=\"VX_IDENTITY_TYPE((std::tuple&lt;quint64, "
      "quint64, quint64&gt;))\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
      "    </property>\n"
      "  </interface>\n"
      "")
 public:
  VolumeStructureVoxelAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {}
  virtual ~VolumeStructureVoxelAdaptor() {}

 public:  // PROPERTIES
  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>))
                 ArrayShape READ arrayShape)
  virtual VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>))
      arrayShape() const = 0;

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

#endif
