#include <VoxieClient/DBusTypeList.hpp>
#include <VoxieClient/QDBusPendingReplyWrapper.hpp>
/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p tmp-dbus/DBusProxies -a
 * tmp-dbus/DBusAdaptors
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSPROXIES_H
#define DBUSPROXIES_H

#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QObject>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Client
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieClientInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Client";
  }

 public:
  DeUni_stuttgartVoxieClientInterface(const QString& service,
                                      const QString& path,
                                      const QDBusConnection& connection,
                                      QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieClientInterface();

  Q_PROPERTY(QString DBusConnectionName READ dBusConnectionName)
  inline QString dBusConnectionName() const {
    return qvariant_cast<QString>(property("DBusConnectionName"));
  }

  Q_PROPERTY(QString UniqueConnectionName READ uniqueConnectionName)
  inline QString uniqueConnectionName() const {
    return qvariant_cast<QString>(property("UniqueConnectionName"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> DecRefCount(
      const QDBusObjectPath& o) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(o);
    return asyncCallWithArgumentList(QStringLiteral("DecRefCount"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((QMap<QDBusObjectPath, quint64>))>
  GetReferencedObjects(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                       options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetReferencedObjects"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> IncRefCount(
      const QDBusObjectPath& o) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(o);
    return asyncCallWithArgumentList(QStringLiteral("IncRefCount"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ClientManager
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieClientManagerInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ClientManager";
  }

 public:
  DeUni_stuttgartVoxieClientManagerInterface(const QString& service,
                                             const QString& path,
                                             const QDBusConnection& connection,
                                             QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieClientManagerInterface();

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> CreateClient(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateClient"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateIndependentClient(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateIndependentClient"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> DestroyClient(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("DestroyClient"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Component
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieComponentInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Component";
  }

 public:
  DeUni_stuttgartVoxieComponentInterface(const QString& service,
                                         const QString& path,
                                         const QDBusConnection& connection,
                                         QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieComponentInterface();

  Q_PROPERTY(QDBusObjectPath ComponentContainer READ componentContainer)
  inline QDBusObjectPath componentContainer() const {
    return qvariant_cast<QDBusObjectPath>(property("ComponentContainer"));
  }

  Q_PROPERTY(QString ComponentType READ componentType)
  inline QString componentType() const {
    return qvariant_cast<QString>(property("ComponentType"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ComponentContainer
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieComponentContainerInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ComponentContainer";
  }

 public:
  DeUni_stuttgartVoxieComponentContainerInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieComponentContainerInterface();

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> GetComponent(
      const QString& type, const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(type) << QVariant::fromValue(name)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetComponent"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  ListComponents(const QString& type,
                 const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                     options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(type) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListComponents"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ContainerData
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieContainerDataInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ContainerData";
  }

 public:
  DeUni_stuttgartVoxieContainerDataInterface(const QString& service,
                                             const QString& path,
                                             const QDBusConnection& connection,
                                             QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieContainerDataInterface();

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> GetElement(
      const QString& key,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(key) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetElement"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QStringList> GetKeys(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetKeys"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QString> GetName(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetName"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  GetValues(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetValues"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> InsertElement(
      const QString& key, const QDBusObjectPath& value,
      const QDBusObjectPath& update,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(key) << QVariant::fromValue(value)
                 << QVariant::fromValue(update) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("InsertElement"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Data
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieDataInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Data";
  }

 public:
  DeUni_stuttgartVoxieDataInterface(const QString& service, const QString& path,
                                    const QDBusConnection& connection,
                                    QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieDataInterface();

  Q_PROPERTY(QString CurrentVersionString READ currentVersionString)
  inline QString currentVersionString() const {
    return qvariant_cast<QString>(property("CurrentVersionString"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> CreateUpdate(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateUpdate"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  GetCurrentVersion(const QDBusObjectPath& client,
                    const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                        options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetCurrentVersion"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
  void DataChanged(const QDBusObjectPath& newVersion,
                   const QString& newVersionVersionString,
                   bool newVersionUpdateIsRunning,
                   const QString& newVersionDate, const QString& reason,
                   const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                       options);
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.DataNode
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieDataNodeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.DataNode";
  }

 public:
  DeUni_stuttgartVoxieDataNodeInterface(const QString& service,
                                        const QString& path,
                                        const QDBusConnection& connection,
                                        QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieDataNodeInterface();

  Q_PROPERTY(QDBusObjectPath Data READ data)
  inline QDBusObjectPath data() const {
    return qvariant_cast<QDBusObjectPath>(property("Data"));
  }

  Q_PROPERTY(QDBusObjectPath DefaultExporter READ defaultExporter)
  inline QDBusObjectPath defaultExporter() const {
    return qvariant_cast<QDBusObjectPath>(property("DefaultExporter"));
  }

  Q_PROPERTY(QString FileName READ fileName)
  inline QString fileName() const {
    return qvariant_cast<QString>(property("FileName"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 ImportProperties READ importProperties)
  inline VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      importProperties() const {
    return qvariant_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>(
        property("ImportProperties"));
  }

  Q_PROPERTY(QDBusObjectPath Importer READ importer)
  inline QDBusObjectPath importer() const {
    return qvariant_cast<QDBusObjectPath>(property("Importer"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.DataObject
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieDataObjectInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.DataObject";
  }

 public:
  DeUni_stuttgartVoxieDataObjectInterface(const QString& service,
                                          const QString& path,
                                          const QDBusConnection& connection,
                                          QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieDataObjectInterface();

  Q_PROPERTY(QDBusObjectPath Data READ data)
  inline QDBusObjectPath data() const {
    return qvariant_cast<QDBusObjectPath>(property("Data"));
  }

  Q_PROPERTY(QDBusObjectPath DefaultExporter READ defaultExporter)
  inline QDBusObjectPath defaultExporter() const {
    return qvariant_cast<QDBusObjectPath>(property("DefaultExporter"));
  }

  Q_PROPERTY(QString FileName READ fileName)
  inline QString fileName() const {
    return qvariant_cast<QString>(property("FileName"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 ImportProperties READ importProperties)
  inline VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      importProperties() const {
    return qvariant_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>(
        property("ImportProperties"));
  }

  Q_PROPERTY(QDBusObjectPath Importer READ importer)
  inline QDBusObjectPath importer() const {
    return qvariant_cast<QDBusObjectPath>(property("Importer"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.DataVersion
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieDataVersionInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.DataVersion";
  }

 public:
  DeUni_stuttgartVoxieDataVersionInterface(const QString& service,
                                           const QString& path,
                                           const QDBusConnection& connection,
                                           QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieDataVersionInterface();

  Q_PROPERTY(QDBusObjectPath Data READ data)
  inline QDBusObjectPath data() const {
    return qvariant_cast<QDBusObjectPath>(property("Data"));
  }

  Q_PROPERTY(QString Date READ date)
  inline QString date() const {
    return qvariant_cast<QString>(property("Date"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 Metadata READ metadata)
  inline VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) metadata() const {
    return qvariant_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>(
        property("Metadata"));
  }

  Q_PROPERTY(bool UpdateIsRunning READ updateIsRunning)
  inline bool updateIsRunning() const {
    return qvariant_cast<bool>(property("UpdateIsRunning"));
  }

  Q_PROPERTY(QString VersionString READ versionString)
  inline QString versionString() const {
    return qvariant_cast<QString>(property("VersionString"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.DebugOption
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieDebugOptionInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.DebugOption";
  }

 public:
  DeUni_stuttgartVoxieDebugOptionInterface(const QString& service,
                                           const QString& path,
                                           const QDBusConnection& connection,
                                           QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieDebugOptionInterface();

  Q_PROPERTY(QDBusSignature DBusSignature READ dBusSignature)
  inline QDBusSignature dBusSignature() const {
    return qvariant_cast<QDBusSignature>(property("DBusSignature"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusVariant> GetValue(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetValue"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> SetValue(
      const QDBusVariant& value,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(value) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("SetValue"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.DynamicObject
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieDynamicObjectInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.DynamicObject";
  }

 public:
  DeUni_stuttgartVoxieDynamicObjectInterface(const QString& service,
                                             const QString& path,
                                             const QDBusConnection& connection,
                                             QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieDynamicObjectInterface();

  Q_PROPERTY(QStringList SupportedInterfaces READ supportedInterfaces)
  inline QStringList supportedInterfaces() const {
    return qvariant_cast<QStringList>(property("SupportedInterfaces"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.EventListDataAccessor
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieEventListDataAccessorInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.EventListDataAccessor";
  }

 public:
  DeUni_stuttgartVoxieEventListDataAccessorInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieEventListDataAccessorInterface();

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface
 * de.uni_stuttgart.Voxie.EventListDataAccessorOperations
 */
class VOXIECLIENT_EXPORT
    DeUni_stuttgartVoxieEventListDataAccessorOperationsInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.EventListDataAccessorOperations";
  }

 public:
  DeUni_stuttgartVoxieEventListDataAccessorOperationsInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieEventListDataAccessorOperationsInterface();

  Q_PROPERTY(qulonglong StreamCount READ streamCount)
  inline qulonglong streamCount() const {
    return qvariant_cast<qulonglong>(property("StreamCount"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>
  GetMetadata(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetMetadata"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      qulonglong, qlonglong, qlonglong,
      VX_IDENTITY_TYPE(
          (QList<std::tuple<QString, std::tuple<QString, quint32, QString>,
                            QString, QMap<QString, QDBusVariant>,
                            QMap<QString, QDBusVariant>>>)),
      VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>
  GetStreamInfo(qulonglong streamID,
                const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                    options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(streamID)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetStreamInfo"),
                                     argumentList);
  }
  inline QDBusReply<qulonglong> GetStreamInfo(
      qulonglong streamID,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options,
      qlonglong& minimumTimestamp, qlonglong& maximumTimestamp,
      VX_IDENTITY_TYPE(
          (QList<std::tuple<QString, std::tuple<QString, quint32, QString>,
                            QString, QMap<QString, QDBusVariant>,
                            QMap<QString, QDBusVariant>>>)) &
          attributes,
      VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & metadata) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(streamID)
                 << QVariant::fromValue(options);
    QDBusMessage reply = callWithArgumentList(
        QDBus::Block, QStringLiteral("GetStreamInfo"), argumentList);
    if (reply.type() == QDBusMessage::ReplyMessage &&
        reply.arguments().count() == 5) {
      minimumTimestamp = qdbus_cast<qlonglong>(reply.arguments().at(1));
      maximumTimestamp = qdbus_cast<qlonglong>(reply.arguments().at(2));
      attributes = qdbus_cast<VX_IDENTITY_TYPE(
          (QList<std::tuple<QString, std::tuple<QString, quint32, QString>,
                            QString, QMap<QString, QDBusVariant>,
                            QMap<QString, QDBusVariant>>>))>(
          reply.arguments().at(3));
      metadata = qdbus_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>(
          reply.arguments().at(4));
    }
    return reply;
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<qulonglong, qlonglong, QString>
  ReadEvents(qulonglong streamID, qlonglong firstTimestamp,
             qlonglong lastTimestamp, qulonglong targetEventOffset,
             qulonglong targetEventCount,
             const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) &
                 output,
             const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(streamID)
                 << QVariant::fromValue(firstTimestamp)
                 << QVariant::fromValue(lastTimestamp)
                 << QVariant::fromValue(targetEventOffset)
                 << QVariant::fromValue(targetEventCount)
                 << QVariant::fromValue(output) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ReadEvents"),
                                     argumentList);
  }
  inline QDBusReply<qulonglong> ReadEvents(
      qulonglong streamID, qlonglong firstTimestamp, qlonglong lastTimestamp,
      qulonglong targetEventOffset, qulonglong targetEventCount,
      const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) & output,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options,
      qlonglong& lastReadTimestamp, QString& versionString) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(streamID)
                 << QVariant::fromValue(firstTimestamp)
                 << QVariant::fromValue(lastTimestamp)
                 << QVariant::fromValue(targetEventOffset)
                 << QVariant::fromValue(targetEventCount)
                 << QVariant::fromValue(output) << QVariant::fromValue(options);
    QDBusMessage reply = callWithArgumentList(
        QDBus::Block, QStringLiteral("ReadEvents"), argumentList);
    if (reply.type() == QDBusMessage::ReplyMessage &&
        reply.arguments().count() == 3) {
      lastReadTimestamp = qdbus_cast<qlonglong>(reply.arguments().at(1));
      versionString = qdbus_cast<QString>(reply.arguments().at(2));
    }
    return reply;
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.EventListDataBuffer
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieEventListDataBufferInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.EventListDataBuffer";
  }

 public:
  DeUni_stuttgartVoxieEventListDataBufferInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieEventListDataBufferInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE(
      (QList<std::tuple<QString, std::tuple<QString, quint32, QString>, QString,
                        QMap<QString, QDBusVariant>,
                        QMap<QString, QDBusVariant>>>))
                 Attributes READ attributes)
  inline VX_IDENTITY_TYPE(
      (QList<std::tuple<QString, std::tuple<QString, quint32, QString>, QString,
                        QMap<QString, QDBusVariant>,
                        QMap<QString, QDBusVariant>>>)) attributes() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (QList<std::tuple<QString, std::tuple<QString, quint32, QString>,
                          QString, QMap<QString, QDBusVariant>,
                          QMap<QString, QDBusVariant>>>))>(
        property("Attributes"));
  }

  Q_PROPERTY(qulonglong Capacity READ capacity)
  inline qulonglong capacity() const {
    return qvariant_cast<qulonglong>(property("Capacity"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>, std::tuple<quint64>,
                  std::tuple<qint64>, QMap<QString, QDBusVariant>>))>
  GetAttributeReadonly(const QString& name,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(name) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetAttributeReadonly"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>, std::tuple<quint64>,
                  std::tuple<qint64>, QMap<QString, QDBusVariant>>))>
  GetAttributeWritable(const QDBusObjectPath& update, const QString& name,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(name)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetAttributeWritable"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Exporter
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieExporterInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Exporter";
  }

 public:
  DeUni_stuttgartVoxieExporterInterface(const QString& service,
                                        const QString& path,
                                        const QDBusConnection& connection,
                                        QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieExporterInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) Filter READ filter)
  inline VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) filter() const {
    return qvariant_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>(
        property("Filter"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Export(
      const QDBusObjectPath& data, const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(data) << QVariant::fromValue(fileName)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Export"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QString> FilterAddExtension(
      const QString& filename,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(filename)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("FilterAddExtension"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> StartExport(
      const QDBusObjectPath& client, const QDBusObjectPath& data,
      const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(data)
                 << QVariant::fromValue(fileName)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("StartExport"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Extension
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieExtensionInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Extension";
  }

 public:
  DeUni_stuttgartVoxieExtensionInterface(const QString& service,
                                         const QString& path,
                                         const QDBusConnection& connection,
                                         QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieExtensionInterface();

  Q_PROPERTY(QString ExecutableFilename READ executableFilename)
  inline QString executableFilename() const {
    return qvariant_cast<QString>(property("ExecutableFilename"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ExternalDataUpdate
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieExternalDataUpdateInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ExternalDataUpdate";
  }

 public:
  DeUni_stuttgartVoxieExternalDataUpdateInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieExternalDataUpdateInterface();

  Q_PROPERTY(QDBusObjectPath Data READ data)
  inline QDBusObjectPath data() const {
    return qvariant_cast<QDBusObjectPath>(property("Data"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> Finish(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Finish"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ExternalOperation
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieExternalOperationInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ExternalOperation";
  }

 public:
  DeUni_stuttgartVoxieExternalOperationInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieExternalOperationInterface();

  Q_PROPERTY(QString Action READ action)
  inline QString action() const {
    return qvariant_cast<QString>(property("Action"));
  }

  Q_PROPERTY(bool IsCancelled READ isCancelled)
  inline bool isCancelled() const {
    return qvariant_cast<bool>(property("IsCancelled"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> ClaimOperation(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ClaimOperation"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> FinishError(
      const QString& name, const QString& message,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(name) << QVariant::fromValue(message)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("FinishError"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> SetProgress(
      double progress,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(progress)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("SetProgress"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
  void Cancelled(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                 options);
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ExternalOperationExport
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieExternalOperationExportInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ExternalOperationExport";
  }

 public:
  DeUni_stuttgartVoxieExternalOperationExportInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieExternalOperationExportInterface();

  Q_PROPERTY(QDBusObjectPath Data READ data)
  inline QDBusObjectPath data() const {
    return qvariant_cast<QDBusObjectPath>(property("Data"));
  }

  Q_PROPERTY(QString Filename READ filename)
  inline QString filename() const {
    return qvariant_cast<QString>(property("Filename"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Finish(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Finish"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ExternalOperationImport
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieExternalOperationImportInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ExternalOperationImport";
  }

 public:
  DeUni_stuttgartVoxieExternalOperationImportInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieExternalOperationImportInterface();

  Q_PROPERTY(QString Filename READ filename)
  inline QString filename() const {
    return qvariant_cast<QString>(property("Filename"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 Properties READ properties)
  inline VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) properties() const {
    return qvariant_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>(
        property("Properties"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Finish(
      const QDBusObjectPath& data, const QDBusObjectPath& version,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(data) << QVariant::fromValue(version)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Finish"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ExternalOperationRunFilter
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieExternalOperationRunFilterInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ExternalOperationRunFilter";
  }

 public:
  DeUni_stuttgartVoxieExternalOperationRunFilterInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieExternalOperationRunFilterInterface();

  Q_PROPERTY(QDBusObjectPath FilterNode READ filterNode)
  inline QDBusObjectPath filterNode() const {
    return qvariant_cast<QDBusObjectPath>(property("FilterNode"));
  }

  Q_PROPERTY(QDBusObjectPath FilterObject READ filterObject)
  inline QDBusObjectPath filterObject() const {
    return qvariant_cast<QDBusObjectPath>(property("FilterObject"));
  }

  Q_PROPERTY(
      VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))
          Parameters READ parameters)
  inline VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))
      parameters() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))>(
        property("Parameters"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Finish(
      const VX_IDENTITY_TYPE(
          (QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>)) &
          result,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(result) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Finish"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface
 * de.uni_stuttgart.Voxie.ExternalOperationRunSegmentationStep
 */
class VOXIECLIENT_EXPORT
    DeUni_stuttgartVoxieExternalOperationRunSegmentationStepInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ExternalOperationRunSegmentationStep";
  }

 public:
  DeUni_stuttgartVoxieExternalOperationRunSegmentationStepInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieExternalOperationRunSegmentationStepInterface();

  Q_PROPERTY(QDBusObjectPath ContainerData READ containerData)
  inline QDBusObjectPath containerData() const {
    return qvariant_cast<QDBusObjectPath>(property("ContainerData"));
  }

  Q_PROPERTY(QDBusObjectPath InputNode READ inputNode)
  inline QDBusObjectPath inputNode() const {
    return qvariant_cast<QDBusObjectPath>(property("InputNode"));
  }

  Q_PROPERTY(QDBusObjectPath LabelData READ labelData)
  inline QDBusObjectPath labelData() const {
    return qvariant_cast<QDBusObjectPath>(property("LabelData"));
  }

  Q_PROPERTY(
      VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))
          Parameters READ parameters)
  inline VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))
      parameters() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>))>(
        property("Parameters"));
  }

  Q_PROPERTY(QDBusObjectPath SegmentationStepNode READ segmentationStepNode)
  inline QDBusObjectPath segmentationStepNode() const {
    return qvariant_cast<QDBusObjectPath>(property("SegmentationStepNode"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Finish(
      const QDBusObjectPath& labelDataVersion,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(labelDataVersion)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Finish"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.FilterNode
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieFilterNodeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.FilterNode";
  }

 public:
  DeUni_stuttgartVoxieFilterNodeInterface(const QString& service,
                                          const QString& path,
                                          const QDBusConnection& connection,
                                          QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieFilterNodeInterface();

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> RunFilter(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("RunFilter"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.FilterObject
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieFilterObjectInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.FilterObject";
  }

 public:
  DeUni_stuttgartVoxieFilterObjectInterface(const QString& service,
                                            const QString& path,
                                            const QDBusConnection& connection,
                                            QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieFilterObjectInterface();

  Q_PROPERTY(bool PreviewActive READ previewActive)
  inline bool previewActive() const {
    return qvariant_cast<bool>(property("PreviewActive"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double, double>))
                 PreviewPoint READ previewPoint)
  inline VX_IDENTITY_TYPE((std::tuple<double, double, double, double>))
      previewPoint() const {
    return qvariant_cast<VX_IDENTITY_TYPE((
        std::tuple<double, double, double, double>))>(property("PreviewPoint"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.GeometricPrimitiveData
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieGeometricPrimitiveDataInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.GeometricPrimitiveData";
  }

 public:
  DeUni_stuttgartVoxieGeometricPrimitiveDataInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieGeometricPrimitiveDataInterface();

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<qulonglong> AddPrimitive(
      const QDBusObjectPath& update, const QDBusObjectPath& primitiveType,
      const QString& displayName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & primitiveValues,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update)
                 << QVariant::fromValue(primitiveType)
                 << QVariant::fromValue(displayName)
                 << QVariant::fromValue(primitiveValues)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("AddPrimitive"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((QList<std::tuple<quint64, QDBusObjectPath, QString,
                                         QMap<QString, QDBusVariant>,
                                         QMap<QString, QDBusVariant>>>))>
  GetPrimitives(qulonglong firstID, qulonglong lastID,
                const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                    options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(firstID) << QVariant::fromValue(lastID)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetPrimitives"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.GeometricPrimitiveType
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieGeometricPrimitiveTypeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.GeometricPrimitiveType";
  }

 public:
  DeUni_stuttgartVoxieGeometricPrimitiveTypeInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieGeometricPrimitiveTypeInterface();

  Q_PROPERTY(QString DisplayName READ displayName)
  inline QString displayName() const {
    return qvariant_cast<QString>(property("DisplayName"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusSignature>))
                 ValueDBusSignatures READ valueDBusSignatures)
  inline VX_IDENTITY_TYPE((QMap<QString, QDBusSignature>))
      valueDBusSignatures() const {
    return qvariant_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusSignature>))>(
        property("ValueDBusSignatures"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Gui
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieGuiInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Gui";
  }

 public:
  DeUni_stuttgartVoxieGuiInterface(const QString& service, const QString& path,
                                   const QDBusConnection& connection,
                                   QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieGuiInterface();

  Q_PROPERTY(QDBusObjectPath ActiveVisualizer READ activeVisualizer)
  inline QDBusObjectPath activeVisualizer() const {
    return qvariant_cast<QDBusObjectPath>(property("ActiveVisualizer"));
  }

  Q_PROPERTY(QString MdiViewMode READ mdiViewMode WRITE setMdiViewMode)
  inline QString mdiViewMode() const {
    return qvariant_cast<QString>(property("MdiViewMode"));
  }
  inline void setMdiViewMode(const QString& value) {
    setProperty("MdiViewMode", QVariant::fromValue(value));
  }

  Q_PROPERTY(QList<QDBusObjectPath> SelectedNodes READ selectedNodes WRITE
                 setSelectedNodes)
  inline QList<QDBusObjectPath> selectedNodes() const {
    return qvariant_cast<QList<QDBusObjectPath>>(property("SelectedNodes"));
  }
  inline void setSelectedNodes(const QList<QDBusObjectPath>& value) {
    setProperty("SelectedNodes", QVariant::fromValue(value));
  }

  Q_PROPERTY(QList<QDBusObjectPath> SelectedObjects READ selectedObjects)
  inline QList<QDBusObjectPath> selectedObjects() const {
    return qvariant_cast<QList<QDBusObjectPath>>(property("SelectedObjects"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<qulonglong> GetMainWindowID(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetMainWindowID"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> RaiseWindow(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("RaiseWindow"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ImageDataPixel
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieImageDataPixelInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ImageDataPixel";
  }

 public:
  DeUni_stuttgartVoxieImageDataPixelInterface(const QString& service,
                                              const QString& path,
                                              const QDBusConnection& connection,
                                              QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieImageDataPixelInterface();

  Q_PROPERTY(qulonglong ComponentCount READ componentCount)
  inline qulonglong componentCount() const {
    return qvariant_cast<qulonglong>(property("ComponentCount"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
                 DataType READ dataType)
  inline VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
      dataType() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (std::tuple<QString, quint32, QString>))>(property("DataType"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) Size READ size)
  inline VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) size() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<quint64, quint64>))>(
        property("Size"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                   std::tuple<QString, quint32, QString>,
                                   std::tuple<quint64, quint64, quint64>,
                                   std::tuple<qint64, qint64, qint64>,
                                   QMap<QString, QDBusVariant>>))>
  GetDataReadonly(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                  options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetDataReadonly"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                   std::tuple<QString, quint32, QString>,
                                   std::tuple<quint64, quint64, quint64>,
                                   std::tuple<qint64, qint64, qint64>,
                                   QMap<QString, QDBusVariant>>))>
  GetDataWritable(const QDBusObjectPath& update,
                  const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetDataWritable"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Importer
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieImporterInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Importer";
  }

 public:
  DeUni_stuttgartVoxieImporterInterface(const QString& service,
                                        const QString& path,
                                        const QDBusConnection& connection,
                                        QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieImporterInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) Filter READ filter)
  inline VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) filter() const {
    return qvariant_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>(
        property("Filter"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  ListProperties(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                 options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListProperties"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> StartImport(
      const QDBusObjectPath& client, const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(fileName)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("StartImport"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ImporterProperty
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieImporterPropertyInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ImporterProperty";
  }

 public:
  DeUni_stuttgartVoxieImporterPropertyInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieImporterPropertyInterface();

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Instance
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieInstanceInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Instance";
  }

 public:
  DeUni_stuttgartVoxieInstanceInterface(const QString& service,
                                        const QString& path,
                                        const QDBusConnection& connection,
                                        QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieInstanceInterface();

  Q_PROPERTY(QDBusObjectPath Components READ components)
  inline QDBusObjectPath components() const {
    return qvariant_cast<QDBusObjectPath>(property("Components"));
  }

  Q_PROPERTY(QDBusObjectPath Gui READ gui)
  inline QDBusObjectPath gui() const {
    return qvariant_cast<QDBusObjectPath>(property("Gui"));
  }

  Q_PROPERTY(QDBusObjectPath Utilities READ utilities)
  inline QDBusObjectPath utilities() const {
    return qvariant_cast<QDBusObjectPath>(property("Utilities"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
                 VersionInformation READ versionInformation)
  inline VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))
      versionInformation() const {
    return qvariant_cast<VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>(
        property("VersionInformation"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateContainerData(const QDBusObjectPath& client, const QString& name,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(name)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateContainerData"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateEventListDataAccessor(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) & backend,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(backend)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(
        QStringLiteral("CreateEventListDataAccessor"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateEventListDataBuffer(
      const QDBusObjectPath& client, qulonglong capacity,
      const VX_IDENTITY_TYPE(
          (QList<std::tuple<QString, std::tuple<QString, quint32, QString>,
                            QString, QMap<QString, QDBusVariant>,
                            QMap<QString, QDBusVariant>>>)) &
          attributes,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(capacity)
                 << QVariant::fromValue(attributes)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(
        QStringLiteral("CreateEventListDataBuffer"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateGeometricPrimitiveData(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(
        QStringLiteral("CreateGeometricPrimitiveData"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> CreateImage(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & size,
      qulonglong componentCount,
      const VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>)) &
          dataType,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(size)
                 << QVariant::fromValue(componentCount)
                 << QVariant::fromValue(dataType)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateImage"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateSurfaceDataTriangleIndexed(
      const QDBusObjectPath& client, qulonglong triangleCount,
      qulonglong vertexCount, const QDBusObjectPath& triangleSource,
      bool triangleWritable,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client)
                 << QVariant::fromValue(triangleCount)
                 << QVariant::fromValue(vertexCount)
                 << QVariant::fromValue(triangleSource)
                 << QVariant::fromValue(triangleWritable)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(
        QStringLiteral("CreateSurfaceDataTriangleIndexed"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateTableData(const QDBusObjectPath& client,
                  const VX_IDENTITY_TYPE(
                      (QList<std::tuple<QString, QDBusObjectPath, QString,
                                        QMap<QString, QDBusVariant>,
                                        QMap<QString, QDBusVariant>>>)) &
                      columns,
                  const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(columns)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateTableData"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateTomographyRawData2DAccessor(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) & backend,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(backend)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(
        QStringLiteral("CreateTomographyRawData2DAccessor"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateTomographyRawData2DRegular(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & imageShape,
      qulonglong imageCount,
      const VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>)) &
          dataType,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client)
                 << QVariant::fromValue(imageShape)
                 << QVariant::fromValue(imageCount)
                 << QVariant::fromValue(dataType)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(
        QStringLiteral("CreateTomographyRawData2DRegular"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  CreateVolumeDataVoxel(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>)) &
          arrayShape,
      const VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>)) &
          dataType,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double>)) &
          volumeOrigin,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double>)) &
          gridSpacing,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client)
                 << QVariant::fromValue(arrayShape)
                 << QVariant::fromValue(dataType)
                 << QVariant::fromValue(volumeOrigin)
                 << QVariant::fromValue(gridSpacing)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateVolumeDataVoxel"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> GetComponent(
      const QString& componentType, const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(componentType)
                 << QVariant::fromValue(name) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetComponent"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  GetDebugOption(const QString& name,
                 const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                     options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(name) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetDebugOption"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  GetPluginByName(const QString& name,
                  const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(name) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetPluginByName"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> Import(
      const QDBusObjectPath& client, const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(fileName)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Import"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  ListDebugOptions(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                   options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListDebugOptions"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  ListNodes(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListNodes"), argumentList);
  }

  inline Q_DECL_DEPRECATED Q_REQUIRED_RESULT
      vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
      ListObjects(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                  options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListObjects"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  ListPlugins(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListPlugins"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  ListPrototypes(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                 options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListPrototypes"),
                                     argumentList);
  }

  inline Q_DECL_DEPRECATED Q_REQUIRED_RESULT
      vx::QDBusPendingReplyWrapper<QDBusObjectPath>
      OpenFile(const QString& file,
               const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                   options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(file) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("OpenFile"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Quit(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Quit"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> RunAllFilters(
      const QDBusObjectPath& client,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(client) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("RunAllFilters"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Node
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieNodeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Node";
  }

 public:
  DeUni_stuttgartVoxieNodeInterface(const QString& service, const QString& path,
                                    const QDBusConnection& connection,
                                    QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieNodeInterface();

  Q_PROPERTY(QString AutomaticDisplayName READ automaticDisplayName)
  inline QString automaticDisplayName() const {
    return qvariant_cast<QString>(property("AutomaticDisplayName"));
  }

  Q_PROPERTY(QString DisplayName READ displayName)
  inline QString displayName() const {
    return qvariant_cast<QString>(property("DisplayName"));
  }

  Q_PROPERTY(QStringList ExportedProperties READ exportedProperties WRITE
                 setExportedProperties)
  inline QStringList exportedProperties() const {
    return qvariant_cast<QStringList>(property("ExportedProperties"));
  }
  inline void setExportedProperties(const QStringList& value) {
    setProperty("ExportedProperties", QVariant::fromValue(value));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 GraphPosition READ graphPosition WRITE setGraphPosition)
  inline VX_IDENTITY_TYPE((std::tuple<double, double>)) graphPosition() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<double, double>))>(
        property("GraphPosition"));
  }
  inline void setGraphPosition(VX_IDENTITY_TYPE((std::tuple<double, double>))
                                   value) {
    setProperty("GraphPosition", QVariant::fromValue(value));
  }

  Q_PROPERTY(
      VX_IDENTITY_TYPE((std::tuple<bool, QString>))
          ManualDisplayName READ manualDisplayName WRITE setManualDisplayName)
  inline VX_IDENTITY_TYPE((std::tuple<bool, QString>))
      manualDisplayName() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<bool, QString>))>(
        property("ManualDisplayName"));
  }
  inline void setManualDisplayName(VX_IDENTITY_TYPE((std::tuple<bool, QString>))
                                       value) {
    setProperty("ManualDisplayName", QVariant::fromValue(value));
  }

  Q_PROPERTY(QDBusObjectPath ParentNodeGroup READ parentNodeGroup WRITE
                 setParentNodeGroup)
  inline QDBusObjectPath parentNodeGroup() const {
    return qvariant_cast<QDBusObjectPath>(property("ParentNodeGroup"));
  }
  inline void setParentNodeGroup(const QDBusObjectPath& value) {
    setProperty("ParentNodeGroup", QVariant::fromValue(value));
  }

  Q_PROPERTY(QDBusObjectPath Prototype READ prototype)
  inline QDBusObjectPath prototype() const {
    return qvariant_cast<QDBusObjectPath>(property("Prototype"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Destroy(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Destroy"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusVariant> GetProperty(
      const QString& key,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(key) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetProperty"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> SetProperties(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & values,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(values) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("SetProperties"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> SetProperty(
      const QString& key, const QDBusVariant& value,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(key) << QVariant::fromValue(value)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("SetProperty"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
  void PropertyChanged(const QString& propertyName, const QDBusVariant& value,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options);
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.NodeProperty
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieNodePropertyInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.NodeProperty";
  }

 public:
  DeUni_stuttgartVoxieNodePropertyInterface(const QString& service,
                                            const QString& path,
                                            const QDBusConnection& connection,
                                            QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieNodePropertyInterface();

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.NodePrototype
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieNodePrototypeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.NodePrototype";
  }

 public:
  DeUni_stuttgartVoxieNodePrototypeInterface(const QString& service,
                                             const QString& path,
                                             const QDBusConnection& connection,
                                             QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieNodePrototypeInterface();

  Q_PROPERTY(QString Description READ description)
  inline QString description() const {
    return qvariant_cast<QString>(property("Description"));
  }

  Q_PROPERTY(QString DisplayName READ displayName)
  inline QString displayName() const {
    return qvariant_cast<QString>(property("DisplayName"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

  Q_PROPERTY(QString NodeKind READ nodeKind)
  inline QString nodeKind() const {
    return qvariant_cast<QString>(property("NodeKind"));
  }

  Q_PROPERTY(
      QStringList SupportedDataDBusInterfaces READ supportedDataDBusInterfaces)
  inline QStringList supportedDataDBusInterfaces() const {
    return qvariant_cast<QStringList>(property("SupportedDataDBusInterfaces"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> CreateNode(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & properties,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(properties)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateNode"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  GetPropertyByName(const QString& name,
                    const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                        options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(name) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetPropertyByName"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  ListProperties(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                 options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListProperties"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Object
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieObjectInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Object";
  }

 public:
  DeUni_stuttgartVoxieObjectInterface(const QString& service,
                                      const QString& path,
                                      const QDBusConnection& connection,
                                      QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieObjectInterface();

  Q_PROPERTY(QString AutomaticDisplayName READ automaticDisplayName)
  inline QString automaticDisplayName() const {
    return qvariant_cast<QString>(property("AutomaticDisplayName"));
  }

  Q_PROPERTY(QString DisplayName READ displayName)
  inline QString displayName() const {
    return qvariant_cast<QString>(property("DisplayName"));
  }

  Q_PROPERTY(QStringList ExportedProperties READ exportedProperties WRITE
                 setExportedProperties)
  inline QStringList exportedProperties() const {
    return qvariant_cast<QStringList>(property("ExportedProperties"));
  }
  inline void setExportedProperties(const QStringList& value) {
    setProperty("ExportedProperties", QVariant::fromValue(value));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 GraphPosition READ graphPosition WRITE setGraphPosition)
  inline VX_IDENTITY_TYPE((std::tuple<double, double>)) graphPosition() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<double, double>))>(
        property("GraphPosition"));
  }
  inline void setGraphPosition(VX_IDENTITY_TYPE((std::tuple<double, double>))
                                   value) {
    setProperty("GraphPosition", QVariant::fromValue(value));
  }

  Q_PROPERTY(
      VX_IDENTITY_TYPE((std::tuple<bool, QString>))
          ManualDisplayName READ manualDisplayName WRITE setManualDisplayName)
  inline VX_IDENTITY_TYPE((std::tuple<bool, QString>))
      manualDisplayName() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<bool, QString>))>(
        property("ManualDisplayName"));
  }
  inline void setManualDisplayName(VX_IDENTITY_TYPE((std::tuple<bool, QString>))
                                       value) {
    setProperty("ManualDisplayName", QVariant::fromValue(value));
  }

  Q_PROPERTY(QDBusObjectPath ParentNodeGroup READ parentNodeGroup WRITE
                 setParentNodeGroup)
  inline QDBusObjectPath parentNodeGroup() const {
    return qvariant_cast<QDBusObjectPath>(property("ParentNodeGroup"));
  }
  inline void setParentNodeGroup(const QDBusObjectPath& value) {
    setProperty("ParentNodeGroup", QVariant::fromValue(value));
  }

  Q_PROPERTY(QDBusObjectPath Prototype READ prototype)
  inline QDBusObjectPath prototype() const {
    return qvariant_cast<QDBusObjectPath>(property("Prototype"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Destroy(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Destroy"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusVariant> GetProperty(
      const QString& key,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(key) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetProperty"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> SetProperties(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & values,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(values) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("SetProperties"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> SetProperty(
      const QString& key, const QDBusVariant& value,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(key) << QVariant::fromValue(value)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("SetProperty"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
  void PropertyChanged(const QString& propertyName, const QDBusVariant& value,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options);
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ObjectProperty
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieObjectPropertyInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ObjectProperty";
  }

 public:
  DeUni_stuttgartVoxieObjectPropertyInterface(const QString& service,
                                              const QString& path,
                                              const QDBusConnection& connection,
                                              QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieObjectPropertyInterface();

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.ObjectPrototype
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieObjectPrototypeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.ObjectPrototype";
  }

 public:
  DeUni_stuttgartVoxieObjectPrototypeInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieObjectPrototypeInterface();

  Q_PROPERTY(QString Description READ description)
  inline QString description() const {
    return qvariant_cast<QString>(property("Description"));
  }

  Q_PROPERTY(QString DisplayName READ displayName)
  inline QString displayName() const {
    return qvariant_cast<QString>(property("DisplayName"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

  Q_PROPERTY(QString ObjectKind READ objectKind)
  inline QString objectKind() const {
    return qvariant_cast<QString>(property("ObjectKind"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath> CreateObject(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & properties,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(properties)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("CreateObject"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QDBusObjectPath>
  GetObjectPropertyByName(
      const QString& name,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(name) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetObjectPropertyByName"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QList<QDBusObjectPath>>
  ListObjectProperties(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                       options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ListObjectProperties"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Operation
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieOperationInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Operation";
  }

 public:
  DeUni_stuttgartVoxieOperationInterface(const QString& service,
                                         const QString& path,
                                         const QDBusConnection& connection,
                                         QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieOperationInterface();

  Q_PROPERTY(bool IsCancelled READ isCancelled)
  inline bool isCancelled() const {
    return qvariant_cast<bool>(property("IsCancelled"));
  }

  Q_PROPERTY(bool IsFinished READ isFinished)
  inline bool isFinished() const {
    return qvariant_cast<bool>(property("IsFinished"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QString, QString> GetError() {
    QList<QVariant> argumentList;
    return asyncCallWithArgumentList(QStringLiteral("GetError"), argumentList);
  }
  inline QDBusReply<QString> GetError(QString& message) {
    QList<QVariant> argumentList;
    QDBusMessage reply = callWithArgumentList(
        QDBus::Block, QStringLiteral("GetError"), argumentList);
    if (reply.type() == QDBusMessage::ReplyMessage &&
        reply.arguments().count() == 2) {
      message = qdbus_cast<QString>(reply.arguments().at(1));
    }
    return reply;
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<bool> GetSucceeded() {
    QList<QVariant> argumentList;
    return asyncCallWithArgumentList(QStringLiteral("GetSucceeded"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> WaitFor(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("WaitFor"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
  void Finished(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                options);
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.OperationResult
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieOperationResultInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.OperationResult";
  }

 public:
  DeUni_stuttgartVoxieOperationResultInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieOperationResultInterface();

  Q_PROPERTY(QDBusObjectPath Operation READ operation)
  inline QDBusObjectPath operation() const {
    return qvariant_cast<QDBusObjectPath>(property("Operation"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.OperationResultImport
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieOperationResultImportInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.OperationResultImport";
  }

 public:
  DeUni_stuttgartVoxieOperationResultImportInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieOperationResultImportInterface();

  Q_PROPERTY(QDBusObjectPath Data READ data)
  inline QDBusObjectPath data() const {
    return qvariant_cast<QDBusObjectPath>(property("Data"));
  }

  Q_PROPERTY(QDBusObjectPath DataVersion READ dataVersion)
  inline QDBusObjectPath dataVersion() const {
    return qvariant_cast<QDBusObjectPath>(property("DataVersion"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.OperationResultImportNode
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieOperationResultImportNodeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.OperationResultImportNode";
  }

 public:
  DeUni_stuttgartVoxieOperationResultImportNodeInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieOperationResultImportNodeInterface();

  Q_PROPERTY(QDBusObjectPath DataNode READ dataNode)
  inline QDBusObjectPath dataNode() const {
    return qvariant_cast<QDBusObjectPath>(property("DataNode"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.OperationResultImportObject
 */
class VOXIECLIENT_EXPORT
    DeUni_stuttgartVoxieOperationResultImportObjectInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.OperationResultImportObject";
  }

 public:
  DeUni_stuttgartVoxieOperationResultImportObjectInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieOperationResultImportObjectInterface();

  Q_PROPERTY(QDBusObjectPath DataObject READ dataObject)
  inline QDBusObjectPath dataObject() const {
    return qvariant_cast<QDBusObjectPath>(property("DataObject"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Plugin
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxiePluginInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Plugin";
  }

 public:
  DeUni_stuttgartVoxiePluginInterface(const QString& service,
                                      const QString& path,
                                      const QDBusConnection& connection,
                                      QObject* parent = nullptr);

  ~DeUni_stuttgartVoxiePluginInterface();

  Q_PROPERTY(bool IsCorePlugin READ isCorePlugin)
  inline bool isCorePlugin() const {
    return qvariant_cast<bool>(property("IsCorePlugin"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Property
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxiePropertyInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Property";
  }

 public:
  DeUni_stuttgartVoxiePropertyInterface(const QString& service,
                                        const QString& path,
                                        const QDBusConnection& connection,
                                        QObject* parent = nullptr);

  ~DeUni_stuttgartVoxiePropertyInterface();

  Q_PROPERTY(QString DisplayName READ displayName)
  inline QString displayName() const {
    return qvariant_cast<QString>(property("DisplayName"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

  Q_PROPERTY(QDBusVariant PropertyDefinition READ propertyDefinition)
  inline QDBusVariant propertyDefinition() const {
    return qvariant_cast<QDBusVariant>(property("PropertyDefinition"));
  }

  Q_PROPERTY(QDBusObjectPath Type READ type)
  inline QDBusObjectPath type() const {
    return qvariant_cast<QDBusObjectPath>(property("Type"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.PropertyType
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxiePropertyTypeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.PropertyType";
  }

 public:
  DeUni_stuttgartVoxiePropertyTypeInterface(const QString& service,
                                            const QString& path,
                                            const QDBusConnection& connection,
                                            QObject* parent = nullptr);

  ~DeUni_stuttgartVoxiePropertyTypeInterface();

  Q_PROPERTY(QDBusSignature DBusSignature READ dBusSignature)
  inline QDBusSignature dBusSignature() const {
    return qvariant_cast<QDBusSignature>(property("DBusSignature"));
  }

  Q_PROPERTY(QDBusVariant DefaultValue READ defaultValue)
  inline QDBusVariant defaultValue() const {
    return qvariant_cast<QDBusVariant>(property("DefaultValue"));
  }

  Q_PROPERTY(QString DisplayName READ displayName)
  inline QString displayName() const {
    return qvariant_cast<QString>(property("DisplayName"));
  }

  Q_PROPERTY(QString Name READ name)
  inline QString name() const {
    return qvariant_cast<QString>(property("Name"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.SurfaceData
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieSurfaceDataInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.SurfaceData";
  }

 public:
  DeUni_stuttgartVoxieSurfaceDataInterface(const QString& service,
                                           const QString& path,
                                           const QDBusConnection& connection,
                                           QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieSurfaceDataInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE(
      (QList<std::tuple<
           QString, QString, quint64, std::tuple<QString, quint32, QString>,
           QString, QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>>))
                 Attributes READ attributes)
  inline VX_IDENTITY_TYPE(
      (QList<std::tuple<
           QString, QString, quint64, std::tuple<QString, quint32, QString>,
           QString, QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>>))
      attributes() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (QList<std::tuple<QString, QString, quint64,
                          std::tuple<QString, quint32, QString>, QString,
                          QMap<QString, QDBusVariant>,
                          QMap<QString, QDBusVariant>>>))>(
        property("Attributes"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.SurfaceDataTriangleIndexed
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieSurfaceDataTriangleIndexedInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.SurfaceDataTriangleIndexed";
  }

 public:
  DeUni_stuttgartVoxieSurfaceDataTriangleIndexedInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieSurfaceDataTriangleIndexedInterface();

  Q_PROPERTY(qulonglong TriangleCount READ triangleCount)
  inline qulonglong triangleCount() const {
    return qvariant_cast<qulonglong>(property("TriangleCount"));
  }

  Q_PROPERTY(bool TrianglesWritable READ trianglesWritable)
  inline bool trianglesWritable() const {
    return qvariant_cast<bool>(property("TrianglesWritable"));
  }

  Q_PROPERTY(qulonglong VertexCount READ vertexCount)
  inline qulonglong vertexCount() const {
    return qvariant_cast<qulonglong>(property("VertexCount"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))>
  GetAttributeReadonly(const QString& name,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(name) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetAttributeReadonly"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))>
  GetAttributeWritable(const QDBusObjectPath& update, const QString& name,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(name)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetAttributeWritable"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))>
  GetTrianglesReadonly(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                       options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetTrianglesReadonly"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))>
  GetTrianglesWritable(const QDBusObjectPath& update,
                       const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                           options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetTrianglesWritable"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))>
  GetVerticesReadonly(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetVerticesReadonly"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<VX_IDENTITY_TYPE(
      (std::tuple<QMap<QString, QDBusVariant>, qint64,
                  std::tuple<QString, quint32, QString>,
                  std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                  QMap<QString, QDBusVariant>>))>
  GetVerticesWritable(const QDBusObjectPath& update,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetVerticesWritable"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.TableData
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieTableDataInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.TableData";
  }

 public:
  DeUni_stuttgartVoxieTableDataInterface(const QString& service,
                                         const QString& path,
                                         const QDBusConnection& connection,
                                         QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieTableDataInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE(
      (QList<std::tuple<QString, QDBusObjectPath, QString,
                        QMap<QString, QDBusVariant>,
                        QMap<QString, QDBusVariant>>>)) Columns READ columns)
  inline VX_IDENTITY_TYPE((QList<std::tuple<QString, QDBusObjectPath, QString,
                                            QMap<QString, QDBusVariant>,
                                            QMap<QString, QDBusVariant>>>))
      columns() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (QList<std::tuple<QString, QDBusObjectPath, QString,
                          QMap<QString, QDBusVariant>,
                          QMap<QString, QDBusVariant>>>))>(property("Columns"));
  }

  Q_PROPERTY(qulonglong RowCount READ rowCount)
  inline qulonglong rowCount() const {
    return qvariant_cast<qulonglong>(property("RowCount"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<qulonglong> AddRow(
      const QDBusObjectPath& update, const QVariantList& data,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(data)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("AddRow"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((QList<std::tuple<quint64, QList<QDBusVariant>>>))>
  GetRows(qulonglong firstRowID, qulonglong lastRowID,
          const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(firstRowID)
                 << QVariant::fromValue(lastRowID)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetRows"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<bool> RemoveRow(
      const QDBusObjectPath& update, qulonglong rowID,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(rowID)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("RemoveRow"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.TomographyRawData
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieTomographyRawDataInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.TomographyRawData";
  }

 public:
  DeUni_stuttgartVoxieTomographyRawDataInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieTomographyRawDataInterface();

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.TomographyRawData2DAccessor
 */
class VOXIECLIENT_EXPORT
    DeUni_stuttgartVoxieTomographyRawData2DAccessorInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.TomographyRawData2DAccessor";
  }

 public:
  DeUni_stuttgartVoxieTomographyRawData2DAccessorInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieTomographyRawData2DAccessorInterface();

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface
 * de.uni_stuttgart.Voxie.TomographyRawData2DAccessorOperations
 */
class VOXIECLIENT_EXPORT
    DeUni_stuttgartVoxieTomographyRawData2DAccessorOperationsInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.TomographyRawData2DAccessorOperations";
  }

 public:
  DeUni_stuttgartVoxieTomographyRawData2DAccessorOperationsInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieTomographyRawData2DAccessorOperationsInterface();

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QStringList>
  GetAvailableGeometryTypes(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(
        QStringLiteral("GetAvailableGeometryTypes"), argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((QList<QMap<QString, QDBusVariant>>))>
  GetAvailableImageKinds(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                         options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetAvailableImageKinds"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QStringList>
  GetAvailableStreams(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetAvailableStreams"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>
  GetGeometryData(const QString& geometryType,
                  const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(geometryType)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetGeometryData"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((std::tuple<quint64, quint64>))>
  GetImageShape(const QString& stream, qulonglong id,
                const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                    options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(stream) << QVariant::fromValue(id)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetImageShape"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>
  GetMetadata(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetMetadata"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<qulonglong> GetNumberOfImages(
      const QString& stream,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(stream) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetNumberOfImages"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>))>
  GetPerImageMetadata(const QString& stream, qulonglong id,
                      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                          options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(stream) << QVariant::fromValue(id)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetPerImageMetadata"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<QString> ReadImages(
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & imageKind,
      const VX_IDENTITY_TYPE((QList<std::tuple<QString, quint64>>)) & images,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & inputRegionStart,
      const VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)) & output,
      qulonglong firstOutputImageId,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) &
          outputRegionStart,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & regionSize,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(imageKind)
                 << QVariant::fromValue(images)
                 << QVariant::fromValue(inputRegionStart)
                 << QVariant::fromValue(output)
                 << QVariant::fromValue(firstOutputImageId)
                 << QVariant::fromValue(outputRegionStart)
                 << QVariant::fromValue(regionSize)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ReadImages"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.TomographyRawData2DRegular
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieTomographyRawData2DRegularInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.TomographyRawData2DRegular";
  }

 public:
  DeUni_stuttgartVoxieTomographyRawData2DRegularInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieTomographyRawData2DRegularInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
                 DataType READ dataType)
  inline VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
      dataType() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (std::tuple<QString, quint32, QString>))>(property("DataType"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 GridSpacing READ gridSpacing)
  inline VX_IDENTITY_TYPE((std::tuple<double, double>)) gridSpacing() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<double, double>))>(
        property("GridSpacing"));
  }

  Q_PROPERTY(qulonglong ImageCount READ imageCount)
  inline qulonglong imageCount() const {
    return qvariant_cast<qulonglong>(property("ImageCount"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 ImageOrigin READ imageOrigin)
  inline VX_IDENTITY_TYPE((std::tuple<double, double>)) imageOrigin() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<double, double>))>(
        property("ImageOrigin"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<quint64, quint64>))
                 ImageShape READ imageShape)
  inline VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) imageShape() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<quint64, quint64>))>(
        property("ImageShape"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                   std::tuple<QString, quint32, QString>,
                                   std::tuple<quint64, quint64, quint64>,
                                   std::tuple<qint64, qint64, qint64>,
                                   QMap<QString, QDBusVariant>>))>
  GetDataReadonly(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                  options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetDataReadonly"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                   std::tuple<QString, quint32, QString>,
                                   std::tuple<quint64, quint64, quint64>,
                                   std::tuple<qint64, qint64, qint64>,
                                   QMap<QString, QDBusVariant>>))>
  GetDataWritable(const QDBusObjectPath& update,
                  const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetDataWritable"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Save(
      const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(fileName)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Save"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.TomographyRawDataAccessor
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieTomographyRawDataAccessorInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.TomographyRawDataAccessor";
  }

 public:
  DeUni_stuttgartVoxieTomographyRawDataAccessorInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieTomographyRawDataAccessorInterface();

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.TomographyRawDataBase
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieTomographyRawDataBaseInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.TomographyRawDataBase";
  }

 public:
  DeUni_stuttgartVoxieTomographyRawDataBaseInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieTomographyRawDataBaseInterface();

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.Utilities
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieUtilitiesInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.Utilities";
  }

 public:
  DeUni_stuttgartVoxieUtilitiesInterface(const QString& service,
                                         const QString& path,
                                         const QDBusConnection& connection,
                                         QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieUtilitiesInterface();

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> ExtractSlice(
      const QDBusObjectPath& volume,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double>)) & origin,
      const VX_IDENTITY_TYPE((std::tuple<double, double, double, double>)) &
          rotation,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & outputSize,
      const VX_IDENTITY_TYPE((std::tuple<double, double>)) & pixelSize,
      const QDBusObjectPath& outputImage,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(volume) << QVariant::fromValue(origin)
                 << QVariant::fromValue(rotation)
                 << QVariant::fromValue(outputSize)
                 << QVariant::fromValue(pixelSize)
                 << QVariant::fromValue(outputImage)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("ExtractSlice"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.VisualizerNode
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieVisualizerNodeInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.VisualizerNode";
  }

 public:
  DeUni_stuttgartVoxieVisualizerNodeInterface(const QString& service,
                                              const QString& path,
                                              const QDBusConnection& connection,
                                              QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieVisualizerNodeInterface();

  Q_PROPERTY(bool IsAttached READ isAttached WRITE setIsAttached)
  inline bool isAttached() const {
    return qvariant_cast<bool>(property("IsAttached"));
  }
  inline void setIsAttached(bool value) {
    setProperty("IsAttached", QVariant::fromValue(value));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 VisualizerPosition READ visualizerPosition WRITE
                     setVisualizerPosition)
  inline VX_IDENTITY_TYPE((std::tuple<double, double>))
      visualizerPosition() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<double, double>))>(
        property("VisualizerPosition"));
  }
  inline void setVisualizerPosition(
      VX_IDENTITY_TYPE((std::tuple<double, double>)) value) {
    setProperty("VisualizerPosition", QVariant::fromValue(value));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 VisualizerSize READ visualizerSize WRITE setVisualizerSize)
  inline VX_IDENTITY_TYPE((std::tuple<double, double>)) visualizerSize() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<double, double>))>(
        property("VisualizerSize"));
  }
  inline void setVisualizerSize(VX_IDENTITY_TYPE((std::tuple<double, double>))
                                    value) {
    setProperty("VisualizerSize", QVariant::fromValue(value));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> RenderScreenshot(
      const QDBusObjectPath& image,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) &
          outputRegionStart,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & size,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(image)
                 << QVariant::fromValue(outputRegionStart)
                 << QVariant::fromValue(size) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("RenderScreenshot"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.VisualizerObject
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieVisualizerObjectInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.VisualizerObject";
  }

 public:
  DeUni_stuttgartVoxieVisualizerObjectInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieVisualizerObjectInterface();

  Q_PROPERTY(bool IsAttached READ isAttached WRITE setIsAttached)
  inline bool isAttached() const {
    return qvariant_cast<bool>(property("IsAttached"));
  }
  inline void setIsAttached(bool value) {
    setProperty("IsAttached", QVariant::fromValue(value));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 VisualizerPosition READ visualizerPosition WRITE
                     setVisualizerPosition)
  inline VX_IDENTITY_TYPE((std::tuple<double, double>))
      visualizerPosition() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<double, double>))>(
        property("VisualizerPosition"));
  }
  inline void setVisualizerPosition(
      VX_IDENTITY_TYPE((std::tuple<double, double>)) value) {
    setProperty("VisualizerPosition", QVariant::fromValue(value));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double>))
                 VisualizerSize READ visualizerSize WRITE setVisualizerSize)
  inline VX_IDENTITY_TYPE((std::tuple<double, double>)) visualizerSize() const {
    return qvariant_cast<VX_IDENTITY_TYPE((std::tuple<double, double>))>(
        property("VisualizerSize"));
  }
  inline void setVisualizerSize(VX_IDENTITY_TYPE((std::tuple<double, double>))
                                    value) {
    setProperty("VisualizerSize", QVariant::fromValue(value));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> RenderScreenshot(
      const QDBusObjectPath& image,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) &
          outputRegionStart,
      const VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)) & size,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(image)
                 << QVariant::fromValue(outputRegionStart)
                 << QVariant::fromValue(size) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("RenderScreenshot"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.VolumeData
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieVolumeDataInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.VolumeData";
  }

 public:
  DeUni_stuttgartVoxieVolumeDataInterface(const QString& service,
                                          const QString& path,
                                          const QDBusConnection& connection,
                                          QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieVolumeDataInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
                 DataType READ dataType)
  inline VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>))
      dataType() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (std::tuple<QString, quint32, QString>))>(property("DataType"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double>))
                 VolumeOrigin READ volumeOrigin)
  inline VX_IDENTITY_TYPE((std::tuple<double, double, double>))
      volumeOrigin() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (std::tuple<double, double, double>))>(property("VolumeOrigin"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double>))
                 VolumeSize READ volumeSize)
  inline VX_IDENTITY_TYPE((std::tuple<double, double, double>))
      volumeSize() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (std::tuple<double, double, double>))>(property("VolumeSize"));
  }

  Q_PROPERTY(QDBusObjectPath VolumeStructure READ volumeStructure)
  inline QDBusObjectPath volumeStructure() const {
    return qvariant_cast<QDBusObjectPath>(property("VolumeStructure"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<> Save(
      const QString& fileName,
      const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) & options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(fileName)
                 << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("Save"), argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.VolumeDataVoxel
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieVolumeDataVoxelInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.VolumeDataVoxel";
  }

 public:
  DeUni_stuttgartVoxieVolumeDataVoxelInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieVolumeDataVoxelInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>))
                 ArrayShape READ arrayShape)
  inline VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>))
      arrayShape() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (std::tuple<quint64, quint64, quint64>))>(property("ArrayShape"));
  }

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<double, double, double>))
                 GridSpacing READ gridSpacing)
  inline VX_IDENTITY_TYPE((std::tuple<double, double, double>))
      gridSpacing() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (std::tuple<double, double, double>))>(property("GridSpacing"));
  }

 public Q_SLOTS:  // METHODS
  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                   std::tuple<QString, quint32, QString>,
                                   std::tuple<quint64, quint64, quint64>,
                                   std::tuple<qint64, qint64, qint64>,
                                   QMap<QString, QDBusVariant>>))>
  GetDataReadonly(const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                  options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetDataReadonly"),
                                     argumentList);
  }

  Q_REQUIRED_RESULT vx::QDBusPendingReplyWrapper<
      VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                   std::tuple<QString, quint32, QString>,
                                   std::tuple<quint64, quint64, quint64>,
                                   std::tuple<qint64, qint64, qint64>,
                                   QMap<QString, QDBusVariant>>))>
  GetDataWritable(const QDBusObjectPath& update,
                  const VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)) &
                      options) {
    QList<QVariant> argumentList;
    argumentList << QVariant::fromValue(update) << QVariant::fromValue(options);
    return asyncCallWithArgumentList(QStringLiteral("GetDataWritable"),
                                     argumentList);
  }

 Q_SIGNALS:  // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.VolumeStructure
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieVolumeStructureInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.VolumeStructure";
  }

 public:
  DeUni_stuttgartVoxieVolumeStructureInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieVolumeStructureInterface();

  Q_PROPERTY(QString VolumeStructureType READ volumeStructureType)
  inline QString volumeStructureType() const {
    return qvariant_cast<QString>(property("VolumeStructureType"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

/*
 * Proxy class for interface de.uni_stuttgart.Voxie.VolumeStructureVoxel
 */
class VOXIECLIENT_EXPORT DeUni_stuttgartVoxieVolumeStructureVoxelInterface
    : public QDBusAbstractInterface {
  Q_OBJECT
 public:
  static inline const char* staticInterfaceName() {
    return "de.uni_stuttgart.Voxie.VolumeStructureVoxel";
  }

 public:
  DeUni_stuttgartVoxieVolumeStructureVoxelInterface(
      const QString& service, const QString& path,
      const QDBusConnection& connection, QObject* parent = nullptr);

  ~DeUni_stuttgartVoxieVolumeStructureVoxelInterface();

  Q_PROPERTY(VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>))
                 ArrayShape READ arrayShape)
  inline VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>))
      arrayShape() const {
    return qvariant_cast<VX_IDENTITY_TYPE(
        (std::tuple<quint64, quint64, quint64>))>(property("ArrayShape"));
  }

 public Q_SLOTS:  // METHODS
 Q_SIGNALS:       // SIGNALS
};

namespace de {
namespace uni_stuttgart {
namespace Voxie {
typedef ::DeUni_stuttgartVoxieClientInterface Client;
typedef ::DeUni_stuttgartVoxieClientManagerInterface ClientManager;
typedef ::DeUni_stuttgartVoxieComponentInterface Component;
typedef ::DeUni_stuttgartVoxieComponentContainerInterface ComponentContainer;
typedef ::DeUni_stuttgartVoxieContainerDataInterface ContainerData;
typedef ::DeUni_stuttgartVoxieDataInterface Data;
typedef ::DeUni_stuttgartVoxieDataNodeInterface DataNode;
typedef ::DeUni_stuttgartVoxieDataObjectInterface DataObject;
typedef ::DeUni_stuttgartVoxieDataVersionInterface DataVersion;
typedef ::DeUni_stuttgartVoxieDebugOptionInterface DebugOption;
typedef ::DeUni_stuttgartVoxieDynamicObjectInterface DynamicObject;
typedef ::DeUni_stuttgartVoxieEventListDataAccessorInterface
    EventListDataAccessor;
typedef ::DeUni_stuttgartVoxieEventListDataAccessorOperationsInterface
    EventListDataAccessorOperations;
typedef ::DeUni_stuttgartVoxieEventListDataBufferInterface EventListDataBuffer;
typedef ::DeUni_stuttgartVoxieExporterInterface Exporter;
typedef ::DeUni_stuttgartVoxieExtensionInterface Extension;
typedef ::DeUni_stuttgartVoxieExternalDataUpdateInterface ExternalDataUpdate;
typedef ::DeUni_stuttgartVoxieExternalOperationInterface ExternalOperation;
typedef ::DeUni_stuttgartVoxieExternalOperationExportInterface
    ExternalOperationExport;
typedef ::DeUni_stuttgartVoxieExternalOperationImportInterface
    ExternalOperationImport;
typedef ::DeUni_stuttgartVoxieExternalOperationRunFilterInterface
    ExternalOperationRunFilter;
typedef ::DeUni_stuttgartVoxieExternalOperationRunSegmentationStepInterface
    ExternalOperationRunSegmentationStep;
typedef ::DeUni_stuttgartVoxieFilterNodeInterface FilterNode;
typedef ::DeUni_stuttgartVoxieFilterObjectInterface FilterObject;
typedef ::DeUni_stuttgartVoxieGeometricPrimitiveDataInterface
    GeometricPrimitiveData;
typedef ::DeUni_stuttgartVoxieGeometricPrimitiveTypeInterface
    GeometricPrimitiveType;
typedef ::DeUni_stuttgartVoxieGuiInterface Gui;
typedef ::DeUni_stuttgartVoxieImageDataPixelInterface ImageDataPixel;
typedef ::DeUni_stuttgartVoxieImporterInterface Importer;
typedef ::DeUni_stuttgartVoxieImporterPropertyInterface ImporterProperty;
typedef ::DeUni_stuttgartVoxieInstanceInterface Instance;
typedef ::DeUni_stuttgartVoxieNodeInterface Node;
typedef ::DeUni_stuttgartVoxieNodePropertyInterface NodeProperty;
typedef ::DeUni_stuttgartVoxieNodePrototypeInterface NodePrototype;
typedef ::DeUni_stuttgartVoxieObjectInterface Object;
typedef ::DeUni_stuttgartVoxieObjectPropertyInterface ObjectProperty;
typedef ::DeUni_stuttgartVoxieObjectPrototypeInterface ObjectPrototype;
typedef ::DeUni_stuttgartVoxieOperationInterface Operation;
typedef ::DeUni_stuttgartVoxieOperationResultInterface OperationResult;
typedef ::DeUni_stuttgartVoxieOperationResultImportInterface
    OperationResultImport;
typedef ::DeUni_stuttgartVoxieOperationResultImportNodeInterface
    OperationResultImportNode;
typedef ::DeUni_stuttgartVoxieOperationResultImportObjectInterface
    OperationResultImportObject;
typedef ::DeUni_stuttgartVoxiePluginInterface Plugin;
typedef ::DeUni_stuttgartVoxiePropertyInterface Property;
typedef ::DeUni_stuttgartVoxiePropertyTypeInterface PropertyType;
typedef ::DeUni_stuttgartVoxieSurfaceDataInterface SurfaceData;
typedef ::DeUni_stuttgartVoxieSurfaceDataTriangleIndexedInterface
    SurfaceDataTriangleIndexed;
typedef ::DeUni_stuttgartVoxieTableDataInterface TableData;
typedef ::DeUni_stuttgartVoxieTomographyRawDataInterface TomographyRawData;
typedef ::DeUni_stuttgartVoxieTomographyRawData2DAccessorInterface
    TomographyRawData2DAccessor;
typedef ::DeUni_stuttgartVoxieTomographyRawData2DAccessorOperationsInterface
    TomographyRawData2DAccessorOperations;
typedef ::DeUni_stuttgartVoxieTomographyRawData2DRegularInterface
    TomographyRawData2DRegular;
typedef ::DeUni_stuttgartVoxieTomographyRawDataAccessorInterface
    TomographyRawDataAccessor;
typedef ::DeUni_stuttgartVoxieTomographyRawDataBaseInterface
    TomographyRawDataBase;
typedef ::DeUni_stuttgartVoxieUtilitiesInterface Utilities;
typedef ::DeUni_stuttgartVoxieVisualizerNodeInterface VisualizerNode;
typedef ::DeUni_stuttgartVoxieVisualizerObjectInterface VisualizerObject;
typedef ::DeUni_stuttgartVoxieVolumeDataInterface VolumeData;
typedef ::DeUni_stuttgartVoxieVolumeDataVoxelInterface VolumeDataVoxel;
typedef ::DeUni_stuttgartVoxieVolumeStructureInterface VolumeStructure;
typedef ::DeUni_stuttgartVoxieVolumeStructureVoxelInterface
    VolumeStructureVoxel;
}  // namespace Voxie
}  // namespace uni_stuttgart
}  // namespace de
#endif
