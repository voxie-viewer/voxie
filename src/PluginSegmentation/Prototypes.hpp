// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#pragma once

#include <QtCore/QJsonObject>
#include <QtCore/QList>
#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtGui/QQuaternion>
#include <QtGui/QVector3D>
#include <Voxie/Data/Color.hpp>
#include <Voxie/Data/ColorizerEntry.hpp>
#include <Voxie/Node/Node.hpp>
#include <Voxie/Node/Types.hpp>
#include <VoxieBackend/Data/DataType.hpp>

namespace vx {
#ifndef VOXIE_PROP_DEFINED_BrushEraseCentersWithRadius
#define VOXIE_PROP_DEFINED_BrushEraseCentersWithRadius
namespace PropType {
class BrushEraseCentersWithRadius : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::BrushEraseCentersWithRadius
    BrushEraseCentersWithRadius = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_BrushSelectCentersWithRadius
#define VOXIE_PROP_DEFINED_BrushSelectCentersWithRadius
namespace PropType {
class BrushSelectCentersWithRadius : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::BrushSelectCentersWithRadius
    BrushSelectCentersWithRadius = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Color
#define VOXIE_PROP_DEFINED_Color
namespace PropType {
class Color : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Color Color = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Description
#define VOXIE_PROP_DEFINED_Description
namespace PropType {
class Description : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Description Description = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Input
#define VOXIE_PROP_DEFINED_Input
namespace PropType {
class Input : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Input Input = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_LabelID
#define VOXIE_PROP_DEFINED_LabelID
namespace PropType {
class LabelID : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::LabelID LabelID = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_LabelIDs
#define VOXIE_PROP_DEFINED_LabelIDs
namespace PropType {
class LabelIDs : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::LabelIDs LabelIDs = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_LabelId
#define VOXIE_PROP_DEFINED_LabelId
namespace PropType {
class LabelId : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::LabelId LabelId = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_LabelIds
#define VOXIE_PROP_DEFINED_LabelIds
namespace PropType {
class LabelIds : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::LabelIds LabelIds = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_LowerThreshold
#define VOXIE_PROP_DEFINED_LowerThreshold
namespace PropType {
class LowerThreshold : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::LowerThreshold LowerThreshold = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_ModificationKind
#define VOXIE_PROP_DEFINED_ModificationKind
namespace PropType {
class ModificationKind : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::ModificationKind ModificationKind = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Name
#define VOXIE_PROP_DEFINED_Name
namespace PropType {
class Name : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Name Name = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Output
#define VOXIE_PROP_DEFINED_Output
namespace PropType {
class Output : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Output Output = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_PlaneOrientation
#define VOXIE_PROP_DEFINED_PlaneOrientation
namespace PropType {
class PlaneOrientation : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::PlaneOrientation PlaneOrientation = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_PlaneOrigin
#define VOXIE_PROP_DEFINED_PlaneOrigin
namespace PropType {
class PlaneOrigin : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::PlaneOrigin PlaneOrigin = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_PolygonNodes
#define VOXIE_PROP_DEFINED_PolygonNodes
namespace PropType {
class PolygonNodes : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::PolygonNodes PolygonNodes = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_StepList
#define VOXIE_PROP_DEFINED_StepList
namespace PropType {
class StepList : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::StepList StepList = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_ThresholdList
#define VOXIE_PROP_DEFINED_ThresholdList
namespace PropType {
class ThresholdList : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::ThresholdList ThresholdList = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_UpperThreshold
#define VOXIE_PROP_DEFINED_UpperThreshold
namespace PropType {
class UpperThreshold : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::UpperThreshold UpperThreshold = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Visibility
#define VOXIE_PROP_DEFINED_Visibility
namespace PropType {
class Visibility : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Visibility Visibility = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Volume
#define VOXIE_PROP_DEFINED_Volume
namespace PropType {
class Volume : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Volume Volume = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_VolumeOrientation
#define VOXIE_PROP_DEFINED_VolumeOrientation
namespace PropType {
class VolumeOrientation : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::VolumeOrientation VolumeOrientation = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_VolumeOrigin
#define VOXIE_PROP_DEFINED_VolumeOrigin
namespace PropType {
class VolumeOrigin : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::VolumeOrigin VolumeOrigin = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_VoxelSize
#define VOXIE_PROP_DEFINED_VoxelSize
namespace PropType {
class VoxelSize : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::VoxelSize VoxelSize = {};
}
#endif
inline namespace filter_prop {
class SegmentationPropertiesEntry : public vx::PropertiesEntryBase {
  SegmentationPropertiesEntry() = delete;

 public:
  ~SegmentationPropertiesEntry();
  SegmentationPropertiesEntry(vx::PropType::Input, vx::Node*);
  SegmentationPropertiesEntry(vx::PropType::Output, vx::Node*);
  SegmentationPropertiesEntry(vx::PropType::StepList, QList<vx::Node*>);
};
class SegmentationPropertiesBase {
 public:
  virtual ~SegmentationPropertiesBase();
  virtual vx::Node* input() = 0;
  virtual QDBusObjectPath inputRaw() = 0;
  virtual vx::Node* output() = 0;
  virtual QDBusObjectPath outputRaw() = 0;
  virtual QList<vx::Node*> stepList() = 0;
  virtual QList<QDBusObjectPath> stepListRaw() = 0;
};
class SegmentationPropertiesCopy : public SegmentationPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  SegmentationPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  vx::Node* input() override final;
  QDBusObjectPath inputRaw() override final;
  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
  QList<vx::Node*> stepList() override final;
  QList<QDBusObjectPath> stepListRaw() override final;
};
class SegmentationProperties : public QObject,
                               public SegmentationPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  SegmentationProperties(vx::Node* parent);
  ~SegmentationProperties();

  vx::Node* input() override final;
  QDBusObjectPath inputRaw() override final;
  static QSharedPointer<NodeProperty> inputProperty();
  static NodePropertyTyped<vx::types::NodeReference> inputPropertyTyped();
  void setInput(vx::Node* value);
 Q_SIGNALS:
  void inputChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Input READ input WRITE setInput NOTIFY inputChanged)

  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
  static QSharedPointer<NodeProperty> outputProperty();
  static NodePropertyTyped<vx::types::OutputNodeReference>
  outputPropertyTyped();
  void setOutput(vx::Node* value);
 Q_SIGNALS:
  void outputChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Output READ output WRITE setOutput NOTIFY
  // outputChanged)

  QList<vx::Node*> stepList() override final;
  QList<QDBusObjectPath> stepListRaw() override final;
  static QSharedPointer<NodeProperty> stepListProperty();
  static NodePropertyTyped<vx::types::NodeReferenceList>
  stepListPropertyTyped();
  void setStepList(QList<vx::Node*> value);
 Q_SIGNALS:
  void stepListChanged(QList<vx::Node*> value);

 public:
  // Q_PROPERTY(QList<vx::Node*> StepList READ stepList WRITE setStepList NOTIFY
  // stepListChanged)
};

}  // namespace filter_prop
inline namespace segmentationstep_prop {
class AssignmentStepPropertiesEntry : public vx::PropertiesEntryBase {
  AssignmentStepPropertiesEntry() = delete;

 public:
  ~AssignmentStepPropertiesEntry();
  AssignmentStepPropertiesEntry(vx::PropType::LabelID, qint64);
};
class AssignmentStepPropertiesBase {
 public:
  virtual ~AssignmentStepPropertiesBase();
  virtual qint64 labelID() = 0;
  virtual qint64 labelIDRaw() = 0;
};
class AssignmentStepPropertiesCopy : public AssignmentStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  AssignmentStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  qint64 labelID() override final;
  qint64 labelIDRaw() override final;
};
class AssignmentStepProperties : public QObject,
                                 public AssignmentStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  AssignmentStepProperties(vx::Node* parent);
  ~AssignmentStepProperties();

  qint64 labelID() override final;
  qint64 labelIDRaw() override final;
  static QSharedPointer<NodeProperty> labelIDProperty();
  static NodePropertyTyped<vx::types::Int> labelIDPropertyTyped();
  void setLabelID(qint64 value);
 Q_SIGNALS:
  void labelIDChanged(qint64 value);

 public:
  // Q_PROPERTY(qint64 LabelID READ labelID WRITE setLabelID NOTIFY
  // labelIDChanged)
};

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
class BrushSelectionStepPropertiesEntry : public vx::PropertiesEntryBase {
  BrushSelectionStepPropertiesEntry() = delete;

 public:
  ~BrushSelectionStepPropertiesEntry();
  BrushSelectionStepPropertiesEntry(vx::PropType::BrushEraseCentersWithRadius,
                                    QList<std::tuple<QVector3D, double>>);
  BrushSelectionStepPropertiesEntry(vx::PropType::BrushSelectCentersWithRadius,
                                    QList<std::tuple<QVector3D, double>>);
  BrushSelectionStepPropertiesEntry(vx::PropType::PlaneOrientation,
                                    QQuaternion);
  BrushSelectionStepPropertiesEntry(vx::PropType::PlaneOrigin, QVector3D);
  BrushSelectionStepPropertiesEntry(vx::PropType::VolumeOrientation,
                                    QQuaternion);
  BrushSelectionStepPropertiesEntry(vx::PropType::VolumeOrigin, QVector3D);
  BrushSelectionStepPropertiesEntry(vx::PropType::VoxelSize, QVector3D);
};
class BrushSelectionStepPropertiesBase {
 public:
  virtual ~BrushSelectionStepPropertiesBase();
  virtual QList<std::tuple<QVector3D, double>>
  brushEraseCentersWithRadius() = 0;
  virtual QList<std::tuple<std::tuple<double, double, double>, double>>
  brushEraseCentersWithRadiusRaw() = 0;
  virtual QList<std::tuple<QVector3D, double>>
  brushSelectCentersWithRadius() = 0;
  virtual QList<std::tuple<std::tuple<double, double, double>, double>>
  brushSelectCentersWithRadiusRaw() = 0;
  virtual QQuaternion planeOrientation() = 0;
  virtual std::tuple<double, double, double, double> planeOrientationRaw() = 0;
  virtual QVector3D planeOrigin() = 0;
  virtual std::tuple<double, double, double> planeOriginRaw() = 0;
  virtual QQuaternion volumeOrientation() = 0;
  virtual std::tuple<double, double, double, double> volumeOrientationRaw() = 0;
  virtual QVector3D volumeOrigin() = 0;
  virtual std::tuple<double, double, double> volumeOriginRaw() = 0;
  virtual QVector3D voxelSize() = 0;
  virtual std::tuple<double, double, double> voxelSizeRaw() = 0;
};
class BrushSelectionStepPropertiesCopy
    : public BrushSelectionStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  BrushSelectionStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QList<std::tuple<QVector3D, double>> brushEraseCentersWithRadius()
      override final;
  QList<std::tuple<std::tuple<double, double, double>, double>>
  brushEraseCentersWithRadiusRaw() override final;
  QList<std::tuple<QVector3D, double>> brushSelectCentersWithRadius()
      override final;
  QList<std::tuple<std::tuple<double, double, double>, double>>
  brushSelectCentersWithRadiusRaw() override final;
  QQuaternion planeOrientation() override final;
  std::tuple<double, double, double, double> planeOrientationRaw()
      override final;
  QVector3D planeOrigin() override final;
  std::tuple<double, double, double> planeOriginRaw() override final;
  QQuaternion volumeOrientation() override final;
  std::tuple<double, double, double, double> volumeOrientationRaw()
      override final;
  QVector3D volumeOrigin() override final;
  std::tuple<double, double, double> volumeOriginRaw() override final;
  QVector3D voxelSize() override final;
  std::tuple<double, double, double> voxelSizeRaw() override final;
};
class BrushSelectionStepProperties : public QObject,
                                     public BrushSelectionStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  BrushSelectionStepProperties(vx::Node* parent);
  ~BrushSelectionStepProperties();

  QList<std::tuple<QVector3D, double>> brushEraseCentersWithRadius()
      override final;
  QList<std::tuple<std::tuple<double, double, double>, double>>
  brushEraseCentersWithRadiusRaw() override final;
  static QSharedPointer<NodeProperty> brushEraseCentersWithRadiusProperty();
  static NodePropertyTyped<vx::types::ListPosition3DDoubleTuple>
  brushEraseCentersWithRadiusPropertyTyped();
  void setBrushEraseCentersWithRadius(
      QList<std::tuple<QVector3D, double>> value);
 Q_SIGNALS:
  void brushEraseCentersWithRadiusChanged(
      QList<std::tuple<QVector3D, double>> value);

 public:
  // Q_PROPERTY(QList<std::tuple<QVector3D, double>> BrushEraseCentersWithRadius
  // READ brushEraseCentersWithRadius WRITE setBrushEraseCentersWithRadius NOTIFY
  // brushEraseCentersWithRadiusChanged)

  QList<std::tuple<QVector3D, double>> brushSelectCentersWithRadius()
      override final;
  QList<std::tuple<std::tuple<double, double, double>, double>>
  brushSelectCentersWithRadiusRaw() override final;
  static QSharedPointer<NodeProperty> brushSelectCentersWithRadiusProperty();
  static NodePropertyTyped<vx::types::ListPosition3DDoubleTuple>
  brushSelectCentersWithRadiusPropertyTyped();
  void setBrushSelectCentersWithRadius(
      QList<std::tuple<QVector3D, double>> value);
 Q_SIGNALS:
  void brushSelectCentersWithRadiusChanged(
      QList<std::tuple<QVector3D, double>> value);

 public:
  // Q_PROPERTY(QList<std::tuple<QVector3D, double>>
  // BrushSelectCentersWithRadius READ brushSelectCentersWithRadius WRITE
  // setBrushSelectCentersWithRadius NOTIFY brushSelectCentersWithRadiusChanged)

  QQuaternion planeOrientation() override final;
  std::tuple<double, double, double, double> planeOrientationRaw()
      override final;
  static QSharedPointer<NodeProperty> planeOrientationProperty();
  static NodePropertyTyped<vx::types::Orientation3D>
  planeOrientationPropertyTyped();
  void setPlaneOrientation(QQuaternion value);
 Q_SIGNALS:
  void planeOrientationChanged(QQuaternion value);

 public:
  // Q_PROPERTY(QQuaternion PlaneOrientation READ planeOrientation WRITE
  // setPlaneOrientation NOTIFY planeOrientationChanged)

  QVector3D planeOrigin() override final;
  std::tuple<double, double, double> planeOriginRaw() override final;
  static QSharedPointer<NodeProperty> planeOriginProperty();
  static NodePropertyTyped<vx::types::Position3D> planeOriginPropertyTyped();
  void setPlaneOrigin(QVector3D value);
 Q_SIGNALS:
  void planeOriginChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D PlaneOrigin READ planeOrigin WRITE setPlaneOrigin
  // NOTIFY planeOriginChanged)

  QQuaternion volumeOrientation() override final;
  std::tuple<double, double, double, double> volumeOrientationRaw()
      override final;
  static QSharedPointer<NodeProperty> volumeOrientationProperty();
  static NodePropertyTyped<vx::types::Orientation3D>
  volumeOrientationPropertyTyped();
  void setVolumeOrientation(QQuaternion value);
 Q_SIGNALS:
  void volumeOrientationChanged(QQuaternion value);

 public:
  // Q_PROPERTY(QQuaternion VolumeOrientation READ volumeOrientation WRITE
  // setVolumeOrientation NOTIFY volumeOrientationChanged)

  QVector3D volumeOrigin() override final;
  std::tuple<double, double, double> volumeOriginRaw() override final;
  static QSharedPointer<NodeProperty> volumeOriginProperty();
  static NodePropertyTyped<vx::types::Position3D> volumeOriginPropertyTyped();
  void setVolumeOrigin(QVector3D value);
 Q_SIGNALS:
  void volumeOriginChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D VolumeOrigin READ volumeOrigin WRITE setVolumeOrigin
  // NOTIFY volumeOriginChanged)

  QVector3D voxelSize() override final;
  std::tuple<double, double, double> voxelSizeRaw() override final;
  static QSharedPointer<NodeProperty> voxelSizeProperty();
  static NodePropertyTyped<vx::types::Position3D> voxelSizePropertyTyped();
  void setVoxelSize(QVector3D value);
 Q_SIGNALS:
  void voxelSizeChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D VoxelSize READ voxelSize WRITE setVoxelSize NOTIFY
  // voxelSizeChanged)
};

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
class LassoSelectionStepPropertiesEntry : public vx::PropertiesEntryBase {
  LassoSelectionStepPropertiesEntry() = delete;

 public:
  ~LassoSelectionStepPropertiesEntry();
  LassoSelectionStepPropertiesEntry(vx::PropType::PlaneOrientation,
                                    QQuaternion);
  LassoSelectionStepPropertiesEntry(vx::PropType::PlaneOrigin, QVector3D);
  LassoSelectionStepPropertiesEntry(vx::PropType::PolygonNodes,
                                    QList<QVector3D>);
  LassoSelectionStepPropertiesEntry(vx::PropType::VolumeOrientation,
                                    QQuaternion);
  LassoSelectionStepPropertiesEntry(vx::PropType::VolumeOrigin, QVector3D);
  LassoSelectionStepPropertiesEntry(vx::PropType::VoxelSize, QVector3D);
};
class LassoSelectionStepPropertiesBase {
 public:
  virtual ~LassoSelectionStepPropertiesBase();
  virtual QQuaternion planeOrientation() = 0;
  virtual std::tuple<double, double, double, double> planeOrientationRaw() = 0;
  virtual QVector3D planeOrigin() = 0;
  virtual std::tuple<double, double, double> planeOriginRaw() = 0;
  virtual QList<QVector3D> polygonNodes() = 0;
  virtual QList<std::tuple<double, double, double>> polygonNodesRaw() = 0;
  virtual QQuaternion volumeOrientation() = 0;
  virtual std::tuple<double, double, double, double> volumeOrientationRaw() = 0;
  virtual QVector3D volumeOrigin() = 0;
  virtual std::tuple<double, double, double> volumeOriginRaw() = 0;
  virtual QVector3D voxelSize() = 0;
  virtual std::tuple<double, double, double> voxelSizeRaw() = 0;
};
class LassoSelectionStepPropertiesCopy
    : public LassoSelectionStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  LassoSelectionStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QQuaternion planeOrientation() override final;
  std::tuple<double, double, double, double> planeOrientationRaw()
      override final;
  QVector3D planeOrigin() override final;
  std::tuple<double, double, double> planeOriginRaw() override final;
  QList<QVector3D> polygonNodes() override final;
  QList<std::tuple<double, double, double>> polygonNodesRaw() override final;
  QQuaternion volumeOrientation() override final;
  std::tuple<double, double, double, double> volumeOrientationRaw()
      override final;
  QVector3D volumeOrigin() override final;
  std::tuple<double, double, double> volumeOriginRaw() override final;
  QVector3D voxelSize() override final;
  std::tuple<double, double, double> voxelSizeRaw() override final;
};
class LassoSelectionStepProperties : public QObject,
                                     public LassoSelectionStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  LassoSelectionStepProperties(vx::Node* parent);
  ~LassoSelectionStepProperties();

  QQuaternion planeOrientation() override final;
  std::tuple<double, double, double, double> planeOrientationRaw()
      override final;
  static QSharedPointer<NodeProperty> planeOrientationProperty();
  static NodePropertyTyped<vx::types::Orientation3D>
  planeOrientationPropertyTyped();
  void setPlaneOrientation(QQuaternion value);
 Q_SIGNALS:
  void planeOrientationChanged(QQuaternion value);

 public:
  // Q_PROPERTY(QQuaternion PlaneOrientation READ planeOrientation WRITE
  // setPlaneOrientation NOTIFY planeOrientationChanged)

  QVector3D planeOrigin() override final;
  std::tuple<double, double, double> planeOriginRaw() override final;
  static QSharedPointer<NodeProperty> planeOriginProperty();
  static NodePropertyTyped<vx::types::Position3D> planeOriginPropertyTyped();
  void setPlaneOrigin(QVector3D value);
 Q_SIGNALS:
  void planeOriginChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D PlaneOrigin READ planeOrigin WRITE setPlaneOrigin
  // NOTIFY planeOriginChanged)

  QList<QVector3D> polygonNodes() override final;
  QList<std::tuple<double, double, double>> polygonNodesRaw() override final;
  static QSharedPointer<NodeProperty> polygonNodesProperty();
  static NodePropertyTyped<vx::types::ListPosition3D>
  polygonNodesPropertyTyped();
  void setPolygonNodes(QList<QVector3D> value);
 Q_SIGNALS:
  void polygonNodesChanged(QList<QVector3D> value);

 public:
  // Q_PROPERTY(QList<QVector3D> PolygonNodes READ polygonNodes WRITE
  // setPolygonNodes NOTIFY polygonNodesChanged)

  QQuaternion volumeOrientation() override final;
  std::tuple<double, double, double, double> volumeOrientationRaw()
      override final;
  static QSharedPointer<NodeProperty> volumeOrientationProperty();
  static NodePropertyTyped<vx::types::Orientation3D>
  volumeOrientationPropertyTyped();
  void setVolumeOrientation(QQuaternion value);
 Q_SIGNALS:
  void volumeOrientationChanged(QQuaternion value);

 public:
  // Q_PROPERTY(QQuaternion VolumeOrientation READ volumeOrientation WRITE
  // setVolumeOrientation NOTIFY volumeOrientationChanged)

  QVector3D volumeOrigin() override final;
  std::tuple<double, double, double> volumeOriginRaw() override final;
  static QSharedPointer<NodeProperty> volumeOriginProperty();
  static NodePropertyTyped<vx::types::Position3D> volumeOriginPropertyTyped();
  void setVolumeOrigin(QVector3D value);
 Q_SIGNALS:
  void volumeOriginChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D VolumeOrigin READ volumeOrigin WRITE setVolumeOrigin
  // NOTIFY volumeOriginChanged)

  QVector3D voxelSize() override final;
  std::tuple<double, double, double> voxelSizeRaw() override final;
  static QSharedPointer<NodeProperty> voxelSizeProperty();
  static NodePropertyTyped<vx::types::Position3D> voxelSizePropertyTyped();
  void setVoxelSize(QVector3D value);
 Q_SIGNALS:
  void voxelSizeChanged(QVector3D value);

 public:
  // Q_PROPERTY(QVector3D VoxelSize READ voxelSize WRITE setVoxelSize NOTIFY
  // voxelSizeChanged)
};

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
class ManualSelectionStepPropertiesEntry : public vx::PropertiesEntryBase {
  ManualSelectionStepPropertiesEntry() = delete;

 public:
  ~ManualSelectionStepPropertiesEntry();
  ManualSelectionStepPropertiesEntry(vx::PropType::LabelIds, QList<qint64>);
};
class ManualSelectionStepPropertiesBase {
 public:
  virtual ~ManualSelectionStepPropertiesBase();
  virtual QList<qint64> labelIds() = 0;
  virtual QList<qint64> labelIdsRaw() = 0;
};
class ManualSelectionStepPropertiesCopy
    : public ManualSelectionStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  ManualSelectionStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QList<qint64> labelIds() override final;
  QList<qint64> labelIdsRaw() override final;
};
class ManualSelectionStepProperties : public QObject,
                                      public ManualSelectionStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  ManualSelectionStepProperties(vx::Node* parent);
  ~ManualSelectionStepProperties();

  QList<qint64> labelIds() override final;
  QList<qint64> labelIdsRaw() override final;
  static QSharedPointer<NodeProperty> labelIdsProperty();
  static NodePropertyTyped<vx::types::IntList> labelIdsPropertyTyped();
  void setLabelIds(QList<qint64> value);
 Q_SIGNALS:
  void labelIdsChanged(QList<qint64> value);

 public:
  // Q_PROPERTY(QList<qint64> LabelIds READ labelIds WRITE setLabelIds NOTIFY
  // labelIdsChanged)
};

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
class MetaStepPropertiesEntry : public vx::PropertiesEntryBase {
  MetaStepPropertiesEntry() = delete;

 public:
  ~MetaStepPropertiesEntry();
  MetaStepPropertiesEntry(vx::PropType::Color, vx::Color);
  MetaStepPropertiesEntry(vx::PropType::Description, QString);
  MetaStepPropertiesEntry(vx::PropType::LabelID, qint64);
  MetaStepPropertiesEntry(vx::PropType::ModificationKind, QString);
  MetaStepPropertiesEntry(vx::PropType::Name, QString);
  MetaStepPropertiesEntry(vx::PropType::Visibility, bool);
};
class MetaStepPropertiesBase {
 public:
  virtual ~MetaStepPropertiesBase();
  virtual vx::Color color() = 0;
  virtual std::tuple<double, double, double, double> colorRaw() = 0;
  virtual QString description() = 0;
  virtual QString descriptionRaw() = 0;
  virtual qint64 labelID() = 0;
  virtual qint64 labelIDRaw() = 0;
  virtual QString modificationKind() = 0;
  virtual QString modificationKindRaw() = 0;
  virtual QString name() = 0;
  virtual QString nameRaw() = 0;
  virtual bool visibility() = 0;
  virtual bool visibilityRaw() = 0;
};
class MetaStepPropertiesCopy : public MetaStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  MetaStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  vx::Color color() override final;
  std::tuple<double, double, double, double> colorRaw() override final;
  QString description() override final;
  QString descriptionRaw() override final;
  qint64 labelID() override final;
  qint64 labelIDRaw() override final;
  QString modificationKind() override final;
  QString modificationKindRaw() override final;
  QString name() override final;
  QString nameRaw() override final;
  bool visibility() override final;
  bool visibilityRaw() override final;
};
class MetaStepProperties : public QObject, public MetaStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  MetaStepProperties(vx::Node* parent);
  ~MetaStepProperties();

  vx::Color color() override final;
  std::tuple<double, double, double, double> colorRaw() override final;
  static QSharedPointer<NodeProperty> colorProperty();
  static NodePropertyTyped<vx::types::Color> colorPropertyTyped();
  void setColor(vx::Color value);
 Q_SIGNALS:
  void colorChanged(vx::Color value);

 public:
  // Q_PROPERTY(vx::Color Color READ color WRITE setColor NOTIFY colorChanged)

  QString description() override final;
  QString descriptionRaw() override final;
  static QSharedPointer<NodeProperty> descriptionProperty();
  static NodePropertyTyped<vx::types::String> descriptionPropertyTyped();
  void setDescription(QString value);
 Q_SIGNALS:
  void descriptionChanged(QString value);

 public:
  // Q_PROPERTY(QString Description READ description WRITE setDescription NOTIFY
  // descriptionChanged)

  qint64 labelID() override final;
  qint64 labelIDRaw() override final;
  static QSharedPointer<NodeProperty> labelIDProperty();
  static NodePropertyTyped<vx::types::Int> labelIDPropertyTyped();
  void setLabelID(qint64 value);
 Q_SIGNALS:
  void labelIDChanged(qint64 value);

 public:
  // Q_PROPERTY(qint64 LabelID READ labelID WRITE setLabelID NOTIFY
  // labelIDChanged)

  QString modificationKind() override final;
  QString modificationKindRaw() override final;
  static QSharedPointer<NodeProperty> modificationKindProperty();
  static NodePropertyTyped<vx::types::Enumeration>
  modificationKindPropertyTyped();
  void setModificationKind(QString value);
 Q_SIGNALS:
  void modificationKindChanged(QString value);

 public:
  // Q_PROPERTY(QString ModificationKind READ modificationKind WRITE
  // setModificationKind NOTIFY modificationKindChanged)

  QString name() override final;
  QString nameRaw() override final;
  static QSharedPointer<NodeProperty> nameProperty();
  static NodePropertyTyped<vx::types::String> namePropertyTyped();
  void setName(QString value);
 Q_SIGNALS:
  void nameChanged(QString value);

 public:
  // Q_PROPERTY(QString Name READ name WRITE setName NOTIFY nameChanged)

  bool visibility() override final;
  bool visibilityRaw() override final;
  static QSharedPointer<NodeProperty> visibilityProperty();
  static NodePropertyTyped<vx::types::Boolean> visibilityPropertyTyped();
  void setVisibility(bool value);
 Q_SIGNALS:
  void visibilityChanged(bool value);

 public:
  // Q_PROPERTY(bool Visibility READ visibility WRITE setVisibility NOTIFY
  // visibilityChanged)
};

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
class MultiThresholdStepPropertiesEntry : public vx::PropertiesEntryBase {
  MultiThresholdStepPropertiesEntry() = delete;

 public:
  ~MultiThresholdStepPropertiesEntry();
  MultiThresholdStepPropertiesEntry(
      vx::PropType::ThresholdList,
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint64>>);
  MultiThresholdStepPropertiesEntry(vx::PropType::Volume, vx::Node*);
};
class MultiThresholdStepPropertiesBase {
 public:
  virtual ~MultiThresholdStepPropertiesBase();
  virtual QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint64>>
  thresholdList() = 0;
  virtual QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint64>>
  thresholdListRaw() = 0;
  virtual vx::Node* volume() = 0;
  virtual QDBusObjectPath volumeRaw() = 0;
};
class MultiThresholdStepPropertiesCopy
    : public MultiThresholdStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  MultiThresholdStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint64>>
  thresholdList() override final;
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint64>>
  thresholdListRaw() override final;
  vx::Node* volume() override final;
  QDBusObjectPath volumeRaw() override final;
};
class MultiThresholdStepProperties : public QObject,
                                     public MultiThresholdStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  MultiThresholdStepProperties(vx::Node* parent);
  ~MultiThresholdStepProperties();

  QList<std::tuple<double, std::tuple<double, double, double, double>, qint64>>
  thresholdList() override final;
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint64>>
  thresholdListRaw() override final;
  static QSharedPointer<NodeProperty> thresholdListProperty();
  static NodePropertyTyped<vx::types::ThresholdLabelMapping>
  thresholdListPropertyTyped();
  void setThresholdList(
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint64>>
          value);
 Q_SIGNALS:
  void thresholdListChanged(
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint64>>
          value);

 public:
  // Q_PROPERTY(QList<std::tuple<double, std::tuple<double, double, double,
  // double>, qint64>> ThresholdList READ thresholdList WRITE setThresholdList
  // NOTIFY thresholdListChanged)

  vx::Node* volume() override final;
  QDBusObjectPath volumeRaw() override final;
  static QSharedPointer<NodeProperty> volumeProperty();
  static NodePropertyTyped<vx::types::NodeReference> volumePropertyTyped();
  void setVolume(vx::Node* value);
 Q_SIGNALS:
  void volumeChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Volume READ volume WRITE setVolume NOTIFY
  // volumeChanged)
};

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
class RemoveLabelStepPropertiesEntry : public vx::PropertiesEntryBase {
  RemoveLabelStepPropertiesEntry() = delete;

 public:
  ~RemoveLabelStepPropertiesEntry();
  RemoveLabelStepPropertiesEntry(vx::PropType::LabelIDs, QList<qint64>);
};
class RemoveLabelStepPropertiesBase {
 public:
  virtual ~RemoveLabelStepPropertiesBase();
  virtual QList<qint64> labelIDs() = 0;
  virtual QList<qint64> labelIDsRaw() = 0;
};
class RemoveLabelStepPropertiesCopy : public RemoveLabelStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  RemoveLabelStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QList<qint64> labelIDs() override final;
  QList<qint64> labelIDsRaw() override final;
};
class RemoveLabelStepProperties : public QObject,
                                  public RemoveLabelStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  RemoveLabelStepProperties(vx::Node* parent);
  ~RemoveLabelStepProperties();

  QList<qint64> labelIDs() override final;
  QList<qint64> labelIDsRaw() override final;
  static QSharedPointer<NodeProperty> labelIDsProperty();
  static NodePropertyTyped<vx::types::IntList> labelIDsPropertyTyped();
  void setLabelIDs(QList<qint64> value);
 Q_SIGNALS:
  void labelIDsChanged(QList<qint64> value);

 public:
  // Q_PROPERTY(QList<qint64> LabelIDs READ labelIDs WRITE setLabelIDs NOTIFY
  // labelIDsChanged)
};

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
class SubtractStepPropertiesEntry : public vx::PropertiesEntryBase {
  SubtractStepPropertiesEntry() = delete;

 public:
  ~SubtractStepPropertiesEntry();
  SubtractStepPropertiesEntry(vx::PropType::LabelId, qint64);
};
class SubtractStepPropertiesBase {
 public:
  virtual ~SubtractStepPropertiesBase();
  virtual qint64 labelId() = 0;
  virtual qint64 labelIdRaw() = 0;
};
class SubtractStepPropertiesCopy : public SubtractStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  SubtractStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  qint64 labelId() override final;
  qint64 labelIdRaw() override final;
};
class SubtractStepProperties : public QObject,
                               public SubtractStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  SubtractStepProperties(vx::Node* parent);
  ~SubtractStepProperties();

  qint64 labelId() override final;
  qint64 labelIdRaw() override final;
  static QSharedPointer<NodeProperty> labelIdProperty();
  static NodePropertyTyped<vx::types::Int> labelIdPropertyTyped();
  void setLabelId(qint64 value);
 Q_SIGNALS:
  void labelIdChanged(qint64 value);

 public:
  // Q_PROPERTY(qint64 LabelId READ labelId WRITE setLabelId NOTIFY
  // labelIdChanged)
};

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
class ThresholdSelectionStepPropertiesEntry : public vx::PropertiesEntryBase {
  ThresholdSelectionStepPropertiesEntry() = delete;

 public:
  ~ThresholdSelectionStepPropertiesEntry();
  ThresholdSelectionStepPropertiesEntry(vx::PropType::LowerThreshold, double);
  ThresholdSelectionStepPropertiesEntry(vx::PropType::UpperThreshold, double);
  ThresholdSelectionStepPropertiesEntry(vx::PropType::Volume, vx::Node*);
};
class ThresholdSelectionStepPropertiesBase {
 public:
  virtual ~ThresholdSelectionStepPropertiesBase();
  virtual double lowerThreshold() = 0;
  virtual double lowerThresholdRaw() = 0;
  virtual double upperThreshold() = 0;
  virtual double upperThresholdRaw() = 0;
  virtual vx::Node* volume() = 0;
  virtual QDBusObjectPath volumeRaw() = 0;
};
class ThresholdSelectionStepPropertiesCopy
    : public ThresholdSelectionStepPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  ThresholdSelectionStepPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  double lowerThreshold() override final;
  double lowerThresholdRaw() override final;
  double upperThreshold() override final;
  double upperThresholdRaw() override final;
  vx::Node* volume() override final;
  QDBusObjectPath volumeRaw() override final;
};
class ThresholdSelectionStepProperties
    : public QObject,
      public ThresholdSelectionStepPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  ThresholdSelectionStepProperties(vx::Node* parent);
  ~ThresholdSelectionStepProperties();

  double lowerThreshold() override final;
  double lowerThresholdRaw() override final;
  static QSharedPointer<NodeProperty> lowerThresholdProperty();
  static NodePropertyTyped<vx::types::Float> lowerThresholdPropertyTyped();
  void setLowerThreshold(double value);
 Q_SIGNALS:
  void lowerThresholdChanged(double value);

 public:
  // Q_PROPERTY(double LowerThreshold READ lowerThreshold WRITE
  // setLowerThreshold NOTIFY lowerThresholdChanged)

  double upperThreshold() override final;
  double upperThresholdRaw() override final;
  static QSharedPointer<NodeProperty> upperThresholdProperty();
  static NodePropertyTyped<vx::types::Float> upperThresholdPropertyTyped();
  void setUpperThreshold(double value);
 Q_SIGNALS:
  void upperThresholdChanged(double value);

 public:
  // Q_PROPERTY(double UpperThreshold READ upperThreshold WRITE
  // setUpperThreshold NOTIFY upperThresholdChanged)

  vx::Node* volume() override final;
  QDBusObjectPath volumeRaw() override final;
  static QSharedPointer<NodeProperty> volumeProperty();
  static NodePropertyTyped<vx::types::NodeReference> volumePropertyTyped();
  void setVolume(vx::Node* value);
 Q_SIGNALS:
  void volumeChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Volume READ volume WRITE setVolume NOTIFY
  // volumeChanged)
};

}  // namespace segmentationstep_prop
}  // namespace vx
