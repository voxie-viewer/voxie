// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#include "Prototypes.hpp"

#include <Voxie/Node/NodePrototype.hpp>
#include <Voxie/Node/PropertyValueConvertDBus.hpp>
#include <Voxie/Node/PropertyValueConvertRaw.hpp>
namespace vx {
inline namespace filter_prop {
SegmentationPropertiesEntry::~SegmentationPropertiesEntry() {}
SegmentationPropertiesEntry::SegmentationPropertiesEntry(vx::PropType::Input,
                                                         vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.Segmentation.Input",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SegmentationPropertiesEntry::SegmentationPropertiesEntry(vx::PropType::Output,
                                                         vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.Segmentation.Output",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SegmentationPropertiesEntry::SegmentationPropertiesEntry(
    vx::PropType::StepList, QList<vx::Node*> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.Segmentation.StepList",
          QVariant::fromValue<QList<QDBusObjectPath>>(
              vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                          QList<vx::Node*>>::toRaw(value_))) {}
SegmentationPropertiesBase::~SegmentationPropertiesBase() {}
SegmentationPropertiesCopy::SegmentationPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QDBusObjectPath SegmentationPropertiesCopy::inputRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter.Segmentation.Input"]);
}
QDBusObjectPath SegmentationPropertiesCopy::outputRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter.Segmentation.Output"]);
}
QList<QDBusObjectPath> SegmentationPropertiesCopy::stepListRaw() {
  return vx::Node::parseVariant<QList<QDBusObjectPath>>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter.Segmentation.StepList"]);
}
static const char _prototype_Segmentation_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  70,  105, 108, 116, 101, 114, 32,  102, 111, 114, 32,  115, 101,
    103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 32,  102, 117, 110, 99,
    116, 105, 111, 110, 97,  108, 105, 116, 105, 101, 115, 34,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 34,  44,  32,
    34,  73,  99,  111, 110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110,
    115, 47,  100, 101, 115, 107, 116, 111, 112, 46,  112, 110, 103, 34,  44,
    32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  83,  101, 103, 109, 101,
    110, 116, 97,  116, 105, 111, 110, 34,  44,  32,  34,  78,  111, 100, 101,
    75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  70,  105, 108, 116, 101,
    114, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115,
    34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,  105,
    108, 116, 101, 114, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105,
    111, 110, 46,  73,  110, 112, 117, 116, 34,  58,  32,  123, 34,  65,  108,
    108, 111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116,
    121, 112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  68,  97,  116, 97,  46,  86,  111, 108, 117, 109, 101, 34,  93,
    44,  32,  34,  67,  97,  108, 108, 83,  101, 116, 79,  114, 100, 101, 114,
    34,  58,  32,  49,  48,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  73,  110, 112, 117, 116, 32,  86,
    111, 108, 117, 109, 101, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  86,  111, 108, 117, 109, 101, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101,
    82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  83,
    101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 46,  79,  117, 116,
    112, 117, 116, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100,
    78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116,
    97,  46,  67,  111, 110, 116, 97,  105, 110, 101, 114, 78,  111, 100, 101,
    34,  93,  44,  32,  34,  67,  97,  108, 108, 83,  101, 116, 79,  114, 100,
    101, 114, 34,  58,  32,  45,  49,  48,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  79,  117, 116, 112,
    117, 116, 32,  86,  111, 108, 117, 109, 101, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  79,  117, 116,
    112, 117, 116, 78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,
    101, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,
    105, 108, 116, 101, 114, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116,
    105, 111, 110, 46,  83,  116, 101, 112, 76,  105, 115, 116, 34,  58,  32,
    123, 34,  67,  97,  108, 108, 83,  101, 116, 79,  114, 100, 101, 114, 34,
    58,  32,  45,  49,  48,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  83,  116, 101, 112, 32,  108, 105,
    115, 116, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101,
    110, 99,  101, 76,  105, 115, 116, 34,  125, 125, 44,  32,  34,  84,  114,
    111, 118, 101, 67,  108, 97,  115, 115, 105, 102, 105, 101, 114, 115, 34,
    58,  32,  91,  34,  68,  101, 118, 101, 108, 111, 112, 109, 101, 110, 116,
    32,  83,  116, 97,  116, 117, 115, 32,  58,  58,  32,  52,  32,  45,  32,
    66,  101, 116, 97,  34,  93,  125, 0};
const char* SegmentationProperties::_getPrototypeJson() {
  return _prototype_Segmentation_;
}

SegmentationProperties::~SegmentationProperties() {}

vx::Node* SegmentationProperties::input() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.Segmentation.Input"));
}
QDBusObjectPath SegmentationProperties::inputRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.Input");
}
QSharedPointer<NodeProperty> SegmentationProperties::inputProperty() {
  return SegmentationProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.Input", false);
}
NodePropertyTyped<vx::types::NodeReference>
SegmentationProperties::inputPropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(inputProperty());
}
void SegmentationProperties::setInput(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.Input",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Node* SegmentationProperties::output() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.Segmentation.Output"));
}
QDBusObjectPath SegmentationProperties::outputRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.Output");
}
QSharedPointer<NodeProperty> SegmentationProperties::outputProperty() {
  return SegmentationProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.Output", false);
}
NodePropertyTyped<vx::types::OutputNodeReference>
SegmentationProperties::outputPropertyTyped() {
  return NodePropertyTyped<vx::types::OutputNodeReference>(outputProperty());
}
void SegmentationProperties::setOutput(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.Output",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
QList<vx::Node*> SegmentationProperties::stepList() {
  return vx::PropertyValueConvertRaw<QList<QDBusObjectPath>, QList<vx::Node*>>::
      fromRaw(_node->getNodePropertyTyped<QList<QDBusObjectPath>>(
          "de.uni_stuttgart.Voxie.Filter.Segmentation.StepList"));
}
QList<QDBusObjectPath> SegmentationProperties::stepListRaw() {
  return _node->getNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.StepList");
}
QSharedPointer<NodeProperty> SegmentationProperties::stepListProperty() {
  return SegmentationProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.StepList", false);
}
NodePropertyTyped<vx::types::NodeReferenceList>
SegmentationProperties::stepListPropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReferenceList>(stepListProperty());
}
void SegmentationProperties::setStepList(QList<vx::Node*> value) {
  _node->setNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.StepList",
      vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                  QList<vx::Node*>>::toRaw(value));
}
SegmentationProperties::SegmentationProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_Input = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.Input", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Input](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Input) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Filter.Segmentation.Input\":"
                      << e.what();
          return;
        }
        Q_EMIT this->inputChanged(valueCasted);
      });
  auto _prop_Output = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.Output", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Output](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Output) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Filter.Segmentation.Output\":"
              << e.what();
          return;
        }
        Q_EMIT this->outputChanged(valueCasted);
      });
  auto _prop_StepList = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.Segmentation.StepList", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_StepList](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_StepList) return;
        QList<vx::Node*> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                                    QList<vx::Node*>>::
              fromRaw(Node::parseVariant<QList<QDBusObjectPath>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Filter.Segmentation.StepList\":"
              << e.what();
          return;
        }
        Q_EMIT this->stepListChanged(valueCasted);
      });
}

}  // namespace filter_prop
inline namespace segmentationstep_prop {
AssignmentStepPropertiesEntry::~AssignmentStepPropertiesEntry() {}
AssignmentStepPropertiesEntry::AssignmentStepPropertiesEntry(
    vx::PropType::LabelID, qint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.AssignmentStep.LabelID",
          QVariant::fromValue<qint64>(
              vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value_))) {}
AssignmentStepPropertiesBase::~AssignmentStepPropertiesBase() {}
AssignmentStepPropertiesCopy::AssignmentStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
qint64 AssignmentStepPropertiesCopy::labelID() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      vx::Node::parseVariant<qint64>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "AssignmentStep.LabelID"]));
}
qint64 AssignmentStepPropertiesCopy::labelIDRaw() {
  return vx::Node::parseVariant<qint64>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.SegmentationStep.AssignmentStep.LabelID"]);
}
static const char _prototype_AssignmentStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  65,  115, 115, 105, 103, 110, 115, 32,  115, 101, 108, 101, 99,
    116, 101, 100, 32,  118, 111, 120, 101, 108, 115, 32,  116, 111, 32,  97,
    32,  108, 97,  98,  101, 108, 34,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  65,  115, 115, 105, 103,
    110, 109, 101, 110, 116, 32,  83,  116, 101, 112, 34,  44,  32,  34,  73,
    99,  111, 110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,
    100, 101, 115, 107, 116, 111, 112, 46,  112, 110, 103, 34,  44,  32,  34,
    73,  115, 83,  112, 101, 99,  105, 97,  108, 83,  116, 101, 112, 34,  58,
    32,  116, 114, 117, 101, 44,  32,  34,  78,  97,  109, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110,
    116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  65,  115, 115, 105,
    103, 110, 109, 101, 110, 116, 83,  116, 101, 112, 34,  44,  32,  34,  78,
    111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  83,  101,
    103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 34,
    44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,
    32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109,
    101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  65,  115,
    115, 105, 103, 110, 109, 101, 110, 116, 83,  116, 101, 112, 46,  76,  97,
    98,  101, 108, 73,  68,  34,  58,  32,  123, 34,  68,  101, 102, 97,  117,
    108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  45,  49,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    76,  97,  98,  101, 108, 73,  68,  34,  44,  32,  34,  77,  97,  120, 105,
    109, 117, 109, 86,  97,  108, 117, 101, 34,  58,  32,  57,  57,  57,  57,
    57,  57,  44,  32,  34,  77,  105, 110, 105, 109, 117, 109, 86,  97,  108,
    117, 101, 34,  58,  32,  48,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  76,  97,  98,  101, 108, 73,  68,  34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  73,  110, 116,
    34,  125, 125, 44,  32,  34,  83,  116, 101, 112, 75,  105, 110, 100, 34,
    58,  32,  34,  76,  97,  98,  101, 108, 83,  116, 101, 112, 34,  125, 0};
const char* AssignmentStepProperties::_getPrototypeJson() {
  return _prototype_AssignmentStep_;
}

AssignmentStepProperties::~AssignmentStepProperties() {}

qint64 AssignmentStepProperties::labelID() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      _node->getNodePropertyTyped<qint64>(
          "de.uni_stuttgart.Voxie.SegmentationStep.AssignmentStep.LabelID"));
}
qint64 AssignmentStepProperties::labelIDRaw() {
  return _node->getNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.SegmentationStep.AssignmentStep.LabelID");
}
QSharedPointer<NodeProperty> AssignmentStepProperties::labelIDProperty() {
  return AssignmentStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.AssignmentStep.LabelID", false);
}
NodePropertyTyped<vx::types::Int>
AssignmentStepProperties::labelIDPropertyTyped() {
  return NodePropertyTyped<vx::types::Int>(labelIDProperty());
}
void AssignmentStepProperties::setLabelID(qint64 value) {
  _node->setNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.SegmentationStep.AssignmentStep.LabelID",
      vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value));
}
AssignmentStepProperties::AssignmentStepProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_LabelID = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.AssignmentStep.LabelID", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LabelID](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_LabelID) return;
        qint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
              Node::parseVariant<qint64>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "AssignmentStep.LabelID\":"
                      << e.what();
          return;
        }
        Q_EMIT this->labelIDChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
BrushSelectionStepPropertiesEntry::~BrushSelectionStepPropertiesEntry() {}
BrushSelectionStepPropertiesEntry::BrushSelectionStepPropertiesEntry(
    vx::PropType::BrushEraseCentersWithRadius,
    QList<std::tuple<QVector3D, double>> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "BrushEraseCentersWithRadius",
          QVariant::fromValue<
              QList<std::tuple<std::tuple<double, double, double>, double>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<std::tuple<double, double, double>, double>>,
                  QList<std::tuple<QVector3D, double>>>::toRaw(value_))) {}
BrushSelectionStepPropertiesEntry::BrushSelectionStepPropertiesEntry(
    vx::PropType::BrushSelectCentersWithRadius,
    QList<std::tuple<QVector3D, double>> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "BrushSelectCentersWithRadius",
          QVariant::fromValue<
              QList<std::tuple<std::tuple<double, double, double>, double>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<std::tuple<double, double, double>, double>>,
                  QList<std::tuple<QVector3D, double>>>::toRaw(value_))) {}
BrushSelectionStepPropertiesEntry::BrushSelectionStepPropertiesEntry(
    vx::PropType::PlaneOrientation, QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "PlaneOrientation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
BrushSelectionStepPropertiesEntry::BrushSelectionStepPropertiesEntry(
    vx::PropType::PlaneOrigin, QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "PlaneOrigin",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
BrushSelectionStepPropertiesEntry::BrushSelectionStepPropertiesEntry(
    vx::PropType::VolumeOrientation, QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "VolumeOrientation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
BrushSelectionStepPropertiesEntry::BrushSelectionStepPropertiesEntry(
    vx::PropType::VolumeOrigin, QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "VolumeOrigin",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
BrushSelectionStepPropertiesEntry::BrushSelectionStepPropertiesEntry(
    vx::PropType::VoxelSize, QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "VoxelSize",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
BrushSelectionStepPropertiesBase::~BrushSelectionStepPropertiesBase() {}
BrushSelectionStepPropertiesCopy::BrushSelectionStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<std::tuple<QVector3D, double>>
BrushSelectionStepPropertiesCopy::brushEraseCentersWithRadius() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<std::tuple<double, double, double>, double>>,
      QList<std::tuple<QVector3D, double>>>::
      fromRaw(vx::Node::parseVariant<
              QList<std::tuple<std::tuple<double, double, double>, double>>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.BrushEraseCentersWithRadius"]));
}
QList<std::tuple<std::tuple<double, double, double>, double>>
BrushSelectionStepPropertiesCopy::brushEraseCentersWithRadiusRaw() {
  return vx::Node::parseVariant<
      QList<std::tuple<std::tuple<double, double, double>, double>>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "BrushSelectionStep.BrushEraseCentersWithRadius"]);
}
QList<std::tuple<QVector3D, double>>
BrushSelectionStepPropertiesCopy::brushSelectCentersWithRadius() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<std::tuple<double, double, double>, double>>,
      QList<std::tuple<QVector3D, double>>>::
      fromRaw(vx::Node::parseVariant<
              QList<std::tuple<std::tuple<double, double, double>, double>>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.BrushSelectCentersWithRadius"]));
}
QList<std::tuple<std::tuple<double, double, double>, double>>
BrushSelectionStepPropertiesCopy::brushSelectCentersWithRadiusRaw() {
  return vx::Node::parseVariant<
      QList<std::tuple<std::tuple<double, double, double>, double>>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "BrushSelectionStep.BrushSelectCentersWithRadius"]);
}
QQuaternion BrushSelectionStepPropertiesCopy::planeOrientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                             "BrushSelectionStep.PlaneOrientation"]));
}
std::tuple<double, double, double, double>
BrushSelectionStepPropertiesCopy::planeOrientationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "BrushSelectionStep.PlaneOrientation"]);
}
QVector3D BrushSelectionStepPropertiesCopy::planeOrigin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.PlaneOrigin"]));
}
std::tuple<double, double, double>
BrushSelectionStepPropertiesCopy::planeOriginRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "BrushSelectionStep.PlaneOrigin"]);
}
QQuaternion BrushSelectionStepPropertiesCopy::volumeOrientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                             "BrushSelectionStep.VolumeOrientation"]));
}
std::tuple<double, double, double, double>
BrushSelectionStepPropertiesCopy::volumeOrientationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "BrushSelectionStep.VolumeOrientation"]);
}
QVector3D BrushSelectionStepPropertiesCopy::volumeOrigin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.VolumeOrigin"]));
}
std::tuple<double, double, double>
BrushSelectionStepPropertiesCopy::volumeOriginRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "BrushSelectionStep.VolumeOrigin"]);
}
QVector3D BrushSelectionStepPropertiesCopy::voxelSize() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.VoxelSize"]));
}
std::tuple<double, double, double>
BrushSelectionStepPropertiesCopy::voxelSizeRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "BrushSelectionStep.VoxelSize"]);
}
static const char _prototype_BrushSelectionStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  66,  114, 117, 115, 104, 32,  98,  97,  115, 101, 100, 32,  115,
    101, 108, 101, 99,  116, 105, 111, 110, 34,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  66,  114, 117,
    115, 104, 32,  83,  101, 108, 101, 99,  116, 105, 111, 110, 32,  83,  116,
    101, 112, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,
    47,  105, 99,  111, 110, 115, 47,  112, 97,  105, 110, 116, 45,  98,  114,
    117, 115, 104, 46,  112, 110, 103, 34,  44,  32,  34,  73,  115, 83,  112,
    101, 99,  105, 97,  108, 83,  116, 101, 112, 34,  58,  32,  116, 114, 117,
    101, 44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105,
    111, 110, 83,  116, 101, 112, 46,  66,  114, 117, 115, 104, 83,  101, 108,
    101, 99,  116, 105, 111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  78,
    111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  83,  101,
    103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 34,
    44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,
    32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109,
    101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  66,  114,
    117, 115, 104, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101,
    112, 46,  66,  114, 117, 115, 104, 69,  114, 97,  115, 101, 67,  101, 110,
    116, 101, 114, 115, 87,  105, 116, 104, 82,  97,  100, 105, 117, 115, 34,
    58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  66,  114, 117, 115, 104, 32,  99,  101, 110, 116, 101,
    114, 115, 32,  119, 105, 116, 104, 32,  99,  111, 114, 114, 101, 115, 112,
    111, 110, 100, 105, 110, 103, 32,  114, 97,  100, 105, 117, 115, 32,  102,
    111, 114, 32,  101, 114, 97,  115, 105, 110, 103, 32,  105, 110, 32,  51,
    68,  32,  115, 112, 97,  99,  101, 32,  91,  109, 93,  34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  76,
    105, 115, 116, 80,  111, 115, 105, 116, 105, 111, 110, 51,  68,  68,  111,
    117, 98,  108, 101, 84,  117, 112, 108, 101, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,
    116, 105, 111, 110, 83,  116, 101, 112, 46,  66,  114, 117, 115, 104, 83,
    101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101, 112, 46,  66,  114,
    117, 115, 104, 83,  101, 108, 101, 99,  116, 67,  101, 110, 116, 101, 114,
    115, 87,  105, 116, 104, 82,  97,  100, 105, 117, 115, 34,  58,  32,  123,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  66,  114, 117, 115, 104, 32,  99,  101, 110, 116, 101, 114, 115, 32,
    119, 105, 116, 104, 32,  99,  111, 114, 114, 101, 115, 112, 111, 110, 100,
    105, 110, 103, 32,  114, 97,  100, 105, 117, 115, 32,  102, 111, 114, 32,
    115, 101, 108, 101, 99,  116, 105, 111, 110, 32,  105, 110, 32,  51,  68,
    32,  115, 112, 97,  99,  101, 32,  91,  109, 93,  34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  76,  105,
    115, 116, 80,  111, 115, 105, 116, 105, 111, 110, 51,  68,  68,  111, 117,
    98,  108, 101, 84,  117, 112, 108, 101, 34,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116,
    105, 111, 110, 83,  116, 101, 112, 46,  66,  114, 117, 115, 104, 83,  101,
    108, 101, 99,  116, 105, 111, 110, 83,  116, 101, 112, 46,  80,  108, 97,
    110, 101, 79,  114, 105, 101, 110, 116, 97,  116, 105, 111, 110, 34,  58,
    32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  82,  111, 116, 97,  116, 105, 111, 110, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  79,
    114, 105, 101, 110, 116, 97,  116, 105, 111, 110, 51,  68,  34,  125, 44,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101,
    110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  66,  114, 117,
    115, 104, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101, 112,
    46,  80,  108, 97,  110, 101, 79,  114, 105, 103, 105, 110, 34,  58,  32,
    123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  84,  114, 97,  110, 115, 108, 97,  116, 105, 111, 110, 32,  91,
    109, 93,  34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    84,  121, 112, 101, 46,  80,  111, 115, 105, 116, 105, 111, 110, 51,  68,
    34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101,
    103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,
    66,  114, 117, 115, 104, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,
    116, 101, 112, 46,  86,  111, 108, 117, 109, 101, 79,  114, 105, 101, 110,
    116, 97,  116, 105, 111, 110, 34,  58,  32,  123, 34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  82,  111, 116, 97,
    116, 105, 111, 110, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  79,  114, 105, 101, 110, 116, 97,  116,
    105, 111, 110, 51,  68,  34,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110,
    83,  116, 101, 112, 46,  66,  114, 117, 115, 104, 83,  101, 108, 101, 99,
    116, 105, 111, 110, 83,  116, 101, 112, 46,  86,  111, 108, 117, 109, 101,
    79,  114, 105, 103, 105, 110, 34,  58,  32,  123, 34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  84,  114, 97,  110,
    115, 108, 97,  116, 105, 111, 110, 32,  91,  109, 93,  34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  80,
    111, 115, 105, 116, 105, 111, 110, 51,  68,  34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,
    116, 105, 111, 110, 83,  116, 101, 112, 46,  66,  114, 117, 115, 104, 83,
    101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101, 112, 46,  86,  111,
    120, 101, 108, 83,  105, 122, 101, 34,  58,  32,  123, 34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  86,  111, 120,
    101, 108, 83,  105, 122, 101, 32,  91,  109, 93,  34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  80,  111,
    115, 105, 116, 105, 111, 110, 51,  68,  34,  125, 125, 44,  32,  34,  83,
    116, 101, 112, 75,  105, 110, 100, 34,  58,  32,  34,  83,  101, 108, 101,
    99,  116, 105, 111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  83,  116,
    101, 112, 84,  105, 112, 34,  58,  32,  34,  66,  114, 117, 115, 104, 32,
    83,  101, 108, 101, 99,  116, 105, 111, 110, 34,  125, 0};
const char* BrushSelectionStepProperties::_getPrototypeJson() {
  return _prototype_BrushSelectionStep_;
}

BrushSelectionStepProperties::~BrushSelectionStepProperties() {}

QList<std::tuple<QVector3D, double>>
BrushSelectionStepProperties::brushEraseCentersWithRadius() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<std::tuple<double, double, double>, double>>,
      QList<std::tuple<QVector3D, double>>>::
      fromRaw(_node->getNodePropertyTyped<
              QList<std::tuple<std::tuple<double, double, double>, double>>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "BrushEraseCentersWithRadius"));
}
QList<std::tuple<std::tuple<double, double, double>, double>>
BrushSelectionStepProperties::brushEraseCentersWithRadiusRaw() {
  return _node->getNodePropertyTyped<
      QList<std::tuple<std::tuple<double, double, double>, double>>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "BrushEraseCentersWithRadius");
}
QSharedPointer<NodeProperty>
BrushSelectionStepProperties::brushEraseCentersWithRadiusProperty() {
  return BrushSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "BrushEraseCentersWithRadius",
      false);
}
NodePropertyTyped<vx::types::ListPosition3DDoubleTuple>
BrushSelectionStepProperties::brushEraseCentersWithRadiusPropertyTyped() {
  return NodePropertyTyped<vx::types::ListPosition3DDoubleTuple>(
      brushEraseCentersWithRadiusProperty());
}
void BrushSelectionStepProperties::setBrushEraseCentersWithRadius(
    QList<std::tuple<QVector3D, double>> value) {
  _node->setNodePropertyTyped<
      QList<std::tuple<std::tuple<double, double, double>, double>>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "BrushEraseCentersWithRadius",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<std::tuple<double, double, double>, double>>,
          QList<std::tuple<QVector3D, double>>>::toRaw(value));
}
QList<std::tuple<QVector3D, double>>
BrushSelectionStepProperties::brushSelectCentersWithRadius() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<std::tuple<double, double, double>, double>>,
      QList<std::tuple<QVector3D, double>>>::
      fromRaw(_node->getNodePropertyTyped<
              QList<std::tuple<std::tuple<double, double, double>, double>>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "BrushSelectCentersWithRadius"));
}
QList<std::tuple<std::tuple<double, double, double>, double>>
BrushSelectionStepProperties::brushSelectCentersWithRadiusRaw() {
  return _node->getNodePropertyTyped<
      QList<std::tuple<std::tuple<double, double, double>, double>>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "BrushSelectCentersWithRadius");
}
QSharedPointer<NodeProperty>
BrushSelectionStepProperties::brushSelectCentersWithRadiusProperty() {
  return BrushSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "BrushSelectCentersWithRadius",
      false);
}
NodePropertyTyped<vx::types::ListPosition3DDoubleTuple>
BrushSelectionStepProperties::brushSelectCentersWithRadiusPropertyTyped() {
  return NodePropertyTyped<vx::types::ListPosition3DDoubleTuple>(
      brushSelectCentersWithRadiusProperty());
}
void BrushSelectionStepProperties::setBrushSelectCentersWithRadius(
    QList<std::tuple<QVector3D, double>> value) {
  _node->setNodePropertyTyped<
      QList<std::tuple<std::tuple<double, double, double>, double>>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "BrushSelectCentersWithRadius",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<std::tuple<double, double, double>, double>>,
          QList<std::tuple<QVector3D, double>>>::toRaw(value));
}
QQuaternion BrushSelectionStepProperties::planeOrientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "PlaneOrientation"));
}
std::tuple<double, double, double, double>
BrushSelectionStepProperties::planeOrientationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "PlaneOrientation");
}
QSharedPointer<NodeProperty>
BrushSelectionStepProperties::planeOrientationProperty() {
  return BrushSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "PlaneOrientation",
      false);
}
NodePropertyTyped<vx::types::Orientation3D>
BrushSelectionStepProperties::planeOrientationPropertyTyped() {
  return NodePropertyTyped<vx::types::Orientation3D>(
      planeOrientationProperty());
}
void BrushSelectionStepProperties::setPlaneOrientation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "PlaneOrientation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
QVector3D BrushSelectionStepProperties::planeOrigin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "PlaneOrigin"));
}
std::tuple<double, double, double>
BrushSelectionStepProperties::planeOriginRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.PlaneOrigin");
}
QSharedPointer<NodeProperty>
BrushSelectionStepProperties::planeOriginProperty() {
  return BrushSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.PlaneOrigin",
      false);
}
NodePropertyTyped<vx::types::Position3D>
BrushSelectionStepProperties::planeOriginPropertyTyped() {
  return NodePropertyTyped<vx::types::Position3D>(planeOriginProperty());
}
void BrushSelectionStepProperties::setPlaneOrigin(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.PlaneOrigin",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
QQuaternion BrushSelectionStepProperties::volumeOrientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "VolumeOrientation"));
}
std::tuple<double, double, double, double>
BrushSelectionStepProperties::volumeOrientationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "VolumeOrientation");
}
QSharedPointer<NodeProperty>
BrushSelectionStepProperties::volumeOrientationProperty() {
  return BrushSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "VolumeOrientation",
      false);
}
NodePropertyTyped<vx::types::Orientation3D>
BrushSelectionStepProperties::volumeOrientationPropertyTyped() {
  return NodePropertyTyped<vx::types::Orientation3D>(
      volumeOrientationProperty());
}
void BrushSelectionStepProperties::setVolumeOrientation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "VolumeOrientation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
QVector3D BrushSelectionStepProperties::volumeOrigin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "VolumeOrigin"));
}
std::tuple<double, double, double>
BrushSelectionStepProperties::volumeOriginRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "VolumeOrigin");
}
QSharedPointer<NodeProperty>
BrushSelectionStepProperties::volumeOriginProperty() {
  return BrushSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.VolumeOrigin",
      false);
}
NodePropertyTyped<vx::types::Position3D>
BrushSelectionStepProperties::volumeOriginPropertyTyped() {
  return NodePropertyTyped<vx::types::Position3D>(volumeOriginProperty());
}
void BrushSelectionStepProperties::setVolumeOrigin(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.VolumeOrigin",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
QVector3D BrushSelectionStepProperties::voxelSize() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double>,
      QVector3D>::fromRaw(_node->getNodePropertyTyped<std::tuple<double, double,
                                                                 double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.VoxelSize"));
}
std::tuple<double, double, double>
BrushSelectionStepProperties::voxelSizeRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.VoxelSize");
}
QSharedPointer<NodeProperty> BrushSelectionStepProperties::voxelSizeProperty() {
  return BrushSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.VoxelSize",
      false);
}
NodePropertyTyped<vx::types::Position3D>
BrushSelectionStepProperties::voxelSizePropertyTyped() {
  return NodePropertyTyped<vx::types::Position3D>(voxelSizeProperty());
}
void BrushSelectionStepProperties::setVoxelSize(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.VoxelSize",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
BrushSelectionStepProperties::BrushSelectionStepProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_BrushEraseCentersWithRadius =
      this->_node->prototype()->getProperty(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "BrushEraseCentersWithRadius",
          false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_BrushEraseCentersWithRadius](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_BrushEraseCentersWithRadius) return;
        QList<std::tuple<QVector3D, double>> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<std::tuple<double, double, double>, double>>,
              QList<std::tuple<QVector3D, double>>>::
              fromRaw(
                  Node::parseVariant<QList<
                      std::tuple<std::tuple<double, double, double>, double>>>(
                      value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.BrushEraseCentersWithRadius\":"
                      << e.what();
          return;
        }
        Q_EMIT this->brushEraseCentersWithRadiusChanged(valueCasted);
      });
  auto _prop_BrushSelectCentersWithRadius =
      this->_node->prototype()->getProperty(
          "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
          "BrushSelectCentersWithRadius",
          false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_BrushSelectCentersWithRadius](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_BrushSelectCentersWithRadius) return;
        QList<std::tuple<QVector3D, double>> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<std::tuple<double, double, double>, double>>,
              QList<std::tuple<QVector3D, double>>>::
              fromRaw(
                  Node::parseVariant<QList<
                      std::tuple<std::tuple<double, double, double>, double>>>(
                      value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.BrushSelectCentersWithRadius\":"
                      << e.what();
          return;
        }
        Q_EMIT this->brushSelectCentersWithRadiusChanged(valueCasted);
      });
  auto _prop_PlaneOrientation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "PlaneOrientation",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_PlaneOrientation](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_PlaneOrientation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.PlaneOrientation\":"
                      << e.what();
          return;
        }
        Q_EMIT this->planeOrientationChanged(valueCasted);
      });
  auto _prop_PlaneOrigin = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.PlaneOrigin",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_PlaneOrigin](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_PlaneOrigin) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.PlaneOrigin\":"
                      << e.what();
          return;
        }
        Q_EMIT this->planeOriginChanged(valueCasted);
      });
  auto _prop_VolumeOrientation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep."
      "VolumeOrientation",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VolumeOrientation](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_VolumeOrientation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.VolumeOrientation\":"
                      << e.what();
          return;
        }
        Q_EMIT this->volumeOrientationChanged(valueCasted);
      });
  auto _prop_VolumeOrigin = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.VolumeOrigin",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VolumeOrigin](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_VolumeOrigin) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.VolumeOrigin\":"
                      << e.what();
          return;
        }
        Q_EMIT this->volumeOriginChanged(valueCasted);
      });
  auto _prop_VoxelSize = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.BrushSelectionStep.VoxelSize",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VoxelSize](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_VoxelSize) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "BrushSelectionStep.VoxelSize\":"
                      << e.what();
          return;
        }
        Q_EMIT this->voxelSizeChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
LassoSelectionStepPropertiesEntry::~LassoSelectionStepPropertiesEntry() {}
LassoSelectionStepPropertiesEntry::LassoSelectionStepPropertiesEntry(
    vx::PropType::PlaneOrientation, QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "PlaneOrientation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
LassoSelectionStepPropertiesEntry::LassoSelectionStepPropertiesEntry(
    vx::PropType::PlaneOrigin, QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "PlaneOrigin",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
LassoSelectionStepPropertiesEntry::LassoSelectionStepPropertiesEntry(
    vx::PropType::PolygonNodes, QList<QVector3D> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "PolygonNodes",
          QVariant::fromValue<QList<std::tuple<double, double, double>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double, double, double>>,
                  QList<QVector3D>>::toRaw(value_))) {}
LassoSelectionStepPropertiesEntry::LassoSelectionStepPropertiesEntry(
    vx::PropType::VolumeOrientation, QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "VolumeOrientation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
LassoSelectionStepPropertiesEntry::LassoSelectionStepPropertiesEntry(
    vx::PropType::VolumeOrigin, QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "VolumeOrigin",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
LassoSelectionStepPropertiesEntry::LassoSelectionStepPropertiesEntry(
    vx::PropType::VoxelSize, QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "VoxelSize",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
LassoSelectionStepPropertiesBase::~LassoSelectionStepPropertiesBase() {}
LassoSelectionStepPropertiesCopy::LassoSelectionStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QQuaternion LassoSelectionStepPropertiesCopy::planeOrientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                             "LassoSelectionStep.PlaneOrientation"]));
}
std::tuple<double, double, double, double>
LassoSelectionStepPropertiesCopy::planeOrientationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "LassoSelectionStep.PlaneOrientation"]);
}
QVector3D LassoSelectionStepPropertiesCopy::planeOrigin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.PlaneOrigin"]));
}
std::tuple<double, double, double>
LassoSelectionStepPropertiesCopy::planeOriginRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "LassoSelectionStep.PlaneOrigin"]);
}
QList<QVector3D> LassoSelectionStepPropertiesCopy::polygonNodes() {
  return vx::PropertyValueConvertRaw<QList<std::tuple<double, double, double>>,
                                     QList<QVector3D>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<double, double, double>>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.PolygonNodes"]));
}
QList<std::tuple<double, double, double>>
LassoSelectionStepPropertiesCopy::polygonNodesRaw() {
  return vx::Node::parseVariant<QList<std::tuple<double, double, double>>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "LassoSelectionStep.PolygonNodes"]);
}
QQuaternion LassoSelectionStepPropertiesCopy::volumeOrientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                             "LassoSelectionStep.VolumeOrientation"]));
}
std::tuple<double, double, double, double>
LassoSelectionStepPropertiesCopy::volumeOrientationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "LassoSelectionStep.VolumeOrientation"]);
}
QVector3D LassoSelectionStepPropertiesCopy::volumeOrigin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.VolumeOrigin"]));
}
std::tuple<double, double, double>
LassoSelectionStepPropertiesCopy::volumeOriginRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "LassoSelectionStep.VolumeOrigin"]);
}
QVector3D LassoSelectionStepPropertiesCopy::voxelSize() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(vx::Node::parseVariant<std::tuple<double, double, double>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.VoxelSize"]));
}
std::tuple<double, double, double>
LassoSelectionStepPropertiesCopy::voxelSizeRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "LassoSelectionStep.VoxelSize"]);
}
static const char _prototype_LassoSelectionStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  76,  97,  115, 115, 111, 32,  98,  97,  115, 101, 100, 32,  115,
    101, 108, 101, 99,  116, 105, 111, 110, 34,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  97,  115,
    115, 111, 32,  83,  101, 108, 101, 99,  116, 105, 111, 110, 32,  83,  116,
    101, 112, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,
    47,  105, 99,  111, 110, 115, 47,  108, 97,  121, 101, 114, 45,  115, 104,
    97,  112, 101, 45,  112, 111, 108, 121, 103, 111, 110, 46,  112, 110, 103,
    34,  44,  32,  34,  73,  115, 83,  112, 101, 99,  105, 97,  108, 83,  116,
    101, 112, 34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  78,  97,  109,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101,
    103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,
    76,  97,  115, 115, 111, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,
    116, 101, 112, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100,
    101, 75,  105, 110, 100, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116,
    105, 111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  80,  114, 111, 112,
    101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111,
    110, 83,  116, 101, 112, 46,  76,  97,  115, 115, 111, 83,  101, 108, 101,
    99,  116, 105, 111, 110, 83,  116, 101, 112, 46,  80,  108, 97,  110, 101,
    79,  114, 105, 101, 110, 116, 97,  116, 105, 111, 110, 34,  58,  32,  123,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  82,  111, 116, 97,  116, 105, 111, 110, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  79,  114, 105,
    101, 110, 116, 97,  116, 105, 111, 110, 51,  68,  34,  125, 44,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116,
    97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  76,  97,  115, 115, 111,
    83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101, 112, 46,  80,
    108, 97,  110, 101, 79,  114, 105, 103, 105, 110, 34,  58,  32,  123, 34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    84,  114, 97,  110, 115, 108, 97,  116, 105, 111, 110, 32,  91,  109, 93,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  80,  111, 115, 105, 116, 105, 111, 110, 51,  68,  34,  125,
    44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109,
    101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  76,  97,
    115, 115, 111, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101,
    112, 46,  80,  111, 108, 121, 103, 111, 110, 78,  111, 100, 101, 115, 34,
    58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  78,  111, 100, 101, 115, 32,  111, 102, 32,  116, 104,
    101, 32,  80,  111, 108, 121, 103, 111, 110, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  76,  105, 115,
    116, 80,  111, 115, 105, 116, 105, 111, 110, 51,  68,  34,  125, 44,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110,
    116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  76,  97,  115, 115,
    111, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101, 112, 46,
    86,  111, 108, 117, 109, 101, 79,  114, 105, 101, 110, 116, 97,  116, 105,
    111, 110, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  82,  111, 116, 97,  116, 105, 111, 110,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  79,  114, 105, 101, 110, 116, 97,  116, 105, 111, 110, 51,
    68,  34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,
    101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112,
    46,  76,  97,  115, 115, 111, 83,  101, 108, 101, 99,  116, 105, 111, 110,
    83,  116, 101, 112, 46,  86,  111, 108, 117, 109, 101, 79,  114, 105, 103,
    105, 110, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  84,  114, 97,  110, 115, 108, 97,  116,
    105, 111, 110, 32,  91,  109, 93,  34,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  80,  111, 115, 105, 116,
    105, 111, 110, 51,  68,  34,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110,
    83,  116, 101, 112, 46,  76,  97,  115, 115, 111, 83,  101, 108, 101, 99,
    116, 105, 111, 110, 83,  116, 101, 112, 46,  86,  111, 120, 101, 108, 83,
    105, 122, 101, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  86,  111, 120, 101, 108, 83,  105,
    122, 101, 32,  91,  109, 93,  34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  80,  111, 115, 105, 116, 105,
    111, 110, 51,  68,  34,  125, 125, 44,  32,  34,  83,  116, 101, 112, 75,
    105, 110, 100, 34,  58,  32,  34,  83,  101, 108, 101, 99,  116, 105, 111,
    110, 83,  116, 101, 112, 34,  44,  32,  34,  83,  116, 101, 112, 84,  105,
    112, 34,  58,  32,  34,  76,  97,  115, 115, 111, 32,  83,  101, 108, 101,
    99,  116, 105, 111, 110, 34,  125, 0};
const char* LassoSelectionStepProperties::_getPrototypeJson() {
  return _prototype_LassoSelectionStep_;
}

LassoSelectionStepProperties::~LassoSelectionStepProperties() {}

QQuaternion LassoSelectionStepProperties::planeOrientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "PlaneOrientation"));
}
std::tuple<double, double, double, double>
LassoSelectionStepProperties::planeOrientationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "PlaneOrientation");
}
QSharedPointer<NodeProperty>
LassoSelectionStepProperties::planeOrientationProperty() {
  return LassoSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
      "PlaneOrientation",
      false);
}
NodePropertyTyped<vx::types::Orientation3D>
LassoSelectionStepProperties::planeOrientationPropertyTyped() {
  return NodePropertyTyped<vx::types::Orientation3D>(
      planeOrientationProperty());
}
void LassoSelectionStepProperties::setPlaneOrientation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
      "PlaneOrientation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
QVector3D LassoSelectionStepProperties::planeOrigin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "PlaneOrigin"));
}
std::tuple<double, double, double>
LassoSelectionStepProperties::planeOriginRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.PlaneOrigin");
}
QSharedPointer<NodeProperty>
LassoSelectionStepProperties::planeOriginProperty() {
  return LassoSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.PlaneOrigin",
      false);
}
NodePropertyTyped<vx::types::Position3D>
LassoSelectionStepProperties::planeOriginPropertyTyped() {
  return NodePropertyTyped<vx::types::Position3D>(planeOriginProperty());
}
void LassoSelectionStepProperties::setPlaneOrigin(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.PlaneOrigin",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
QList<QVector3D> LassoSelectionStepProperties::polygonNodes() {
  return vx::PropertyValueConvertRaw<QList<std::tuple<double, double, double>>,
                                     QList<QVector3D>>::
      fromRaw(
          _node
              ->getNodePropertyTyped<QList<std::tuple<double, double, double>>>(
                  "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
                  "PolygonNodes"));
}
QList<std::tuple<double, double, double>>
LassoSelectionStepProperties::polygonNodesRaw() {
  return _node->getNodePropertyTyped<QList<std::tuple<double, double, double>>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
      "PolygonNodes");
}
QSharedPointer<NodeProperty>
LassoSelectionStepProperties::polygonNodesProperty() {
  return LassoSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.PolygonNodes",
      false);
}
NodePropertyTyped<vx::types::ListPosition3D>
LassoSelectionStepProperties::polygonNodesPropertyTyped() {
  return NodePropertyTyped<vx::types::ListPosition3D>(polygonNodesProperty());
}
void LassoSelectionStepProperties::setPolygonNodes(QList<QVector3D> value) {
  _node->setNodePropertyTyped<QList<std::tuple<double, double, double>>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.PolygonNodes",
      vx::PropertyValueConvertRaw<QList<std::tuple<double, double, double>>,
                                  QList<QVector3D>>::toRaw(value));
}
QQuaternion LassoSelectionStepProperties::volumeOrientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "VolumeOrientation"));
}
std::tuple<double, double, double, double>
LassoSelectionStepProperties::volumeOrientationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "VolumeOrientation");
}
QSharedPointer<NodeProperty>
LassoSelectionStepProperties::volumeOrientationProperty() {
  return LassoSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
      "VolumeOrientation",
      false);
}
NodePropertyTyped<vx::types::Orientation3D>
LassoSelectionStepProperties::volumeOrientationPropertyTyped() {
  return NodePropertyTyped<vx::types::Orientation3D>(
      volumeOrientationProperty());
}
void LassoSelectionStepProperties::setVolumeOrientation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
      "VolumeOrientation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
QVector3D LassoSelectionStepProperties::volumeOrigin() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
          "VolumeOrigin"));
}
std::tuple<double, double, double>
LassoSelectionStepProperties::volumeOriginRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
      "VolumeOrigin");
}
QSharedPointer<NodeProperty>
LassoSelectionStepProperties::volumeOriginProperty() {
  return LassoSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.VolumeOrigin",
      false);
}
NodePropertyTyped<vx::types::Position3D>
LassoSelectionStepProperties::volumeOriginPropertyTyped() {
  return NodePropertyTyped<vx::types::Position3D>(volumeOriginProperty());
}
void LassoSelectionStepProperties::setVolumeOrigin(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.VolumeOrigin",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
QVector3D LassoSelectionStepProperties::voxelSize() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double>,
      QVector3D>::fromRaw(_node->getNodePropertyTyped<std::tuple<double, double,
                                                                 double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.VoxelSize"));
}
std::tuple<double, double, double>
LassoSelectionStepProperties::voxelSizeRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.VoxelSize");
}
QSharedPointer<NodeProperty> LassoSelectionStepProperties::voxelSizeProperty() {
  return LassoSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.VoxelSize",
      false);
}
NodePropertyTyped<vx::types::Position3D>
LassoSelectionStepProperties::voxelSizePropertyTyped() {
  return NodePropertyTyped<vx::types::Position3D>(voxelSizeProperty());
}
void LassoSelectionStepProperties::setVoxelSize(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.VoxelSize",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
LassoSelectionStepProperties::LassoSelectionStepProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_PlaneOrientation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
      "PlaneOrientation",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_PlaneOrientation](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_PlaneOrientation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.PlaneOrientation\":"
                      << e.what();
          return;
        }
        Q_EMIT this->planeOrientationChanged(valueCasted);
      });
  auto _prop_PlaneOrigin = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.PlaneOrigin",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_PlaneOrigin](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_PlaneOrigin) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.PlaneOrigin\":"
                      << e.what();
          return;
        }
        Q_EMIT this->planeOriginChanged(valueCasted);
      });
  auto _prop_PolygonNodes = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.PolygonNodes",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_PolygonNodes](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_PolygonNodes) return;
        QList<QVector3D> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<double, double, double>>, QList<QVector3D>>::
              fromRaw(
                  Node::parseVariant<QList<std::tuple<double, double, double>>>(
                      value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.PolygonNodes\":"
                      << e.what();
          return;
        }
        Q_EMIT this->polygonNodesChanged(valueCasted);
      });
  auto _prop_VolumeOrientation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep."
      "VolumeOrientation",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VolumeOrientation](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_VolumeOrientation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.VolumeOrientation\":"
                      << e.what();
          return;
        }
        Q_EMIT this->volumeOrientationChanged(valueCasted);
      });
  auto _prop_VolumeOrigin = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.VolumeOrigin",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VolumeOrigin](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_VolumeOrigin) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.VolumeOrigin\":"
                      << e.what();
          return;
        }
        Q_EMIT this->volumeOriginChanged(valueCasted);
      });
  auto _prop_VoxelSize = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.LassoSelectionStep.VoxelSize",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_VoxelSize](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_VoxelSize) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "LassoSelectionStep.VoxelSize\":"
                      << e.what();
          return;
        }
        Q_EMIT this->voxelSizeChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
ManualSelectionStepPropertiesEntry::~ManualSelectionStepPropertiesEntry() {}
ManualSelectionStepPropertiesEntry::ManualSelectionStepPropertiesEntry(
    vx::PropType::LabelIds, QList<qint64> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.ManualSelectionStep."
          "LabelIds",
          QVariant::fromValue<QList<qint64>>(
              vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::toRaw(
                  value_))) {}
ManualSelectionStepPropertiesBase::~ManualSelectionStepPropertiesBase() {}
ManualSelectionStepPropertiesCopy::ManualSelectionStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<qint64> ManualSelectionStepPropertiesCopy::labelIds() {
  return vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::fromRaw(
      vx::Node::parseVariant<QList<qint64>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "ManualSelectionStep.LabelIds"]));
}
QList<qint64> ManualSelectionStepPropertiesCopy::labelIdsRaw() {
  return vx::Node::parseVariant<QList<qint64>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "ManualSelectionStep.LabelIds"]);
}
static const char _prototype_ManualSelectionStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  77,  97,  110, 117, 97,  108, 108, 121, 32,  99,  104, 111, 111,
    115, 101, 32,  108, 97,  98,  101, 108, 115, 32,  102, 111, 114, 32,  115,
    101, 108, 101, 99,  116, 105, 111, 110, 34,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  77,  97,  110,
    117, 97,  108, 32,  83,  101, 108, 101, 99,  116, 105, 111, 110, 32,  83,
    116, 101, 112, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,
    58,  47,  105, 99,  111, 110, 115, 47,  100, 101, 115, 107, 116, 111, 112,
    46,  112, 110, 103, 34,  44,  32,  34,  73,  115, 83,  112, 101, 99,  105,
    97,  108, 83,  116, 101, 112, 34,  58,  32,  116, 114, 117, 101, 44,  32,
    34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,
    116, 101, 112, 46,  77,  97,  110, 117, 97,  108, 83,  101, 108, 101, 99,
    116, 105, 111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  78,  111, 100,
    101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  83,  101, 103, 109,
    101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 34,  44,  32,
    34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110,
    116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  77,  97,  110, 117,
    97,  108, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101, 112,
    46,  76,  97,  98,  101, 108, 73,  100, 115, 34,  58,  32,  123, 34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,
    97,  98,  101, 108, 32,  73,  68,  115, 34,  44,  32,  34,  78,  97,  109,
    101, 34,  58,  32,  34,  76,  97,  98,  101, 108, 73,  100, 115, 34,  44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101,
    46,  73,  110, 116, 76,  105, 115, 116, 34,  125, 125, 44,  32,  34,  83,
    116, 101, 112, 75,  105, 110, 100, 34,  58,  32,  34,  83,  101, 108, 101,
    99,  116, 105, 111, 110, 83,  116, 101, 112, 34,  125, 0};
const char* ManualSelectionStepProperties::_getPrototypeJson() {
  return _prototype_ManualSelectionStep_;
}

ManualSelectionStepProperties::~ManualSelectionStepProperties() {}

QList<qint64> ManualSelectionStepProperties::labelIds() {
  return vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::fromRaw(
      _node->getNodePropertyTyped<QList<qint64>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.ManualSelectionStep."
          "LabelIds"));
}
QList<qint64> ManualSelectionStepProperties::labelIdsRaw() {
  return _node->getNodePropertyTyped<QList<qint64>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.ManualSelectionStep.LabelIds");
}
QSharedPointer<NodeProperty> ManualSelectionStepProperties::labelIdsProperty() {
  return ManualSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.ManualSelectionStep.LabelIds",
      false);
}
NodePropertyTyped<vx::types::IntList>
ManualSelectionStepProperties::labelIdsPropertyTyped() {
  return NodePropertyTyped<vx::types::IntList>(labelIdsProperty());
}
void ManualSelectionStepProperties::setLabelIds(QList<qint64> value) {
  _node->setNodePropertyTyped<QList<qint64>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.ManualSelectionStep.LabelIds",
      vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::toRaw(value));
}
ManualSelectionStepProperties::ManualSelectionStepProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_LabelIds = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.ManualSelectionStep.LabelIds",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LabelIds](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_LabelIds) return;
        QList<qint64> valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::
                  fromRaw(Node::parseVariant<QList<qint64>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "ManualSelectionStep.LabelIds\":"
                      << e.what();
          return;
        }
        Q_EMIT this->labelIdsChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
MetaStepPropertiesEntry::~MetaStepPropertiesEntry() {}
MetaStepPropertiesEntry::MetaStepPropertiesEntry(vx::PropType::Color,
                                                 vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
MetaStepPropertiesEntry::MetaStepPropertiesEntry(vx::PropType::Description,
                                                 QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Description",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
MetaStepPropertiesEntry::MetaStepPropertiesEntry(vx::PropType::LabelID,
                                                 qint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID",
          QVariant::fromValue<qint64>(
              vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value_))) {}
MetaStepPropertiesEntry::MetaStepPropertiesEntry(vx::PropType::ModificationKind,
                                                 QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.ModificationKind",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
MetaStepPropertiesEntry::MetaStepPropertiesEntry(vx::PropType::Name,
                                                 QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
MetaStepPropertiesEntry::MetaStepPropertiesEntry(vx::PropType::Visibility,
                                                 bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Visibility",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
MetaStepPropertiesBase::~MetaStepPropertiesBase() {}
MetaStepPropertiesCopy::MetaStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
vx::Color MetaStepPropertiesCopy::color() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      vx::Color>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                            double, double>>((
      *_properties)["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color"]));
}
std::tuple<double, double, double, double> MetaStepPropertiesCopy::colorRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color"]);
}
QString MetaStepPropertiesCopy::description() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep."
                         "Description"]));
}
QString MetaStepPropertiesCopy::descriptionRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Description"]);
}
qint64 MetaStepPropertiesCopy::labelID() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      vx::Node::parseVariant<qint64>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID"]));
}
qint64 MetaStepPropertiesCopy::labelIDRaw() {
  return vx::Node::parseVariant<qint64>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID"]);
}
QString MetaStepPropertiesCopy::modificationKind() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep."
                         "ModificationKind"]));
}
QString MetaStepPropertiesCopy::modificationKindRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep."
                     "ModificationKind"]);
}
QString MetaStepPropertiesCopy::name() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name"]));
}
QString MetaStepPropertiesCopy::nameRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name"]);
}
bool MetaStepPropertiesCopy::visibility() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Visibility"]));
}
bool MetaStepPropertiesCopy::visibilityRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Visibility"]);
}
static const char _prototype_MetaStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  80,  101, 114, 102, 111, 114, 109, 115, 32,  115, 112, 101, 99,
    105, 97,  108, 32,  116, 97,  98,  108, 101, 32,  101, 110, 116, 114, 121,
    32,  109, 111, 100, 105, 102, 105, 99,  97,  116, 105, 111, 110, 34,  44,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 32,
    77,  101, 116, 97,  32,  83,  116, 101, 112, 34,  44,  32,  34,  73,  99,
    111, 110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  100,
    101, 115, 107, 116, 111, 112, 46,  112, 110, 103, 34,  44,  32,  34,  73,
    115, 83,  112, 101, 99,  105, 97,  108, 83,  116, 101, 112, 34,  58,  32,
    116, 114, 117, 101, 44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116,
    97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  77,  101, 116, 97,  83,
    116, 101, 112, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100,
    101, 75,  105, 110, 100, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116,
    105, 111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  80,  114, 111, 112,
    101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111,
    110, 83,  116, 101, 112, 46,  77,  101, 116, 97,  83,  116, 101, 112, 46,
    67,  111, 108, 111, 114, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  97,  98,  101, 108,
    67,  111, 108, 111, 114, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  76,  97,  98,  101, 108, 67,  111, 108, 111, 114, 34,  44,  32,
    34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,
    67,  111, 108, 111, 114, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110,
    83,  116, 101, 112, 46,  77,  101, 116, 97,  83,  116, 101, 112, 46,  68,
    101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  123, 34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    76,  97,  98,  101, 108, 68,  101, 115, 99,  114, 105, 112, 116, 105, 111,
    110, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  76,  97,
    98,  101, 108, 68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  83,  116, 114, 105, 110, 103, 34,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116,
    105, 111, 110, 83,  116, 101, 112, 46,  77,  101, 116, 97,  83,  116, 101,
    112, 46,  76,  97,  98,  101, 108, 73,  68,  34,  58,  32,  123, 34,  68,
    101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  45,
    49,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  76,  97,  98,  101, 108, 73,  68,  34,  44,  32,  34,
    77,  97,  120, 105, 109, 117, 109, 86,  97,  108, 117, 101, 34,  58,  32,
    57,  57,  57,  57,  57,  57,  44,  32,  34,  77,  105, 110, 105, 109, 117,
    109, 86,  97,  108, 117, 101, 34,  58,  32,  48,  44,  32,  34,  78,  97,
    109, 101, 34,  58,  32,  34,  76,  97,  98,  101, 108, 73,  68,  34,  44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101,
    46,  73,  110, 116, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,
    116, 101, 112, 46,  77,  101, 116, 97,  83,  116, 101, 112, 46,  77,  111,
    100, 105, 102, 105, 99,  97,  116, 105, 111, 110, 75,  105, 110, 100, 34,
    58,  32,  123, 34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117,
    101, 34,  58,  32,  34,  78,  111, 110, 101, 34,  44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  46,  46,
    46,  34,  44,  32,  34,  69,  110, 117, 109, 69,  110, 116, 114, 105, 101,
    115, 34,  58,  32,  123, 34,  65,  100, 100, 76,  97,  98,  101, 108, 34,
    58,  32,  123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110,
    34,  58,  32,  34,  65,  100, 100, 115, 32,  97,  32,  110, 101, 119, 32,
    76,  97,  98,  101, 108, 45,  101, 110, 116, 114, 121, 32,  116, 111, 32,
    116, 104, 101, 32,  108, 97,  98,  101, 108, 84,  97,  98,  108, 101, 32,
    119, 105, 116, 104, 32,  97,  108, 108, 32,  105, 110, 102, 111, 114, 109,
    97,  116, 105, 111, 110, 34,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  65,  100, 100, 76,  97,  98,
    101, 108, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111,
    110, 34,  58,  32,  49,  125, 44,  32,  34,  67,  111, 108, 111, 114, 34,
    58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  67,  111, 108, 111, 114, 67,  104, 97,  110, 103, 101,
    34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,
    58,  32,  51,  125, 44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116,
    105, 111, 110, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  68,  101, 115, 99,  114, 105, 112,
    116, 105, 111, 110, 67,  104, 97,  110, 103, 101, 34,  44,  32,  34,  85,
    73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  53,  125, 44,
    32,  34,  78,  97,  109, 101, 34,  58,  32,  123, 34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  78,  97,  109, 101,
    67,  104, 97,  110, 103, 101, 34,  44,  32,  34,  85,  73,  80,  111, 115,
    105, 116, 105, 111, 110, 34,  58,  32,  52,  125, 44,  32,  34,  78,  111,
    110, 101, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  78,  111, 110, 101, 34,  44,  32,  34,
    85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  54,  125,
    44,  32,  34,  86,  105, 115, 105, 98,  105, 108, 105, 116, 121, 34,  58,
    32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  86,  105, 115, 105, 98,  108, 101, 67,  104, 97,  110, 103,
    101, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110,
    34,  58,  32,  50,  125, 125, 44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 84,
    97,  98,  108, 101, 69,  110, 117, 109, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  69,  110, 117, 109,
    101, 114, 97,  116, 105, 111, 110, 34,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105,
    111, 110, 83,  116, 101, 112, 46,  77,  101, 116, 97,  83,  116, 101, 112,
    46,  78,  97,  109, 101, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  97,  98,  101, 108,
    78,  97,  109, 101, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,
    34,  76,  97,  98,  101, 108, 78,  97,  109, 101, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  83,  116,
    114, 105, 110, 103, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,
    116, 101, 112, 46,  77,  101, 116, 97,  83,  116, 101, 112, 46,  86,  105,
    115, 105, 98,  105, 108, 105, 116, 121, 34,  58,  32,  123, 34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  97,
    98,  101, 108, 86,  105, 115, 105, 98,  105, 108, 105, 116, 121, 34,  44,
    32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  76,  97,  98,  101, 108,
    86,  105, 115, 105, 98,  105, 108, 105, 116, 121, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  66,  111,
    111, 108, 101, 97,  110, 34,  125, 125, 44,  32,  34,  83,  116, 101, 112,
    75,  105, 110, 100, 34,  58,  32,  34,  77,  101, 116, 97,  83,  116, 101,
    112, 34,  125, 0};
const char* MetaStepProperties::_getPrototypeJson() {
  return _prototype_MetaStep_;
}

MetaStepProperties::~MetaStepProperties() {}

vx::Color MetaStepProperties::color() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color"));
}
std::tuple<double, double, double, double> MetaStepProperties::colorRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color");
}
QSharedPointer<NodeProperty> MetaStepProperties::colorProperty() {
  return MetaStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color", false);
}
NodePropertyTyped<vx::types::Color> MetaStepProperties::colorPropertyTyped() {
  return NodePropertyTyped<vx::types::Color>(colorProperty());
}
void MetaStepProperties::setColor(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
QString MetaStepProperties::description() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Description"));
}
QString MetaStepProperties::descriptionRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Description");
}
QSharedPointer<NodeProperty> MetaStepProperties::descriptionProperty() {
  return MetaStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Description", false);
}
NodePropertyTyped<vx::types::String>
MetaStepProperties::descriptionPropertyTyped() {
  return NodePropertyTyped<vx::types::String>(descriptionProperty());
}
void MetaStepProperties::setDescription(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Description",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
qint64 MetaStepProperties::labelID() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      _node->getNodePropertyTyped<qint64>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID"));
}
qint64 MetaStepProperties::labelIDRaw() {
  return _node->getNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID");
}
QSharedPointer<NodeProperty> MetaStepProperties::labelIDProperty() {
  return MetaStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID", false);
}
NodePropertyTyped<vx::types::Int> MetaStepProperties::labelIDPropertyTyped() {
  return NodePropertyTyped<vx::types::Int>(labelIDProperty());
}
void MetaStepProperties::setLabelID(qint64 value) {
  _node->setNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID",
      vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value));
}
QString MetaStepProperties::modificationKind() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.ModificationKind"));
}
QString MetaStepProperties::modificationKindRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.ModificationKind");
}
QSharedPointer<NodeProperty> MetaStepProperties::modificationKindProperty() {
  return MetaStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.ModificationKind",
      false);
}
NodePropertyTyped<vx::types::Enumeration>
MetaStepProperties::modificationKindPropertyTyped() {
  return NodePropertyTyped<vx::types::Enumeration>(modificationKindProperty());
}
void MetaStepProperties::setModificationKind(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.ModificationKind",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
QString MetaStepProperties::name() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name"));
}
QString MetaStepProperties::nameRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name");
}
QSharedPointer<NodeProperty> MetaStepProperties::nameProperty() {
  return MetaStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name", false);
}
NodePropertyTyped<vx::types::String> MetaStepProperties::namePropertyTyped() {
  return NodePropertyTyped<vx::types::String>(nameProperty());
}
void MetaStepProperties::setName(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
bool MetaStepProperties::visibility() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Visibility"));
}
bool MetaStepProperties::visibilityRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Visibility");
}
QSharedPointer<NodeProperty> MetaStepProperties::visibilityProperty() {
  return MetaStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Visibility", false);
}
NodePropertyTyped<vx::types::Boolean>
MetaStepProperties::visibilityPropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(visibilityProperty());
}
void MetaStepProperties::setVisibility(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Visibility",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
MetaStepProperties::MetaStepProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_Color = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Color](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Color) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Color\":"
              << e.what();
          return;
        }
        Q_EMIT this->colorChanged(valueCasted);
      });
  auto _prop_Description = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Description", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Description](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_Description) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep.MetaStep."
                         "Description\":"
                      << e.what();
          return;
        }
        Q_EMIT this->descriptionChanged(valueCasted);
      });
  auto _prop_LabelID = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LabelID](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_LabelID) return;
        qint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
              Node::parseVariant<qint64>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.LabelID\":"
              << e.what();
          return;
        }
        Q_EMIT this->labelIDChanged(valueCasted);
      });
  auto _prop_ModificationKind = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.ModificationKind",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ModificationKind](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ModificationKind) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep.MetaStep."
                         "ModificationKind\":"
                      << e.what();
          return;
        }
        Q_EMIT this->modificationKindChanged(valueCasted);
      });
  auto _prop_Name = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Name](const QSharedPointer<NodeProperty>& property,
                         const QVariant& value) {
        if (property != _prop_Name) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Name\":"
              << e.what();
          return;
        }
        Q_EMIT this->nameChanged(valueCasted);
      });
  auto _prop_Visibility = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MetaStep.Visibility", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Visibility](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_Visibility) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep.MetaStep."
                         "Visibility\":"
                      << e.what();
          return;
        }
        Q_EMIT this->visibilityChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
MultiThresholdStepPropertiesEntry::~MultiThresholdStepPropertiesEntry() {}
MultiThresholdStepPropertiesEntry::MultiThresholdStepPropertiesEntry(
    vx::PropType::ThresholdList,
    QList<
        std::tuple<double, std::tuple<double, double, double, double>, qint64>>
        value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep."
          "ThresholdList",
          QVariant::fromValue<QList<std::tuple<
              double, std::tuple<double, double, double, double>, qint64>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint64>>,
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint64>>>::toRaw(value_))) {}
MultiThresholdStepPropertiesEntry::MultiThresholdStepPropertiesEntry(
    vx::PropType::Volume, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep.Volume",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
MultiThresholdStepPropertiesBase::~MultiThresholdStepPropertiesBase() {}
MultiThresholdStepPropertiesCopy::MultiThresholdStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint64>>
MultiThresholdStepPropertiesCopy::thresholdList() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint64>>,
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint64>>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint64>>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "MultiThresholdStep.ThresholdList"]));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint64>>
MultiThresholdStepPropertiesCopy::thresholdListRaw() {
  return vx::Node::parseVariant<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint64>>>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "MultiThresholdStep.ThresholdList"]);
}
QDBusObjectPath MultiThresholdStepPropertiesCopy::volumeRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "MultiThresholdStep.Volume"]);
}
static const char _prototype_MultiThresholdStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 32,
    98,  121, 32,  115, 101, 116, 116, 105, 110, 103, 32,  109, 117, 108, 116,
    105, 112, 108, 101, 32,  116, 104, 114, 101, 115, 104, 111, 108, 100, 115,
    34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  77,  117, 108, 116, 105, 45,  84,  104, 114, 101, 115,
    104, 111, 108, 100, 32,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105,
    111, 110, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,
    47,  105, 99,  111, 110, 115, 47,  99,  104, 97,  114, 116, 45,  112, 105,
    101, 45,  115, 101, 112, 97,  114, 97,  116, 101, 46,  112, 110, 103, 34,
    44,  32,  34,  73,  115, 83,  112, 101, 99,  105, 97,  108, 83,  116, 101,
    112, 34,  58,  32,  102, 97,  108, 115, 101, 44,  32,  34,  78,  97,  109,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101,
    103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,
    77,  117, 108, 116, 105, 84,  104, 114, 101, 115, 104, 111, 108, 100, 83,
    116, 101, 112, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100,
    101, 75,  105, 110, 100, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116,
    105, 111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  80,  114, 111, 112,
    101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111,
    110, 83,  116, 101, 112, 46,  77,  117, 108, 116, 105, 84,  104, 114, 101,
    115, 104, 111, 108, 100, 83,  116, 101, 112, 46,  84,  104, 114, 101, 115,
    104, 111, 108, 100, 76,  105, 115, 116, 34,  58,  32,  123, 34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  84,  104,
    114, 101, 115, 104, 111, 108, 100, 32,  76,  105, 115, 116, 34,  44,  32,
    34,  78,  97,  109, 101, 34,  58,  32,  34,  84,  104, 114, 101, 115, 104,
    111, 108, 100, 76,  105, 115, 116, 34,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  84,  104, 114, 101, 115,
    104, 111, 108, 100, 76,  97,  98,  101, 108, 77,  97,  112, 112, 105, 110,
    103, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,
    101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112,
    46,  77,  117, 108, 116, 105, 84,  104, 114, 101, 115, 104, 111, 108, 100,
    83,  116, 101, 112, 46,  86,  111, 108, 117, 109, 101, 34,  58,  32,  123,
    34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 84,  121, 112,
    101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    68,  97,  116, 97,  46,  86,  111, 108, 117, 109, 101, 34,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  73,  110, 112, 117, 116, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101,
    102, 101, 114, 101, 110, 99,  101, 34,  125, 125, 44,  32,  34,  83,  116,
    97,  114, 116, 115, 82,  117, 110, 65,  117, 116, 111, 109, 97,  116, 105,
    99,  34,  58,  32,  102, 97,  108, 115, 101, 44,  32,  34,  83,  116, 101,
    112, 75,  105, 110, 100, 34,  58,  32,  34,  76,  97,  98,  101, 108, 83,
    116, 101, 112, 34,  44,  32,  34,  83,  116, 101, 112, 84,  105, 112, 34,
    58,  32,  34,  77,  117, 108, 116, 105, 45,  84,  104, 114, 101, 115, 104,
    111, 108, 100, 32,  83,  101, 103, 109, 101, 110, 116, 97,  116, 105, 111,
    110, 34,  44,  32,  34,  85,  73,  34,  58,  32,  123, 34,  83,  101, 103,
    109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 85,  73,
    69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  91,  123, 34,  78,  97,
    109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,
    101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112,
    46,  77,  117, 108, 116, 105, 84,  104, 114, 101, 115, 104, 111, 108, 100,
    83,  116, 101, 112, 46,  77,  117, 108, 116, 105, 84,  104, 114, 101, 115,
    87,  105, 100, 103, 101, 116, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  67,  117, 115, 116, 111, 109, 34,  125, 93,  125, 125, 0};
const char* MultiThresholdStepProperties::_getPrototypeJson() {
  return _prototype_MultiThresholdStep_;
}

MultiThresholdStepProperties::~MultiThresholdStepProperties() {}

QList<std::tuple<double, std::tuple<double, double, double, double>, qint64>>
MultiThresholdStepProperties::thresholdList() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint64>>,
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint64>>>::
      fromRaw(_node->getNodePropertyTyped<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint64>>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep."
          "ThresholdList"));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint64>>
MultiThresholdStepProperties::thresholdListRaw() {
  return _node->getNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint64>>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep."
      "ThresholdList");
}
QSharedPointer<NodeProperty>
MultiThresholdStepProperties::thresholdListProperty() {
  return MultiThresholdStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep."
      "ThresholdList",
      false);
}
NodePropertyTyped<vx::types::ThresholdLabelMapping>
MultiThresholdStepProperties::thresholdListPropertyTyped() {
  return NodePropertyTyped<vx::types::ThresholdLabelMapping>(
      thresholdListProperty());
}
void MultiThresholdStepProperties::setThresholdList(
    QList<
        std::tuple<double, std::tuple<double, double, double, double>, qint64>>
        value) {
  _node->setNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint64>>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep."
      "ThresholdList",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint64>>,
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint64>>>::toRaw(value));
}
vx::Node* MultiThresholdStepProperties::volume() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep.Volume"));
}
QDBusObjectPath MultiThresholdStepProperties::volumeRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep.Volume");
}
QSharedPointer<NodeProperty> MultiThresholdStepProperties::volumeProperty() {
  return MultiThresholdStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep.Volume",
      false);
}
NodePropertyTyped<vx::types::NodeReference>
MultiThresholdStepProperties::volumePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(volumeProperty());
}
void MultiThresholdStepProperties::setVolume(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep.Volume",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
MultiThresholdStepProperties::MultiThresholdStepProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_ThresholdList = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep."
      "ThresholdList",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ThresholdList](const QSharedPointer<NodeProperty>& property,
                                  const QVariant& value) {
        if (property != _prop_ThresholdList) return;
        QList<std::tuple<double, std::tuple<double, double, double, double>,
                         qint64>>
            valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint64>>,
              QList<
                  std::tuple<double, std::tuple<double, double, double, double>,
                             qint64>>>::
              fromRaw(Node::parseVariant<QList<std::tuple<
                          double, std::tuple<double, double, double, double>,
                          qint64>>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "MultiThresholdStep.ThresholdList\":"
                      << e.what();
          return;
        }
        Q_EMIT this->thresholdListChanged(valueCasted);
      });
  auto _prop_Volume = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.MultiThresholdStep.Volume",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Volume](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Volume) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "MultiThresholdStep.Volume\":"
                      << e.what();
          return;
        }
        Q_EMIT this->volumeChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
RemoveLabelStepPropertiesEntry::~RemoveLabelStepPropertiesEntry() {}
RemoveLabelStepPropertiesEntry::RemoveLabelStepPropertiesEntry(
    vx::PropType::LabelIDs, QList<qint64> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.RemoveLabelStep.LabelIDs",
          QVariant::fromValue<QList<qint64>>(
              vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::toRaw(
                  value_))) {}
RemoveLabelStepPropertiesBase::~RemoveLabelStepPropertiesBase() {}
RemoveLabelStepPropertiesCopy::RemoveLabelStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<qint64> RemoveLabelStepPropertiesCopy::labelIDs() {
  return vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::fromRaw(
      vx::Node::parseVariant<QList<qint64>>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "RemoveLabelStep.LabelIDs"]));
}
QList<qint64> RemoveLabelStepPropertiesCopy::labelIDsRaw() {
  return vx::Node::parseVariant<QList<qint64>>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.SegmentationStep.RemoveLabelStep.LabelIDs"]);
}
static const char _prototype_RemoveLabelStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  82,  101, 109, 111, 118, 101, 32,  112, 97,  115, 115, 101, 100,
    32,  108, 97,  98,  101, 108, 115, 32,  102, 114, 111, 109, 32,  116, 104,
    101, 32,  108, 97,  98,  101, 108, 84,  97,  98,  108, 101, 32,  97,  110,
    100, 32,  116, 104, 101, 32,  108, 97,  98,  101, 108, 86,  111, 108, 117,
    109, 101, 34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  82,  101, 109, 111, 118, 101, 32,  108, 97,
    98,  101, 108, 32,  115, 116, 101, 112, 34,  44,  32,  34,  73,  99,  111,
    110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  100, 101,
    115, 107, 116, 111, 112, 46,  112, 110, 103, 34,  44,  32,  34,  73,  115,
    83,  112, 101, 99,  105, 97,  108, 83,  116, 101, 112, 34,  58,  32,  116,
    114, 117, 101, 44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,
    116, 105, 111, 110, 83,  116, 101, 112, 46,  82,  101, 109, 111, 118, 101,
    76,  97,  98,  101, 108, 83,  116, 101, 112, 34,  44,  32,  34,  78,  111,
    100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  83,  101, 103,
    109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 34,  44,
    32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,
    123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101,
    110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  82,  101, 109,
    111, 118, 101, 76,  97,  98,  101, 108, 83,  116, 101, 112, 46,  76,  97,
    98,  101, 108, 73,  68,  115, 34,  58,  32,  123, 34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  97,  98,  101,
    108, 32,  73,  68,  115, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  76,  97,  98,  101, 108, 32,  73,  68,  115, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  73,
    110, 116, 76,  105, 115, 116, 34,  125, 125, 44,  32,  34,  83,  116, 101,
    112, 75,  105, 110, 100, 34,  58,  32,  34,  78,  111, 110, 101, 34,  125,
    0};
const char* RemoveLabelStepProperties::_getPrototypeJson() {
  return _prototype_RemoveLabelStep_;
}

RemoveLabelStepProperties::~RemoveLabelStepProperties() {}

QList<qint64> RemoveLabelStepProperties::labelIDs() {
  return vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::fromRaw(
      _node->getNodePropertyTyped<QList<qint64>>(
          "de.uni_stuttgart.Voxie.SegmentationStep.RemoveLabelStep.LabelIDs"));
}
QList<qint64> RemoveLabelStepProperties::labelIDsRaw() {
  return _node->getNodePropertyTyped<QList<qint64>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.RemoveLabelStep.LabelIDs");
}
QSharedPointer<NodeProperty> RemoveLabelStepProperties::labelIDsProperty() {
  return RemoveLabelStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.RemoveLabelStep.LabelIDs",
      false);
}
NodePropertyTyped<vx::types::IntList>
RemoveLabelStepProperties::labelIDsPropertyTyped() {
  return NodePropertyTyped<vx::types::IntList>(labelIDsProperty());
}
void RemoveLabelStepProperties::setLabelIDs(QList<qint64> value) {
  _node->setNodePropertyTyped<QList<qint64>>(
      "de.uni_stuttgart.Voxie.SegmentationStep.RemoveLabelStep.LabelIDs",
      vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::toRaw(value));
}
RemoveLabelStepProperties::RemoveLabelStepProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_LabelIDs = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.RemoveLabelStep.LabelIDs",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LabelIDs](const QSharedPointer<NodeProperty>& property,
                             const QVariant& value) {
        if (property != _prop_LabelIDs) return;
        QList<qint64> valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QList<qint64>, QList<qint64>>::
                  fromRaw(Node::parseVariant<QList<qint64>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "RemoveLabelStep.LabelIDs\":"
                      << e.what();
          return;
        }
        Q_EMIT this->labelIDsChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
SubtractStepPropertiesEntry::~SubtractStepPropertiesEntry() {}
SubtractStepPropertiesEntry::SubtractStepPropertiesEntry(vx::PropType::LabelId,
                                                         qint64 value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.SubtractStep.LabelId",
          QVariant::fromValue<qint64>(
              vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value_))) {}
SubtractStepPropertiesBase::~SubtractStepPropertiesBase() {}
SubtractStepPropertiesCopy::SubtractStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
qint64 SubtractStepPropertiesCopy::labelId() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      vx::Node::parseVariant<qint64>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep.SubtractStep."
                         "LabelId"]));
}
qint64 SubtractStepPropertiesCopy::labelIdRaw() {
  return vx::Node::parseVariant<qint64>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.SegmentationStep.SubtractStep.LabelId"]);
}
static const char _prototype_SubtractStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  83,  117, 98,  116, 114, 97,  99,  116, 115, 32,  103, 105, 118,
    101, 110, 32,  118, 111, 120, 101, 108, 32,  115, 101, 108, 101, 99,  116,
    105, 111, 110, 32,  102, 114, 111, 109, 32,  115, 101, 108, 101, 99,  116,
    101, 100, 32,  108, 97,  98,  101, 108, 32,  105, 100, 34,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    83,  117, 98,  116, 114, 97,  99,  116, 32,  83,  116, 101, 112, 34,  44,
    32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,  47,  105, 99,  111,
    110, 115, 47,  100, 101, 115, 107, 116, 111, 112, 46,  112, 110, 103, 34,
    44,  32,  34,  73,  115, 83,  112, 101, 99,  105, 97,  108, 83,  116, 101,
    112, 34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  78,  97,  109, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103,
    109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  83,
    117, 98,  116, 114, 97,  99,  116, 83,  116, 101, 112, 34,  44,  32,  34,
    78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  83,
    101, 103, 109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112,
    34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,
    58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103,
    109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  83,
    117, 98,  116, 114, 97,  99,  116, 83,  116, 101, 112, 46,  76,  97,  98,
    101, 108, 73,  100, 34,  58,  32,  123, 34,  68,  101, 102, 97,  117, 108,
    116, 86,  97,  108, 117, 101, 34,  58,  32,  45,  49,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,
    97,  98,  101, 108, 73,  100, 34,  44,  32,  34,  77,  97,  120, 105, 109,
    117, 109, 86,  97,  108, 117, 101, 34,  58,  32,  57,  57,  57,  57,  57,
    57,  44,  32,  34,  77,  105, 110, 105, 109, 117, 109, 86,  97,  108, 117,
    101, 34,  58,  32,  48,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,
    34,  76,  97,  98,  101, 108, 73,  100, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  73,  110, 116, 34,
    125, 125, 44,  32,  34,  83,  116, 101, 112, 75,  105, 110, 100, 34,  58,
    32,  34,  76,  97,  98,  101, 108, 83,  116, 101, 112, 34,  125, 0};
const char* SubtractStepProperties::_getPrototypeJson() {
  return _prototype_SubtractStep_;
}

SubtractStepProperties::~SubtractStepProperties() {}

qint64 SubtractStepProperties::labelId() {
  return vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
      _node->getNodePropertyTyped<qint64>(
          "de.uni_stuttgart.Voxie.SegmentationStep.SubtractStep.LabelId"));
}
qint64 SubtractStepProperties::labelIdRaw() {
  return _node->getNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.SegmentationStep.SubtractStep.LabelId");
}
QSharedPointer<NodeProperty> SubtractStepProperties::labelIdProperty() {
  return SubtractStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.SubtractStep.LabelId", false);
}
NodePropertyTyped<vx::types::Int>
SubtractStepProperties::labelIdPropertyTyped() {
  return NodePropertyTyped<vx::types::Int>(labelIdProperty());
}
void SubtractStepProperties::setLabelId(qint64 value) {
  _node->setNodePropertyTyped<qint64>(
      "de.uni_stuttgart.Voxie.SegmentationStep.SubtractStep.LabelId",
      vx::PropertyValueConvertRaw<qint64, qint64>::toRaw(value));
}
SubtractStepProperties::SubtractStepProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_LabelId = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.SubtractStep.LabelId", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LabelId](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_LabelId) return;
        qint64 valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<qint64, qint64>::fromRaw(
              Node::parseVariant<qint64>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "SubtractStep.LabelId\":"
                      << e.what();
          return;
        }
        Q_EMIT this->labelIdChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
inline namespace segmentationstep_prop {
ThresholdSelectionStepPropertiesEntry::
    ~ThresholdSelectionStepPropertiesEntry() {}
ThresholdSelectionStepPropertiesEntry::ThresholdSelectionStepPropertiesEntry(
    vx::PropType::LowerThreshold, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
          "LowerThreshold",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
ThresholdSelectionStepPropertiesEntry::ThresholdSelectionStepPropertiesEntry(
    vx::PropType::UpperThreshold, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
          "UpperThreshold",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
ThresholdSelectionStepPropertiesEntry::ThresholdSelectionStepPropertiesEntry(
    vx::PropType::Volume, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
          "Volume",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
ThresholdSelectionStepPropertiesBase::~ThresholdSelectionStepPropertiesBase() {}
ThresholdSelectionStepPropertiesCopy::ThresholdSelectionStepPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
double ThresholdSelectionStepPropertiesCopy::lowerThreshold() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "ThresholdSelectionStep.LowerThreshold"]));
}
double ThresholdSelectionStepPropertiesCopy::lowerThresholdRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "ThresholdSelectionStep.LowerThreshold"]);
}
double ThresholdSelectionStepPropertiesCopy::upperThreshold() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                         "ThresholdSelectionStep.UpperThreshold"]));
}
double ThresholdSelectionStepPropertiesCopy::upperThresholdRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "ThresholdSelectionStep.UpperThreshold"]);
}
QDBusObjectPath ThresholdSelectionStepPropertiesCopy::volumeRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.SegmentationStep."
                     "ThresholdSelectionStep.Volume"]);
}
static const char _prototype_ThresholdSelectionStep_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  84,  104, 114, 101, 115, 104, 111, 108, 100, 32,  98,  97,  115,
    101, 100, 32,  115, 101, 108, 101, 99,  116, 105, 111, 110, 34,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  84,  104, 114, 101, 115, 104, 111, 108, 100, 32,  83,  101, 103, 109,
    101, 110, 116, 97,  116, 105, 111, 110, 34,  44,  32,  34,  73,  99,  111,
    110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  117, 105,
    45,  115, 112, 108, 105, 116, 116, 101, 114, 46,  112, 110, 103, 34,  44,
    32,  34,  73,  115, 83,  112, 101, 99,  105, 97,  108, 83,  116, 101, 112,
    34,  58,  32,  102, 97,  108, 115, 101, 44,  32,  34,  78,  97,  109, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103,
    109, 101, 110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  84,
    104, 114, 101, 115, 104, 111, 108, 100, 83,  101, 108, 101, 99,  116, 105,
    111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  78,  111, 100, 101, 75,
    105, 110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    78,  111, 100, 101, 75,  105, 110, 100, 46,  83,  101, 103, 109, 101, 110,
    116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  80,
    114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,
    116, 105, 111, 110, 83,  116, 101, 112, 46,  84,  104, 114, 101, 115, 104,
    111, 108, 100, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101,
    112, 46,  76,  111, 119, 101, 114, 84,  104, 114, 101, 115, 104, 111, 108,
    100, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  76,  111, 119, 101, 114, 84,  104, 114, 101,
    115, 104, 111, 108, 100, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  76,  111, 119, 101, 114, 84,  104, 114, 101, 115, 104, 111, 108,
    100, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,
    121, 112, 101, 46,  70,  108, 111, 97,  116, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,
    116, 105, 111, 110, 83,  116, 101, 112, 46,  84,  104, 114, 101, 115, 104,
    111, 108, 100, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101,
    112, 46,  85,  112, 112, 101, 114, 84,  104, 114, 101, 115, 104, 111, 108,
    100, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  85,  112, 112, 101, 114, 84,  104, 114, 101,
    115, 104, 111, 108, 100, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  85,  112, 112, 101, 114, 84,  104, 114, 101, 115, 104, 111, 108,
    100, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,
    121, 112, 101, 46,  70,  108, 111, 97,  116, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101, 110, 116, 97,
    116, 105, 111, 110, 83,  116, 101, 112, 46,  84,  104, 114, 101, 115, 104,
    111, 108, 100, 83,  101, 108, 101, 99,  116, 105, 111, 110, 83,  116, 101,
    112, 46,  86,  111, 108, 117, 109, 101, 34,  58,  32,  123, 34,  65,  108,
    108, 111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116,
    121, 112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  68,  97,  116, 97,  46,  86,  111, 108, 117, 109, 101, 34,  93,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  73,  110, 112, 117, 116, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101,
    82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125, 125, 44,  32,  34,
    83,  116, 97,  114, 116, 115, 82,  117, 110, 65,  117, 116, 111, 109, 97,
    116, 105, 99,  34,  58,  32,  116, 114, 117, 101, 44,  32,  34,  83,  116,
    101, 112, 75,  105, 110, 100, 34,  58,  32,  34,  83,  101, 108, 101, 99,
    116, 105, 111, 110, 83,  116, 101, 112, 34,  44,  32,  34,  83,  116, 101,
    112, 84,  105, 112, 34,  58,  32,  34,  84,  104, 114, 101, 115, 104, 111,
    108, 100, 32,  83,  101, 108, 101, 99,  116, 105, 111, 110, 34,  44,  32,
    34,  85,  73,  34,  58,  32,  123, 34,  83,  101, 103, 109, 101, 110, 116,
    97,  116, 105, 111, 110, 83,  116, 101, 112, 85,  73,  69,  110, 116, 114,
    105, 101, 115, 34,  58,  32,  91,  123, 34,  78,  97,  109, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  83,  101, 103, 109, 101,
    110, 116, 97,  116, 105, 111, 110, 83,  116, 101, 112, 46,  84,  104, 114,
    101, 115, 104, 111, 108, 100, 83,  101, 108, 101, 99,  116, 105, 111, 110,
    83,  116, 101, 112, 46,  84,  104, 114, 101, 115, 104, 111, 108, 100, 87,
    105, 100, 103, 101, 116, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  67,  117, 115, 116, 111, 109, 34,  125, 93,  125, 125, 0};
const char* ThresholdSelectionStepProperties::_getPrototypeJson() {
  return _prototype_ThresholdSelectionStep_;
}

ThresholdSelectionStepProperties::~ThresholdSelectionStepProperties() {}

double ThresholdSelectionStepProperties::lowerThreshold() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
          "LowerThreshold"));
}
double ThresholdSelectionStepProperties::lowerThresholdRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
      "LowerThreshold");
}
QSharedPointer<NodeProperty>
ThresholdSelectionStepProperties::lowerThresholdProperty() {
  return ThresholdSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
      "LowerThreshold",
      false);
}
NodePropertyTyped<vx::types::Float>
ThresholdSelectionStepProperties::lowerThresholdPropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(lowerThresholdProperty());
}
void ThresholdSelectionStepProperties::setLowerThreshold(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
      "LowerThreshold",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
double ThresholdSelectionStepProperties::upperThreshold() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
          "UpperThreshold"));
}
double ThresholdSelectionStepProperties::upperThresholdRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
      "UpperThreshold");
}
QSharedPointer<NodeProperty>
ThresholdSelectionStepProperties::upperThresholdProperty() {
  return ThresholdSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
      "UpperThreshold",
      false);
}
NodePropertyTyped<vx::types::Float>
ThresholdSelectionStepProperties::upperThresholdPropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(upperThresholdProperty());
}
void ThresholdSelectionStepProperties::setUpperThreshold(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
      "UpperThreshold",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
vx::Node* ThresholdSelectionStepProperties::volume() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
          "Volume"));
}
QDBusObjectPath ThresholdSelectionStepProperties::volumeRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep.Volume");
}
QSharedPointer<NodeProperty>
ThresholdSelectionStepProperties::volumeProperty() {
  return ThresholdSelectionStepProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep.Volume",
      false);
}
NodePropertyTyped<vx::types::NodeReference>
ThresholdSelectionStepProperties::volumePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(volumeProperty());
}
void ThresholdSelectionStepProperties::setVolume(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep.Volume",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
ThresholdSelectionStepProperties::ThresholdSelectionStepProperties(
    vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_LowerThreshold = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
      "LowerThreshold",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LowerThreshold](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_LowerThreshold) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "ThresholdSelectionStep.LowerThreshold\":"
                      << e.what();
          return;
        }
        Q_EMIT this->lowerThresholdChanged(valueCasted);
      });
  auto _prop_UpperThreshold = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep."
      "UpperThreshold",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_UpperThreshold](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_UpperThreshold) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "ThresholdSelectionStep.UpperThreshold\":"
                      << e.what();
          return;
        }
        Q_EMIT this->upperThresholdChanged(valueCasted);
      });
  auto _prop_Volume = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.SegmentationStep.ThresholdSelectionStep.Volume",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Volume](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Volume) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.SegmentationStep."
                         "ThresholdSelectionStep.Volume\":"
                      << e.what();
          return;
        }
        Q_EMIT this->volumeChanged(valueCasted);
      });
}

}  // namespace segmentationstep_prop
}  // namespace vx
