// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#include "Prototypes.hpp"

#include <Voxie/Node/NodePrototype.hpp>
#include <Voxie/Node/PropertyValueConvertDBus.hpp>
#include <Voxie/Node/PropertyValueConvertRaw.hpp>
namespace vx {
inline namespace object3d_prop {
Test3DObjectPropertiesEntry::~Test3DObjectPropertiesEntry() {}
Test3DObjectPropertiesEntry::Test3DObjectPropertiesEntry(vx::PropType::Length,
                                                         double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Example.Object3D.Test3DObject.Length",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
Test3DObjectPropertiesBase::~Test3DObjectPropertiesBase() {}
Test3DObjectPropertiesCopy::Test3DObjectPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
double Test3DObjectPropertiesCopy::length() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Example.Object3D.Test3DObject.Length"]));
}
double Test3DObjectPropertiesCopy::lengthRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Example.Object3D.Test3DObject.Length"]);
}
static const char _prototype_Test3DObject_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  84,  101, 115, 116, 32,  111, 98,  106, 101, 99,  116, 32,  115,
    104, 111, 119, 110, 32,  105, 110, 32,  116, 104, 101, 32,  51,  68,  32,
    118, 105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  84,
    101, 115, 116, 32,  51,  68,  32,  111, 98,  106, 101, 99,  116, 34,  44,
    32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,  47,  105, 99,  111,
    110, 115, 47,  117, 110, 105, 118, 101, 114, 115, 97,  108, 46,  112, 110,
    103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  69,  120, 97,  109, 112, 108, 101, 46,  79,
    98,  106, 101, 99,  116, 51,  68,  46,  84,  101, 115, 116, 51,  68,  79,
    98,  106, 101, 99,  116, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105,
    110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,
    111, 100, 101, 75,  105, 110, 100, 46,  79,  98,  106, 101, 99,  116, 51,
    68,  34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115,
    34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  69,  120,
    97,  109, 112, 108, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,
    84,  101, 115, 116, 51,  68,  79,  98,  106, 101, 99,  116, 46,  76,  101,
    110, 103, 116, 104, 34,  58,  32,  123, 34,  68,  101, 102, 97,  117, 108,
    116, 86,  97,  108, 117, 101, 34,  58,  32,  49,  46,  48,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    76,  101, 110, 103, 116, 104, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108, 111, 97,  116, 34,
    125, 125, 125, 0};
const char* Test3DObjectProperties::_getPrototypeJson() {
  return _prototype_Test3DObject_;
}

Test3DObjectProperties::~Test3DObjectProperties() {}

double Test3DObjectProperties::length() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Example.Object3D.Test3DObject.Length"));
}
double Test3DObjectProperties::lengthRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Example.Object3D.Test3DObject.Length");
}
QSharedPointer<NodeProperty> Test3DObjectProperties::lengthProperty() {
  return Test3DObjectProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Example.Object3D.Test3DObject.Length", false);
}
NodePropertyTyped<vx::types::Float>
Test3DObjectProperties::lengthPropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(lengthProperty());
}
void Test3DObjectProperties::setLength(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Example.Object3D.Test3DObject.Length",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
Test3DObjectProperties::Test3DObjectProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_Length = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Example.Object3D.Test3DObject.Length", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Length](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Length) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Example.Object3D."
                         "Test3DObject.Length\":"
                      << e.what();
          return;
        }
        Q_EMIT this->lengthChanged(valueCasted);
      });
}

}  // namespace object3d_prop
inline namespace object3d_prop {
GeometricPrimitivePropertiesEntry::~GeometricPrimitivePropertiesEntry() {}
GeometricPrimitivePropertiesEntry::GeometricPrimitivePropertiesEntry(
    vx::PropType::Visible, bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Generic.Visible",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
GeometricPrimitivePropertiesEntry::GeometricPrimitivePropertiesEntry(
    vx::PropType::GeometricPrimitive, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive."
          "GeometricPrimitive",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
GeometricPrimitivePropertiesBase::~GeometricPrimitivePropertiesBase() {}
GeometricPrimitivePropertiesCopy::GeometricPrimitivePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
bool GeometricPrimitivePropertiesCopy::visible() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.Generic.Visible"]));
}
bool GeometricPrimitivePropertiesCopy::visibleRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Generic.Visible"]);
}
vx::Node* GeometricPrimitivePropertiesCopy::geometricPrimitive() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive."
                         "GeometricPrimitive"]));
}
QDBusObjectPath GeometricPrimitivePropertiesCopy::geometricPrimitiveRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive."
                     "GeometricPrimitive"]);
}
static const char _prototype_GeometricPrimitive_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  65,  32,  115, 101, 116, 32,  111, 102, 32,  103, 101, 111, 109,
    101, 116, 114, 105, 99,  32,  112, 114, 105, 109, 105, 116, 105, 118, 101,
    115, 32,  115, 104, 111, 119, 110, 32,  105, 110, 32,  116, 104, 101, 32,
    51,  68,  32,  118, 105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  44,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  71,  101, 111, 109, 101, 116, 114, 105, 99,  32,  112, 114, 105,
    109, 105, 116, 105, 118, 101, 34,  44,  32,  34,  73,  99,  111, 110, 34,
    58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  117, 110, 105, 118,
    101, 114, 115, 97,  108, 46,  112, 110, 103, 34,  44,  32,  34,  78,  97,
    109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,
    98,  106, 101, 99,  116, 51,  68,  46,  71,  101, 111, 109, 101, 116, 114,
    105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101, 34,  44,  32,  34,
    78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  79,
    98,  106, 101, 99,  116, 51,  68,  34,  44,  32,  34,  80,  114, 111, 112,
    101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  71,  101,
    110, 101, 114, 105, 99,  46,  86,  105, 115, 105, 98,  108, 101, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  86,  105,
    115, 105, 98,  108, 101, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117,
    108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  116, 114, 117, 101, 44,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  86,  105, 115, 105, 98,  108, 101, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  66,  111, 111,
    108, 101, 97,  110, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  71,  101, 111, 109,
    101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116, 105, 118, 101, 46,
    71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105, 109, 105, 116,
    105, 118, 101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100,
    78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116,
    97,  46,  71,  101, 111, 109, 101, 116, 114, 105, 99,  80,  114, 105, 109,
    105, 116, 105, 118, 101, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  71,  101, 111, 109, 101,
    116, 114, 105, 99,  32,  112, 114, 105, 109, 105, 116, 105, 118, 101, 34,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101,
    34,  125, 125, 44,  32,  34,  84,  114, 111, 118, 101, 67,  108, 97,  115,
    115, 105, 102, 105, 101, 114, 115, 34,  58,  32,  91,  34,  68,  101, 118,
    101, 108, 111, 112, 109, 101, 110, 116, 32,  83,  116, 97,  116, 117, 115,
    32,  58,  58,  32,  53,  32,  45,  32,  80,  114, 111, 100, 117, 99,  116,
    105, 111, 110, 47,  83,  116, 97,  98,  108, 101, 34,  93,  125, 0};
const char* GeometricPrimitiveProperties::_getPrototypeJson() {
  return _prototype_GeometricPrimitive_;
}

GeometricPrimitiveProperties::~GeometricPrimitiveProperties() {}

bool GeometricPrimitiveProperties::visible() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Object3D.Generic.Visible"));
}
bool GeometricPrimitiveProperties::visibleRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Generic.Visible");
}
QSharedPointer<NodeProperty> GeometricPrimitiveProperties::visibleProperty() {
  return GeometricPrimitiveProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Generic.Visible", false);
}
NodePropertyTyped<vx::types::Boolean>
GeometricPrimitiveProperties::visiblePropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(visibleProperty());
}
void GeometricPrimitiveProperties::setVisible(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Generic.Visible",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
vx::Node* GeometricPrimitiveProperties::geometricPrimitive() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive."
          "GeometricPrimitive"));
}
QDBusObjectPath GeometricPrimitiveProperties::geometricPrimitiveRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive.GeometricPrimitive");
}
QSharedPointer<NodeProperty>
GeometricPrimitiveProperties::geometricPrimitiveProperty() {
  return GeometricPrimitiveProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive.GeometricPrimitive",
      false);
}
NodePropertyTyped<vx::types::NodeReference>
GeometricPrimitiveProperties::geometricPrimitivePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(
      geometricPrimitiveProperty());
}
void GeometricPrimitiveProperties::setGeometricPrimitive(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive.GeometricPrimitive",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
GeometricPrimitiveProperties::GeometricPrimitiveProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_Visible = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Generic.Visible", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Visible](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_Visible) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Object3D.Generic.Visible\":"
              << e.what();
          return;
        }
        Q_EMIT this->visibleChanged(valueCasted);
      });
  auto _prop_GeometricPrimitive = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive.GeometricPrimitive",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_GeometricPrimitive](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_GeometricPrimitive) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Object3D.GeometricPrimitive."
                         "GeometricPrimitive\":"
                      << e.what();
          return;
        }
        Q_EMIT this->geometricPrimitiveChanged(valueCasted);
      });
}

}  // namespace object3d_prop
inline namespace object3d_prop {
GridPropertiesEntry::~GridPropertiesEntry() {}
GridPropertiesBase::~GridPropertiesBase() {}
GridPropertiesCopy::GridPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
static const char _prototype_Grid_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  71,  114, 105, 100, 34,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  71,  114, 105, 100, 34,
    44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,  47,  105, 99,
    111, 110, 115, 47,  117, 110, 105, 118, 101, 114, 115, 97,  108, 46,  112,
    110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,
    46,  71,  114, 105, 100, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105,
    110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,
    111, 100, 101, 75,  105, 110, 100, 46,  79,  98,  106, 101, 99,  116, 51,
    68,  34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115,
    34,  58,  32,  123, 125, 44,  32,  34,  84,  114, 111, 118, 101, 67,  108,
    97,  115, 115, 105, 102, 105, 101, 114, 115, 34,  58,  32,  91,  34,  68,
    101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 32,  83,  116, 97,  116,
    117, 115, 32,  58,  58,  32,  52,  32,  45,  32,  66,  101, 116, 97,  34,
    93,  125, 0};
const char* GridProperties::_getPrototypeJson() { return _prototype_Grid_; }

GridProperties::~GridProperties() {}

GridProperties::GridProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
}

}  // namespace object3d_prop
inline namespace object3d_prop {
PlanePropertiesEntry::~PlanePropertiesEntry() {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::ClippingDirection,
                                           QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::Color,
                                           vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Plane.Color",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::Plane,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Plane.Plane",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::ShowVolumeSlice,
                                           bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::SliceTextureResolution,
                                           QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Plane.SliceTextureResolution",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::SliceValueColorMapping,
                                           QList<vx::ColorizerEntry> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Plane.SliceValueColorMapping",
          QVariant::fromValue<QList<std::tuple<
              double, std::tuple<double, double, double, double>, qint32>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint32>>,
                  QList<vx::ColorizerEntry>>::toRaw(value_))) {}
PlanePropertiesEntry::PlanePropertiesEntry(vx::PropType::SliceVolume,
                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
PlanePropertiesBase::~PlanePropertiesBase() {}
PlanePropertiesCopy::PlanePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QString PlanePropertiesCopy::clippingDirection() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection"]));
}
QString PlanePropertiesCopy::clippingDirectionRaw() {
  return vx::Node::parseVariant<QString>((
      *_properties)["de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection"]);
}
vx::Color PlanePropertiesCopy::color() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(
          vx::Node::parseVariant<std::tuple<double, double, double, double>>(
              (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane.Color"]));
}
std::tuple<double, double, double, double> PlanePropertiesCopy::colorRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane.Color"]);
}
vx::Node* PlanePropertiesCopy::plane() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane.Plane"]));
}
QDBusObjectPath PlanePropertiesCopy::planeRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane.Plane"]);
}
bool PlanePropertiesCopy::showVolumeSlice() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice"]));
}
bool PlanePropertiesCopy::showVolumeSliceRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice"]);
}
QString PlanePropertiesCopy::sliceTextureResolution() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane."
                         "SliceTextureResolution"]));
}
QString PlanePropertiesCopy::sliceTextureResolutionRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Object3D.Plane.SliceTextureResolution"]);
}
QList<vx::ColorizerEntry> PlanePropertiesCopy::sliceValueColorMapping() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane."
                         "SliceValueColorMapping"]));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
PlanePropertiesCopy::sliceValueColorMappingRaw() {
  return vx::Node::parseVariant<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Object3D.Plane.SliceValueColorMapping"]);
}
vx::Node* PlanePropertiesCopy::sliceVolume() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume"]));
}
QDBusObjectPath PlanePropertiesCopy::sliceVolumeRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume"]);
}
static const char _prototype_Plane_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  80,  108, 97,  110, 101, 32,  115, 104, 111, 119, 110, 32,  105,
    110, 32,  116, 104, 101, 32,  51,  68,  32,  118, 105, 115, 117, 97,  108,
    105, 122, 101, 114, 34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  80,  108, 97,  110, 101, 34,  44,
    32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,  47,  105, 99,  111,
    110, 115, 47,  117, 110, 105, 118, 101, 114, 115, 97,  108, 46,  112, 110,
    103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,
    80,  108, 97,  110, 101, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105,
    110, 100, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,
    111, 100, 101, 75,  105, 110, 100, 46,  79,  98,  106, 101, 99,  116, 51,
    68,  34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115,
    34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,
    106, 101, 99,  116, 51,  68,  46,  80,  108, 97,  110, 101, 46,  67,  108,
    105, 112, 112, 105, 110, 103, 68,  105, 114, 101, 99,  116, 105, 111, 110,
    34,  58,  32,  123, 34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108,
    117, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,
    98,  106, 101, 99,  116, 51,  68,  46,  80,  108, 97,  110, 101, 46,  67,
    108, 105, 112, 112, 105, 110, 103, 68,  105, 114, 101, 99,  116, 105, 111,
    110, 46,  78,  111, 110, 101, 34,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  67,  108, 105, 112, 112,
    105, 110, 103, 32,  100, 105, 114, 101, 99,  116, 105, 111, 110, 34,  44,
    32,  34,  69,  110, 117, 109, 69,  110, 116, 114, 105, 101, 115, 34,  58,
    32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101,
    99,  116, 51,  68,  46,  80,  108, 97,  110, 101, 46,  67,  108, 105, 112,
    112, 105, 110, 103, 68,  105, 114, 101, 99,  116, 105, 111, 110, 46,  78,
    101, 103, 97,  116, 105, 118, 101, 34,  58,  32,  123, 34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  78,  101, 103,
    97,  116, 105, 118, 101, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105,
    116, 105, 111, 110, 34,  58,  32,  51,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  80,
    108, 97,  110, 101, 46,  67,  108, 105, 112, 112, 105, 110, 103, 68,  105,
    114, 101, 99,  116, 105, 111, 110, 46,  78,  111, 110, 101, 34,  58,  32,
    123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  78,  111, 110, 101, 34,  44,  32,  34,  85,  73,  80,  111, 115,
    105, 116, 105, 111, 110, 34,  58,  32,  49,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,
    80,  108, 97,  110, 101, 46,  67,  108, 105, 112, 112, 105, 110, 103, 68,
    105, 114, 101, 99,  116, 105, 111, 110, 46,  80,  111, 115, 105, 116, 105,
    118, 101, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  80,  111, 115, 105, 116, 105, 118, 101,
    34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,
    58,  32,  50,  125, 125, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  69,  110, 117, 109, 101, 114, 97,  116,
    105, 111, 110, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  80,  108, 97,  110, 101,
    46,  67,  111, 108, 111, 114, 34,  58,  32,  123, 34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  67,  111, 108, 111,
    114, 34,  44,  32,  34,  83,  104, 111, 114, 116, 68,  101, 115, 99,  114,
    105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  84,  104, 101, 32,  99,
    111, 108, 111, 114, 32,  116, 104, 101, 32,  112, 108, 97,  110, 101, 32,
    115, 104, 111, 117, 108, 100, 32,  98,  101, 32,  100, 105, 115, 112, 108,
    97,  121, 101, 100, 32,  119, 105, 116, 104, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  67,  111, 108,
    111, 114, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    79,  98,  106, 101, 99,  116, 51,  68,  46,  80,  108, 97,  110, 101, 46,
    80,  108, 97,  110, 101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119,
    101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101,
    115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 46,  80,  108, 97,  110, 101, 34,  93,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  80,  108, 97,  110, 101, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101,
    82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,
    46,  80,  108, 97,  110, 101, 46,  83,  104, 111, 119, 86,  111, 108, 117,
    109, 101, 83,  108, 105, 99,  101, 34,  58,  32,  123, 34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  104, 111,
    119, 32,  118, 111, 108, 117, 109, 101, 32,  115, 108, 105, 99,  101, 34,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  66,  111, 111, 108, 101, 97,  110, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,
    46,  80,  108, 97,  110, 101, 46,  83,  108, 105, 99,  101, 84,  101, 120,
    116, 117, 114, 101, 82,  101, 115, 111, 108, 117, 116, 105, 111, 110, 34,
    58,  32,  123, 34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,
    106, 101, 99,  116, 51,  68,  46,  80,  108, 97,  110, 101, 46,  83,  108,
    105, 99,  101, 84,  101, 120, 116, 117, 114, 101, 82,  101, 115, 111, 108,
    117, 116, 105, 111, 110, 46,  82,  53,  49,  50,  34,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,
    108, 105, 99,  101, 32,  116, 101, 120, 116, 117, 114, 101, 32,  114, 101,
    115, 111, 108, 117, 116, 105, 111, 110, 34,  44,  32,  34,  69,  110, 117,
    109, 69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,
    80,  108, 97,  110, 101, 46,  83,  108, 105, 99,  101, 84,  101, 120, 116,
    117, 114, 101, 82,  101, 115, 111, 108, 117, 116, 105, 111, 110, 46,  82,
    49,  48,  50,  52,  34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  49,  48,  50,  52,  34,  44,
    32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,
    52,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,
    106, 101, 99,  116, 51,  68,  46,  80,  108, 97,  110, 101, 46,  83,  108,
    105, 99,  101, 84,  101, 120, 116, 117, 114, 101, 82,  101, 115, 111, 108,
    117, 116, 105, 111, 110, 46,  82,  49,  50,  56,  34,  58,  32,  123, 34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    49,  50,  56,  34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105,
    111, 110, 34,  58,  32,  49,  125, 44,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  80,  108, 97,
    110, 101, 46,  83,  108, 105, 99,  101, 84,  101, 120, 116, 117, 114, 101,
    82,  101, 115, 111, 108, 117, 116, 105, 111, 110, 46,  82,  50,  48,  52,
    56,  34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  50,  48,  52,  56,  34,  44,  32,  34,  85,
    73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  53,  125, 44,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,
    116, 51,  68,  46,  80,  108, 97,  110, 101, 46,  83,  108, 105, 99,  101,
    84,  101, 120, 116, 117, 114, 101, 82,  101, 115, 111, 108, 117, 116, 105,
    111, 110, 46,  82,  50,  53,  54,  34,  58,  32,  123, 34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  50,  53,  54,
    34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,
    58,  32,  50,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    79,  98,  106, 101, 99,  116, 51,  68,  46,  80,  108, 97,  110, 101, 46,
    83,  108, 105, 99,  101, 84,  101, 120, 116, 117, 114, 101, 82,  101, 115,
    111, 108, 117, 116, 105, 111, 110, 46,  82,  53,  49,  50,  34,  58,  32,
    123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  53,  49,  50,  34,  44,  32,  34,  85,  73,  80,  111, 115, 105,
    116, 105, 111, 110, 34,  58,  32,  51,  125, 125, 44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  69,  110, 117,
    109, 101, 114, 97,  116, 105, 111, 110, 34,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,
    80,  108, 97,  110, 101, 46,  83,  108, 105, 99,  101, 86,  97,  108, 117,
    101, 67,  111, 108, 111, 114, 77,  97,  112, 112, 105, 110, 103, 34,  58,
    32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  83,  108, 105, 99,  101, 32,  118, 97,  108, 117, 101, 32,
    116, 111, 32,  99,  111, 108, 111, 114, 32,  109, 97,  112, 112, 105, 110,
    103, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,
    121, 112, 101, 46,  86,  97,  108, 117, 101, 67,  111, 108, 111, 114, 77,
    97,  112, 112, 105, 110, 103, 34,  125, 44,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  80,  108,
    97,  110, 101, 46,  83,  108, 105, 99,  101, 86,  111, 108, 117, 109, 101,
    34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100,
    101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  86,
    111, 108, 117, 109, 101, 34,  93,  44,  32,  34,  67,  111, 110, 110, 101,
    99,  116, 105, 111, 110, 80,  114, 105, 111, 114, 105, 116, 121, 34,  58,
    32,  34,  72,  105, 100, 101, 78,  101, 119, 34,  44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  108,
    105, 99,  101, 32,  118, 111, 108, 117, 109, 101, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111,
    100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125, 125, 44,
    32,  34,  84,  114, 111, 118, 101, 67,  108, 97,  115, 115, 105, 102, 105,
    101, 114, 115, 34,  58,  32,  91,  34,  68,  101, 118, 101, 108, 111, 112,
    109, 101, 110, 116, 32,  83,  116, 97,  116, 117, 115, 32,  58,  58,  32,
    53,  32,  45,  32,  80,  114, 111, 100, 117, 99,  116, 105, 111, 110, 47,
    83,  116, 97,  98,  108, 101, 34,  93,  125, 0};
const char* PlaneProperties::_getPrototypeJson() { return _prototype_Plane_; }

PlaneProperties::~PlaneProperties() {}

QString PlaneProperties::clippingDirection() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection"));
}
QString PlaneProperties::clippingDirectionRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection");
}
QSharedPointer<NodeProperty> PlaneProperties::clippingDirectionProperty() {
  return PlaneProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection", false);
}
NodePropertyTyped<vx::types::Enumeration>
PlaneProperties::clippingDirectionPropertyTyped() {
  return NodePropertyTyped<vx::types::Enumeration>(clippingDirectionProperty());
}
void PlaneProperties::setClippingDirection(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
vx::Color PlaneProperties::color() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Object3D.Plane.Color"));
}
std::tuple<double, double, double, double> PlaneProperties::colorRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Object3D.Plane.Color");
}
QSharedPointer<NodeProperty> PlaneProperties::colorProperty() {
  return PlaneProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.Color", false);
}
NodePropertyTyped<vx::types::Color> PlaneProperties::colorPropertyTyped() {
  return NodePropertyTyped<vx::types::Color>(colorProperty());
}
void PlaneProperties::setColor(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.Color",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
vx::Node* PlaneProperties::plane() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Object3D.Plane.Plane"));
}
QDBusObjectPath PlaneProperties::planeRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.Plane");
}
QSharedPointer<NodeProperty> PlaneProperties::planeProperty() {
  return PlaneProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.Plane", false);
}
NodePropertyTyped<vx::types::NodeReference>
PlaneProperties::planePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(planeProperty());
}
void PlaneProperties::setPlane(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.Plane",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
bool PlaneProperties::showVolumeSlice() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice"));
}
bool PlaneProperties::showVolumeSliceRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice");
}
QSharedPointer<NodeProperty> PlaneProperties::showVolumeSliceProperty() {
  return PlaneProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice", false);
}
NodePropertyTyped<vx::types::Boolean>
PlaneProperties::showVolumeSlicePropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(showVolumeSliceProperty());
}
void PlaneProperties::setShowVolumeSlice(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
QString PlaneProperties::sliceTextureResolution() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Object3D.Plane.SliceTextureResolution"));
}
QString PlaneProperties::sliceTextureResolutionRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceTextureResolution");
}
QSharedPointer<NodeProperty> PlaneProperties::sliceTextureResolutionProperty() {
  return PlaneProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceTextureResolution", false);
}
NodePropertyTyped<vx::types::Enumeration>
PlaneProperties::sliceTextureResolutionPropertyTyped() {
  return NodePropertyTyped<vx::types::Enumeration>(
      sliceTextureResolutionProperty());
}
void PlaneProperties::setSliceTextureResolution(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceTextureResolution",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
QList<vx::ColorizerEntry> PlaneProperties::sliceValueColorMapping() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(_node->getNodePropertyTyped<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          "de.uni_stuttgart.Voxie.Object3D.Plane.SliceValueColorMapping"));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
PlaneProperties::sliceValueColorMappingRaw() {
  return _node->getNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceValueColorMapping");
}
QSharedPointer<NodeProperty> PlaneProperties::sliceValueColorMappingProperty() {
  return PlaneProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceValueColorMapping", false);
}
NodePropertyTyped<vx::types::ValueColorMapping>
PlaneProperties::sliceValueColorMappingPropertyTyped() {
  return NodePropertyTyped<vx::types::ValueColorMapping>(
      sliceValueColorMappingProperty());
}
void PlaneProperties::setSliceValueColorMapping(
    QList<vx::ColorizerEntry> value) {
  _node->setNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceValueColorMapping",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint32>>,
          QList<vx::ColorizerEntry>>::toRaw(value));
}
vx::Node* PlaneProperties::sliceVolume() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume"));
}
QDBusObjectPath PlaneProperties::sliceVolumeRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume");
}
QSharedPointer<NodeProperty> PlaneProperties::sliceVolumeProperty() {
  return PlaneProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume", false);
}
NodePropertyTyped<vx::types::NodeReference>
PlaneProperties::sliceVolumePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(sliceVolumeProperty());
}
void PlaneProperties::setSliceVolume(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
PlaneProperties::PlaneProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_ClippingDirection = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ClippingDirection](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ClippingDirection) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Plane.ClippingDirection\":"
              << e.what();
          return;
        }
        Q_EMIT this->clippingDirectionChanged(valueCasted);
      });
  auto _prop_Color = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.Color", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Color](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Color) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Object3D.Plane.Color\":"
              << e.what();
          return;
        }
        Q_EMIT this->colorChanged(valueCasted);
      });
  auto _prop_Plane = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.Plane", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Plane](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Plane) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Object3D.Plane.Plane\":"
              << e.what();
          return;
        }
        Q_EMIT this->planeChanged(valueCasted);
      });
  auto _prop_ShowVolumeSlice = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ShowVolumeSlice](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ShowVolumeSlice) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Plane.ShowVolumeSlice\":"
              << e.what();
          return;
        }
        Q_EMIT this->showVolumeSliceChanged(valueCasted);
      });
  auto _prop_SliceTextureResolution = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceTextureResolution", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_SliceTextureResolution](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_SliceTextureResolution) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Object3D.Plane."
                         "SliceTextureResolution\":"
                      << e.what();
          return;
        }
        Q_EMIT this->sliceTextureResolutionChanged(valueCasted);
      });
  auto _prop_SliceValueColorMapping = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceValueColorMapping", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_SliceValueColorMapping](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_SliceValueColorMapping) return;
        QList<vx::ColorizerEntry> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>,
              QList<vx::ColorizerEntry>>::
              fromRaw(Node::parseVariant<QList<std::tuple<
                          double, std::tuple<double, double, double, double>,
                          qint32>>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Object3D.Plane."
                         "SliceValueColorMapping\":"
                      << e.what();
          return;
        }
        Q_EMIT this->sliceValueColorMappingChanged(valueCasted);
      });
  auto _prop_SliceVolume = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_SliceVolume](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_SliceVolume) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Plane.SliceVolume\":"
              << e.what();
          return;
        }
        Q_EMIT this->sliceVolumeChanged(valueCasted);
      });
}

}  // namespace object3d_prop
inline namespace object3d_prop {
SurfacePropertiesEntry::~SurfacePropertiesEntry() {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::Visible,
                                               bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Generic.Visible",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::BackColor,
                                               vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.BackColor",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::DrawAxisArrows,
                                               bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::DrawBoundingBox,
                                               bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::DrawOrigin,
                                               bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::FaceCulling,
                                               QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::FrontColor,
                                               vx::Color value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  vx::Color>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(
    vx::PropType::HighlightCurrentTriangle, bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.HighlightCurrentTriangle",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::ShadingTechnique,
                                               QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
SurfacePropertiesEntry::SurfacePropertiesEntry(vx::PropType::Surface,
                                               vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Object3D.Surface.Surface",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
SurfacePropertiesBase::~SurfacePropertiesBase() {}
SurfacePropertiesCopy::SurfacePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
bool SurfacePropertiesCopy::visible() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.Generic.Visible"]));
}
bool SurfacePropertiesCopy::visibleRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Generic.Visible"]);
}
vx::Color SurfacePropertiesCopy::backColor() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      vx::Color>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                            double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.BackColor"]));
}
std::tuple<double, double, double, double>
SurfacePropertiesCopy::backColorRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.BackColor"]);
}
bool SurfacePropertiesCopy::drawAxisArrows() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows"]));
}
bool SurfacePropertiesCopy::drawAxisArrowsRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows"]);
}
bool SurfacePropertiesCopy::drawBoundingBox() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox"]));
}
bool SurfacePropertiesCopy::drawBoundingBoxRaw() {
  return vx::Node::parseVariant<bool>((
      *_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox"]);
}
bool SurfacePropertiesCopy::drawOrigin() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>((
          *_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin"]));
}
bool SurfacePropertiesCopy::drawOriginRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin"]);
}
QString SurfacePropertiesCopy::faceCulling() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling"]));
}
QString SurfacePropertiesCopy::faceCullingRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling"]);
}
vx::Color SurfacePropertiesCopy::frontColor() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      vx::Color>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                            double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor"]));
}
std::tuple<double, double, double, double>
SurfacePropertiesCopy::frontColorRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor"]);
}
bool SurfacePropertiesCopy::highlightCurrentTriangle() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface."
                         "HighlightCurrentTriangle"]));
}
bool SurfacePropertiesCopy::highlightCurrentTriangleRaw() {
  return vx::Node::parseVariant<bool>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Object3D.Surface.HighlightCurrentTriangle"]);
}
QString SurfacePropertiesCopy::shadingTechnique() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique"]));
}
QString SurfacePropertiesCopy::shadingTechniqueRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique"]);
}
vx::Node* SurfacePropertiesCopy::surface() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      vx::Node::parseVariant<QDBusObjectPath>(
          (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.Surface"]));
}
QDBusObjectPath SurfacePropertiesCopy::surfaceRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Object3D.Surface.Surface"]);
}
static const char _prototype_Surface_[] = {
    123, 34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,
    32,  34,  83,  117, 114, 102, 97,  99,  101, 32,  115, 104, 111, 119, 110,
    32,  105, 110, 32,  116, 104, 101, 32,  51,  68,  32,  118, 105, 115, 117,
    97,  108, 105, 122, 101, 114, 34,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  117, 114, 102, 97,
    99,  101, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,  34,  58,
    47,  105, 99,  111, 110, 115, 47,  117, 110, 105, 118, 101, 114, 115, 97,
    108, 46,  112, 110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,
    116, 51,  68,  46,  83,  117, 114, 102, 97,  99,  101, 34,  44,  32,  34,
    78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  79,
    98,  106, 101, 99,  116, 51,  68,  34,  44,  32,  34,  80,  114, 111, 112,
    101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  71,  101,
    110, 101, 114, 105, 99,  46,  86,  105, 115, 105, 98,  108, 101, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  86,  105,
    115, 105, 98,  108, 101, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117,
    108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  116, 114, 117, 101, 44,
    32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  86,  105, 115, 105, 98,  108, 101, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  66,  111, 111,
    108, 101, 97,  110, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  83,  117, 114, 102,
    97,  99,  101, 46,  66,  97,  99,  107, 67,  111, 108, 111, 114, 34,  58,
    32,  123, 34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101,
    34,  58,  32,  91,  48,  46,  53,  44,  32,  48,  46,  53,  44,  32,  48,
    46,  53,  44,  32,  49,  46,  48,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  117, 114, 102,
    97,  99,  101, 32,  98,  97,  99,  107, 32,  99,  111, 108, 111, 114, 34,
    44,  32,  34,  83,  104, 111, 114, 116, 68,  101, 115, 99,  114, 105, 112,
    116, 105, 111, 110, 34,  58,  32,  34,  67,  111, 108, 111, 114, 32,  102,
    111, 114, 32,  98,  97,  99,  107, 32,  115, 105, 100, 101, 32,  111, 102,
    32,  115, 117, 114, 102, 97,  99,  101, 32,  40,  111, 110, 108, 121, 32,
    117, 115, 101, 100, 32,  105, 102, 32,  116, 104, 101, 32,  115, 117, 114,
    102, 97,  99,  101, 32,  100, 111, 101, 115, 32,  110, 111, 116, 32,  105,
    110, 99,  108, 117, 100, 101, 32,  99,  111, 108, 111, 114, 32,  105, 110,
    102, 111, 114, 109, 97,  116, 105, 111, 110, 41,  34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  67,  111,
    108, 111, 114, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  83,  117, 114, 102, 97,
    99,  101, 46,  68,  114, 97,  119, 65,  120, 105, 115, 65,  114, 114, 111,
    119, 115, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,
    68,  46,  68,  114, 97,  119, 65,  120, 105, 115, 65,  114, 114, 111, 119,
    115, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 86,  97,
    108, 117, 101, 34,  58,  32,  102, 97,  108, 115, 101, 44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  68,
    114, 97,  119, 32,  97,  120, 105, 115, 32,  97,  114, 114, 111, 119, 115,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  66,  111, 111, 108, 101, 97,  110, 34,  125, 44,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,
    68,  46,  83,  117, 114, 102, 97,  99,  101, 46,  68,  114, 97,  119, 66,
    111, 117, 110, 100, 105, 110, 103, 66,  111, 120, 34,  58,  32,  123, 34,
    67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,
    109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  68,  114, 97,  119, 66,
    111, 117, 110, 100, 105, 110, 103, 66,  111, 120, 34,  93,  44,  32,  34,
    68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,
    116, 114, 117, 101, 44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  68,  114, 97,  119, 32,  98,  111, 117,
    110, 100, 105, 110, 103, 32,  98,  111, 120, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  66,  111, 111,
    108, 101, 97,  110, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  83,  117, 114, 102,
    97,  99,  101, 46,  68,  114, 97,  119, 79,  114, 105, 103, 105, 110, 34,
    58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105,
    116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  68,
    114, 97,  119, 79,  114, 105, 103, 105, 110, 34,  93,  44,  32,  34,  68,
    101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  116,
    114, 117, 101, 44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  68,  114, 97,  119, 32,  111, 114, 105, 103,
    105, 110, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    84,  121, 112, 101, 46,  66,  111, 111, 108, 101, 97,  110, 34,  125, 44,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,
    116, 51,  68,  46,  83,  117, 114, 102, 97,  99,  101, 46,  70,  97,  99,
    101, 67,  117, 108, 108, 105, 110, 103, 34,  58,  32,  123, 34,  68,  101,
    102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,
    46,  83,  117, 114, 102, 97,  99,  101, 46,  70,  97,  99,  101, 67,  117,
    108, 108, 105, 110, 103, 46,  78,  111, 110, 101, 34,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  70,
    97,  99,  101, 32,  99,  117, 108, 108, 105, 110, 103, 34,  44,  32,  34,
    69,  110, 117, 109, 69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  123,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116,
    51,  68,  46,  83,  117, 114, 102, 97,  99,  101, 46,  70,  97,  99,  101,
    67,  117, 108, 108, 105, 110, 103, 46,  78,  111, 110, 101, 34,  58,  32,
    123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,
    32,  34,  78,  111, 110, 101, 32,  40,  115, 104, 111, 119, 32,  98,  111,
    116, 104, 32,  102, 97,  99,  101, 115, 41,  34,  44,  32,  34,  85,  73,
    80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  49,  125, 44,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116,
    51,  68,  46,  83,  117, 114, 102, 97,  99,  101, 46,  70,  97,  99,  101,
    67,  117, 108, 108, 105, 110, 103, 46,  83,  104, 111, 119, 66,  97,  99,
    107, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  83,  104, 111, 119, 32,  111, 110, 108, 121,
    32,  98,  97,  99,  107, 32,  102, 97,  99,  101, 115, 34,  44,  32,  34,
    85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,  58,  32,  51,  125,
    44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106, 101,
    99,  116, 51,  68,  46,  83,  117, 114, 102, 97,  99,  101, 46,  70,  97,
    99,  101, 67,  117, 108, 108, 105, 110, 103, 46,  83,  104, 111, 119, 70,
    114, 111, 110, 116, 34,  58,  32,  123, 34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  104, 111, 119, 32,  111,
    110, 108, 121, 32,  102, 114, 111, 110, 116, 32,  102, 97,  99,  101, 115,
    34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110, 34,
    58,  32,  50,  125, 125, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  69,  110, 117, 109, 101, 114, 97,  116,
    105, 111, 110, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  83,  117, 114, 102, 97,
    99,  101, 46,  70,  114, 111, 110, 116, 67,  111, 108, 111, 114, 34,  58,
    32,  123, 34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101,
    34,  58,  32,  91,  48,  46,  55,  44,  32,  48,  46,  55,  44,  32,  48,
    46,  55,  44,  32,  49,  46,  48,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  117, 114, 102,
    97,  99,  101, 32,  99,  111, 108, 111, 114, 34,  44,  32,  34,  83,  104,
    111, 114, 116, 68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,
    58,  32,  34,  67,  111, 108, 111, 114, 32,  102, 111, 114, 32,  102, 114,
    111, 110, 116, 32,  115, 105, 100, 101, 32,  111, 102, 32,  115, 117, 114,
    102, 97,  99,  101, 32,  40,  111, 110, 108, 121, 32,  117, 115, 101, 100,
    32,  105, 102, 32,  116, 104, 101, 32,  115, 117, 114, 102, 97,  99,  101,
    32,  100, 111, 101, 115, 32,  110, 111, 116, 32,  105, 110, 99,  108, 117,
    100, 101, 32,  99,  111, 108, 111, 114, 32,  105, 110, 102, 111, 114, 109,
    97,  116, 105, 111, 110, 41,  34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  67,  111, 108, 111, 114, 34,
    125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  98,  106,
    101, 99,  116, 51,  68,  46,  83,  117, 114, 102, 97,  99,  101, 46,  72,
    105, 103, 104, 108, 105, 103, 104, 116, 67,  117, 114, 114, 101, 110, 116,
    84,  114, 105, 97,  110, 103, 108, 101, 34,  58,  32,  123, 34,  67,  111,
    109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101,
    115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  79,
    98,  106, 101, 99,  116, 51,  68,  46,  72,  105, 103, 104, 108, 105, 103,
    104, 116, 67,  117, 114, 114, 101, 110, 116, 84,  114, 105, 97,  110, 103,
    108, 101, 34,  93,  44,  32,  34,  68,  101, 102, 97,  117, 108, 116, 86,
    97,  108, 117, 101, 34,  58,  32,  102, 97,  108, 115, 101, 44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    72,  105, 103, 104, 108, 105, 103, 104, 116, 32,  99,  117, 114, 114, 101,
    110, 116, 32,  116, 114, 105, 97,  110, 103, 108, 101, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  66,
    111, 111, 108, 101, 97,  110, 34,  125, 44,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,  83,  117,
    114, 102, 97,  99,  101, 46,  83,  104, 97,  100, 105, 110, 103, 84,  101,
    99,  104, 110, 105, 113, 117, 101, 34,  58,  32,  123, 34,  68,  101, 102,
    97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  83,  104, 97,  100, 105, 110, 103, 84,  101,
    99,  104, 110, 105, 113, 117, 101, 46,  70,  108, 97,  116, 34,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  83,  104, 97,  100, 105, 110, 103, 32,  116, 101, 99,  104, 110, 105,
    113, 117, 101, 34,  44,  32,  34,  69,  110, 117, 109, 69,  110, 116, 114,
    105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  83,  104, 97,  100, 105, 110, 103, 84,  101, 99,  104, 110, 105, 113,
    117, 101, 46,  70,  108, 97,  116, 34,  58,  32,  123, 34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  70,  108, 97,
    116, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105, 116, 105, 111, 110,
    34,  58,  32,  49,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  83,  104, 97,  100, 105, 110, 103, 84,  101, 99,  104, 110, 105, 113,
    117, 101, 46,  83,  109, 111, 111, 116, 104, 34,  58,  32,  123, 34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,
    109, 111, 111, 116, 104, 34,  44,  32,  34,  85,  73,  80,  111, 115, 105,
    116, 105, 111, 110, 34,  58,  32,  50,  125, 125, 44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  69,  110, 117,
    109, 101, 114, 97,  116, 105, 111, 110, 34,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  79,  98,  106, 101, 99,  116, 51,  68,  46,
    83,  117, 114, 102, 97,  99,  101, 46,  83,  117, 114, 102, 97,  99,  101,
    34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100,
    101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  83,
    117, 114, 102, 97,  99,  101, 34,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  83,  117, 114, 102,
    97,  99,  101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116,
    121, 84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114,
    101, 110, 99,  101, 34,  125, 125, 44,  32,  34,  84,  114, 111, 118, 101,
    67,  108, 97,  115, 115, 105, 102, 105, 101, 114, 115, 34,  58,  32,  91,
    34,  68,  101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 32,  83,  116,
    97,  116, 117, 115, 32,  58,  58,  32,  53,  32,  45,  32,  80,  114, 111,
    100, 117, 99,  116, 105, 111, 110, 47,  83,  116, 97,  98,  108, 101, 34,
    93,  125, 0};
const char* SurfaceProperties::_getPrototypeJson() {
  return _prototype_Surface_;
}

SurfaceProperties::~SurfaceProperties() {}

bool SurfaceProperties::visible() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Object3D.Generic.Visible"));
}
bool SurfaceProperties::visibleRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Generic.Visible");
}
QSharedPointer<NodeProperty> SurfaceProperties::visibleProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Generic.Visible", false);
}
NodePropertyTyped<vx::types::Boolean>
SurfaceProperties::visiblePropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(visibleProperty());
}
void SurfaceProperties::setVisible(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Generic.Visible",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
vx::Color SurfaceProperties::backColor() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.BackColor"));
}
std::tuple<double, double, double, double> SurfaceProperties::backColorRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.BackColor");
}
QSharedPointer<NodeProperty> SurfaceProperties::backColorProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.BackColor", false);
}
NodePropertyTyped<vx::types::Color>
SurfaceProperties::backColorPropertyTyped() {
  return NodePropertyTyped<vx::types::Color>(backColorProperty());
}
void SurfaceProperties::setBackColor(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.BackColor",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
bool SurfaceProperties::drawAxisArrows() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows"));
}
bool SurfaceProperties::drawAxisArrowsRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows");
}
QSharedPointer<NodeProperty> SurfaceProperties::drawAxisArrowsProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows", false);
}
NodePropertyTyped<vx::types::Boolean>
SurfaceProperties::drawAxisArrowsPropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(drawAxisArrowsProperty());
}
void SurfaceProperties::setDrawAxisArrows(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
bool SurfaceProperties::drawBoundingBox() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox"));
}
bool SurfaceProperties::drawBoundingBoxRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox");
}
QSharedPointer<NodeProperty> SurfaceProperties::drawBoundingBoxProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox", false);
}
NodePropertyTyped<vx::types::Boolean>
SurfaceProperties::drawBoundingBoxPropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(drawBoundingBoxProperty());
}
void SurfaceProperties::setDrawBoundingBox(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
bool SurfaceProperties::drawOrigin() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin"));
}
bool SurfaceProperties::drawOriginRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin");
}
QSharedPointer<NodeProperty> SurfaceProperties::drawOriginProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin", false);
}
NodePropertyTyped<vx::types::Boolean>
SurfaceProperties::drawOriginPropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(drawOriginProperty());
}
void SurfaceProperties::setDrawOrigin(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
QString SurfaceProperties::faceCulling() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling"));
}
QString SurfaceProperties::faceCullingRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling");
}
QSharedPointer<NodeProperty> SurfaceProperties::faceCullingProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling", false);
}
NodePropertyTyped<vx::types::Enumeration>
SurfaceProperties::faceCullingPropertyTyped() {
  return NodePropertyTyped<vx::types::Enumeration>(faceCullingProperty());
}
void SurfaceProperties::setFaceCulling(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
vx::Color SurfaceProperties::frontColor() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     vx::Color>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor"));
}
std::tuple<double, double, double, double> SurfaceProperties::frontColorRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor");
}
QSharedPointer<NodeProperty> SurfaceProperties::frontColorProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor", false);
}
NodePropertyTyped<vx::types::Color>
SurfaceProperties::frontColorPropertyTyped() {
  return NodePropertyTyped<vx::types::Color>(frontColorProperty());
}
void SurfaceProperties::setFrontColor(vx::Color value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  vx::Color>::toRaw(value));
}
bool SurfaceProperties::highlightCurrentTriangle() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.HighlightCurrentTriangle"));
}
bool SurfaceProperties::highlightCurrentTriangleRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.HighlightCurrentTriangle");
}
QSharedPointer<NodeProperty>
SurfaceProperties::highlightCurrentTriangleProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.HighlightCurrentTriangle",
      false);
}
NodePropertyTyped<vx::types::Boolean>
SurfaceProperties::highlightCurrentTrianglePropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(
      highlightCurrentTriangleProperty());
}
void SurfaceProperties::setHighlightCurrentTriangle(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.HighlightCurrentTriangle",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
QString SurfaceProperties::shadingTechnique() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique"));
}
QString SurfaceProperties::shadingTechniqueRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique");
}
QSharedPointer<NodeProperty> SurfaceProperties::shadingTechniqueProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique", false);
}
NodePropertyTyped<vx::types::Enumeration>
SurfaceProperties::shadingTechniquePropertyTyped() {
  return NodePropertyTyped<vx::types::Enumeration>(shadingTechniqueProperty());
}
void SurfaceProperties::setShadingTechnique(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
vx::Node* SurfaceProperties::surface() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Object3D.Surface.Surface"));
}
QDBusObjectPath SurfaceProperties::surfaceRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.Surface");
}
QSharedPointer<NodeProperty> SurfaceProperties::surfaceProperty() {
  return SurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.Surface", false);
}
NodePropertyTyped<vx::types::NodeReference>
SurfaceProperties::surfacePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(surfaceProperty());
}
void SurfaceProperties::setSurface(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Object3D.Surface.Surface",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
SurfaceProperties::SurfaceProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_Visible = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Generic.Visible", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Visible](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_Visible) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Object3D.Generic.Visible\":"
              << e.what();
          return;
        }
        Q_EMIT this->visibleChanged(valueCasted);
      });
  auto _prop_BackColor = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.BackColor", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_BackColor](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_BackColor) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Surface.BackColor\":"
              << e.what();
          return;
        }
        Q_EMIT this->backColorChanged(valueCasted);
      });
  auto _prop_DrawAxisArrows = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_DrawAxisArrows](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_DrawAxisArrows) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Surface.DrawAxisArrows\":"
              << e.what();
          return;
        }
        Q_EMIT this->drawAxisArrowsChanged(valueCasted);
      });
  auto _prop_DrawBoundingBox = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_DrawBoundingBox](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_DrawBoundingBox) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Surface.DrawBoundingBox\":"
              << e.what();
          return;
        }
        Q_EMIT this->drawBoundingBoxChanged(valueCasted);
      });
  auto _prop_DrawOrigin = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_DrawOrigin](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_DrawOrigin) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Surface.DrawOrigin\":"
              << e.what();
          return;
        }
        Q_EMIT this->drawOriginChanged(valueCasted);
      });
  auto _prop_FaceCulling = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_FaceCulling](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_FaceCulling) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Surface.FaceCulling\":"
              << e.what();
          return;
        }
        Q_EMIT this->faceCullingChanged(valueCasted);
      });
  auto _prop_FrontColor = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_FrontColor](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_FrontColor) return;
        vx::Color valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, vx::Color>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Surface.FrontColor\":"
              << e.what();
          return;
        }
        Q_EMIT this->frontColorChanged(valueCasted);
      });
  auto _prop_HighlightCurrentTriangle = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.HighlightCurrentTriangle",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_HighlightCurrentTriangle](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_HighlightCurrentTriangle) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Object3D.Surface."
                         "HighlightCurrentTriangle\":"
                      << e.what();
          return;
        }
        Q_EMIT this->highlightCurrentTriangleChanged(valueCasted);
      });
  auto _prop_ShadingTechnique = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ShadingTechnique](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ShadingTechnique) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Object3D.Surface.ShadingTechnique\":"
              << e.what();
          return;
        }
        Q_EMIT this->shadingTechniqueChanged(valueCasted);
      });
  auto _prop_Surface = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Object3D.Surface.Surface", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Surface](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_Surface) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property \"de.uni_stuttgart.Voxie.Object3D.Surface.Surface\":"
              << e.what();
          return;
        }
        Q_EMIT this->surfaceChanged(valueCasted);
      });
}

}  // namespace object3d_prop
inline namespace visualizer_prop {
View3DPropertiesEntry::~View3DPropertiesEntry() {}
View3DPropertiesEntry::View3DPropertiesEntry(vx::PropType::FieldOfView,
                                             double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.FieldOfView",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
View3DPropertiesEntry::View3DPropertiesEntry(vx::PropType::LookAt,
                                             QVector3D value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt",
          QVariant::fromValue<std::tuple<double, double, double>>(
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::toRaw(value_))) {}
View3DPropertiesEntry::View3DPropertiesEntry(vx::PropType::Orientation,
                                             QQuaternion value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.Orientation",
          QVariant::fromValue<std::tuple<double, double, double, double>>(
              vx::PropertyValueConvertRaw<
                  std::tuple<double, double, double, double>,
                  QQuaternion>::toRaw(value_))) {}
View3DPropertiesEntry::View3DPropertiesEntry(vx::PropType::ViewSizeUnzoomed,
                                             double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ViewSizeUnzoomed",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
View3DPropertiesEntry::View3DPropertiesEntry(vx::PropType::ZoomLog,
                                             double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
View3DPropertiesEntry::View3DPropertiesEntry(vx::PropType::Objects,
                                             QList<vx::Node*> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Objects",
          QVariant::fromValue<QList<QDBusObjectPath>>(
              vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                          QList<vx::Node*>>::toRaw(value_))) {}
View3DPropertiesEntry::View3DPropertiesEntry(vx::PropType::ShowViewCenter,
                                             bool value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter",
          QVariant::fromValue<bool>(
              vx::PropertyValueConvertRaw<bool, bool>::toRaw(value_))) {}
View3DPropertiesBase::~View3DPropertiesBase() {}
View3DPropertiesCopy::View3DPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
double View3DPropertiesCopy::fieldOfView() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.FieldOfView"]));
}
double View3DPropertiesCopy::fieldOfViewRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.FieldOfView"]);
}
QVector3D View3DPropertiesCopy::lookAt() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double>,
      QVector3D>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                            double>>((
      *_properties)["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt"]));
}
std::tuple<double, double, double> View3DPropertiesCopy::lookAtRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt"]);
}
QQuaternion View3DPropertiesCopy::orientation() {
  return vx::PropertyValueConvertRaw<
      std::tuple<double, double, double, double>,
      QQuaternion>::fromRaw(vx::Node::parseVariant<std::tuple<double, double,
                                                              double, double>>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.Orientation"]));
}
std::tuple<double, double, double, double>
View3DPropertiesCopy::orientationRaw() {
  return vx::Node::parseVariant<std::tuple<double, double, double, double>>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.Orientation"]);
}
double View3DPropertiesCopy::viewSizeUnzoomed() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera."
                         "ViewSizeUnzoomed"]));
}
double View3DPropertiesCopy::viewSizeUnzoomedRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ViewSizeUnzoomed"]);
}
double View3DPropertiesCopy::zoomLog() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog"]));
}
double View3DPropertiesCopy::zoomLogRaw() {
  return vx::Node::parseVariant<double>((
      *_properties)["de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog"]);
}
QList<vx::Node*> View3DPropertiesCopy::objects() {
  return vx::PropertyValueConvertRaw<QList<QDBusObjectPath>, QList<vx::Node*>>::
      fromRaw(vx::Node::parseVariant<QList<QDBusObjectPath>>(
          (*_properties)["de.uni_stuttgart.Voxie.Visualizer.View3D.Objects"]));
}
QList<QDBusObjectPath> View3DPropertiesCopy::objectsRaw() {
  return vx::Node::parseVariant<QList<QDBusObjectPath>>(
      (*_properties)["de.uni_stuttgart.Voxie.Visualizer.View3D.Objects"]);
}
bool View3DPropertiesCopy::showViewCenter() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      vx::Node::parseVariant<bool>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter"]));
}
bool View3DPropertiesCopy::showViewCenterRaw() {
  return vx::Node::parseVariant<bool>((
      *_properties)["de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter"]);
}
static const char _prototype_View3D_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 51,  68,
    34,  93,  44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111,
    110, 34,  58,  32,  34,  68,  105, 115, 112, 108, 97,  121, 32,  115, 117,
    114, 102, 97,  99,  101, 115, 32,  101, 116, 99,  46,  32,  105, 110, 32,
    97,  32,  51,  68,  32,  118, 105, 101, 119, 34,  44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  51,  68,
    32,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  44,  32,  34,
    78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  105, 101,
    119, 51,  68,  34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100,
    101, 75,  105, 110, 100, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115,
    34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  105, 101, 119, 51,  68,
    46,  67,  97,  109, 101, 114, 97,  46,  70,  105, 101, 108, 100, 79,  102,
    86,  105, 101, 119, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116,
    105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,
    91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 51,  68,  46,  67,  97,  109, 101, 114, 97,  46,
    70,  105, 101, 108, 100, 79,  102, 86,  105, 101, 119, 34,  93,  44,  32,
    34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,
    32,  48,  46,  54,  57,  56,  49,  51,  49,  55,  48,  48,  55,  57,  55,
    55,  51,  49,  56,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  70,  105, 101, 108, 100, 32,  111, 102,
    32,  118, 105, 101, 119, 34,  44,  32,  34,  77,  97,  120, 105, 109, 117,
    109, 86,  97,  108, 117, 101, 34,  58,  32,  51,  46,  49,  52,  49,  53,
    57,  50,  54,  53,  51,  53,  56,  57,  55,  57,  51,  44,  32,  34,  77,
    105, 110, 105, 109, 117, 109, 86,  97,  108, 117, 101, 34,  58,  32,  48,
    46,  48,  44,  32,  34,  83,  104, 111, 114, 116, 68,  101, 115, 99,  114,
    105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  84,  104, 101, 32,  102,
    105, 101, 108, 100, 32,  111, 102, 32,  118, 105, 101, 119, 32,  105, 110,
    32,  114, 97,  100, 105, 97,  110, 115, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108, 111, 97,
    116, 34,  44,  32,  34,  85,  110, 105, 116, 34,  58,  32,  91,  91,  34,
    114, 97,  100, 34,  44,  32,  49,  93,  93,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  86,  105, 101, 119, 51,  68,  46,  67,  97,  109, 101, 114, 97,
    46,  76,  111, 111, 107, 65,  116, 34,  58,  32,  123, 34,  67,  111, 109,
    112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115,
    34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105,
    115, 117, 97,  108, 105, 122, 101, 114, 51,  68,  46,  67,  97,  109, 101,
    114, 97,  46,  76,  111, 111, 107, 65,  116, 34,  93,  44,  32,  34,  68,
    101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  91,
    48,  44,  32,  48,  44,  32,  48,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  76,  111, 111, 107,
    32,  97,  116, 34,  44,  32,  34,  83,  104, 111, 114, 116, 68,  101, 115,
    99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  84,  104, 101,
    32,  112, 111, 115, 105, 116, 105, 111, 110, 32,  116, 104, 101, 32,  99,
    97,  109, 101, 114, 97,  32,  105, 115, 32,  108, 111, 111, 107, 105, 110,
    103, 32,  97,  116, 32,  40,  116, 104, 101, 32,  99,  101, 110, 116, 101,
    114, 32,  112, 111, 105, 110, 116, 41,  46,  32,  82,  111, 116, 97,  116,
    105, 111, 110, 115, 32,  111, 102, 32,  116, 104, 101, 32,  99,  97,  109,
    101, 114, 97,  32,  119, 105, 108, 108, 32,  98,  101, 32,  97,  114, 111,
    117, 110, 100, 32,  116, 104, 105, 115, 32,  112, 111, 105, 110, 116, 46,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  80,  111, 115, 105, 116, 105, 111, 110, 51,  68,  34,  125,
    44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117,
    97,  108, 105, 122, 101, 114, 46,  86,  105, 101, 119, 51,  68,  46,  67,
    97,  109, 101, 114, 97,  46,  79,  114, 105, 101, 110, 116, 97,  116, 105,
    111, 110, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,
    105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105,
    122, 101, 114, 51,  68,  46,  67,  97,  109, 101, 114, 97,  46,  79,  114,
    105, 101, 110, 116, 97,  116, 105, 111, 110, 34,  93,  44,  32,  34,  68,
    101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  91,
    49,  44,  32,  48,  44,  32,  48,  44,  32,  48,  93,  44,  32,  34,  68,
    105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  79,
    114, 105, 101, 110, 116, 97,  116, 105, 111, 110, 34,  44,  32,  34,  83,
    104, 111, 114, 116, 68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110,
    34,  58,  32,  34,  84,  104, 101, 32,  111, 114, 105, 101, 110, 116, 97,
    116, 105, 111, 110, 32,  111, 102, 32,  116, 104, 101, 32,  99,  97,  109,
    101, 114, 97,  34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116,
    121, 84,  121, 112, 101, 46,  79,  114, 105, 101, 110, 116, 97,  116, 105,
    111, 110, 51,  68,  34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  105,
    101, 119, 51,  68,  46,  67,  97,  109, 101, 114, 97,  46,  86,  105, 101,
    119, 83,  105, 122, 101, 85,  110, 122, 111, 111, 109, 101, 100, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 51,
    68,  46,  67,  97,  109, 101, 114, 97,  46,  86,  105, 101, 119, 83,  105,
    122, 101, 85,  110, 122, 111, 111, 109, 101, 100, 34,  93,  44,  32,  34,
    68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,
    48,  46,  50,  53,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  86,  105, 101, 119, 32,  115, 105, 122,
    101, 32,  40,  117, 110, 122, 111, 111, 109, 101, 100, 41,  34,  44,  32,
    34,  77,  105, 110, 105, 109, 117, 109, 86,  97,  108, 117, 101, 34,  58,
    32,  48,  46,  48,  44,  32,  34,  83,  104, 111, 114, 116, 68,  101, 115,
    99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  83,  105, 122,
    101, 32,  111, 102, 32,  114, 101, 103, 105, 111, 110, 32,  40,  105, 110,
    32,  121, 32,  100, 105, 114, 101, 99,  116, 105, 111, 110, 41,  32,  119,
    104, 105, 99,  104, 32,  99,  97,  110, 32,  98,  101, 32,  115, 101, 101,
    110, 32,  97,  116, 32,  116, 104, 101, 32,  99,  101, 110, 116, 101, 114,
    32,  112, 111, 105, 110, 116, 32,  112, 108, 97,  110, 101, 32,  111, 110,
    32,  49,  48,  48,  37,  32,  122, 111, 111, 109, 34,  44,  32,  34,  84,
    121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  70,  108,
    111, 97,  116, 34,  44,  32,  34,  85,  110, 105, 116, 34,  58,  32,  91,
    91,  34,  109, 34,  44,  32,  49,  93,  93,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101,
    114, 46,  86,  105, 101, 119, 51,  68,  46,  67,  97,  109, 101, 114, 97,
    46,  90,  111, 111, 109, 76,  111, 103, 34,  58,  32,  123, 34,  67,  111,
    109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101,
    115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 51,  68,  46,  67,  97,  109,
    101, 114, 97,  46,  90,  111, 111, 109, 76,  111, 103, 34,  93,  44,  32,
    34,  68,  101, 102, 97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,
    32,  48,  46,  48,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  90,  111, 111, 109, 32,  40,  108, 111,
    103, 41,  34,  44,  32,  34,  83,  104, 111, 114, 116, 68,  101, 115, 99,
    114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  84,  104, 101, 32,
    110, 97,  116, 117, 114, 97,  108, 32,  108, 111, 103, 97,  114, 105, 116,
    104, 109, 32,  111, 102, 32,  116, 104, 101, 32,  122, 111, 111, 109, 34,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  70,  108, 111, 97,  116, 34,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  86,  105, 101, 119, 51,  68,  46,  79,  98,  106, 101, 99,  116, 115,
    34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100,
    101, 75,  105, 110, 100, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  79,  98,
    106, 101, 99,  116, 51,  68,  34,  93,  44,  32,  34,  67,  111, 109, 112,
    97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115,
    117, 97,  108, 105, 122, 101, 114, 51,  68,  46,  79,  98,  106, 101, 99,
    116, 115, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  51,  68,  32,  79,  98,  106, 101, 99,
    116, 115, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101,
    110, 99,  101, 76,  105, 115, 116, 34,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114,
    46,  86,  105, 101, 119, 51,  68,  46,  83,  104, 111, 119, 86,  105, 101,
    119, 67,  101, 110, 116, 101, 114, 34,  58,  32,  123, 34,  68,  101, 102,
    97,  117, 108, 116, 86,  97,  108, 117, 101, 34,  58,  32,  116, 114, 117,
    101, 44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101,
    34,  58,  32,  34,  83,  104, 111, 119, 32,  118, 105, 101, 119, 32,  99,
    101, 110, 116, 101, 114, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101,
    114, 116, 121, 84,  121, 112, 101, 46,  66,  111, 111, 108, 101, 97,  110,
    34,  125, 125, 44,  32,  34,  84,  114, 111, 118, 101, 67,  108, 97,  115,
    115, 105, 102, 105, 101, 114, 115, 34,  58,  32,  91,  34,  68,  101, 118,
    101, 108, 111, 112, 109, 101, 110, 116, 32,  83,  116, 97,  116, 117, 115,
    32,  58,  58,  32,  53,  32,  45,  32,  80,  114, 111, 100, 117, 99,  116,
    105, 111, 110, 47,  83,  116, 97,  98,  108, 101, 34,  93,  44,  32,  34,
    85,  73,  34,  58,  32,  123, 34,  83,  105, 100, 101, 80,  97,  110, 101,
    108, 83,  101, 99,  116, 105, 111, 110, 115, 34,  58,  32,  91,  123, 34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    82,  101, 110, 100, 101, 114, 32,  83,  101, 116, 116, 105, 110, 103, 115,
    34,  44,  32,  34,  69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  91,
    123, 34,  78,  97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  86,
    105, 101, 119, 51,  68,  46,  67,  111, 110, 116, 114, 111, 108, 51,  68,
    83,  101, 116, 116, 105, 110, 103, 115, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  67,  117, 115, 116, 111, 109, 34,  125, 93,  44,
    32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  67,  111, 110, 116, 114,
    111, 108, 51,  68,  83,  101, 116, 116, 105, 110, 103, 115, 83,  101, 99,
    116, 105, 111, 110, 34,  125, 44,  32,  123, 34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  67,  97,  109, 101, 114,
    97,  32,  80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  44,  32,
    34,  69,  110, 116, 114, 105, 101, 115, 34,  58,  32,  91,  123, 34,  76,
    97,  98,  101, 108, 83,  116, 121, 108, 101, 34,  58,  32,  34,  69,  120,
    116, 114, 97,  76,  105, 110, 101, 34,  44,  32,  34,  80,  114, 111, 112,
    101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  105, 101,
    119, 51,  68,  46,  67,  97,  109, 101, 114, 97,  46,  76,  111, 111, 107,
    65,  116, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  80,
    114, 111, 112, 101, 114, 116, 121, 34,  125, 44,  32,  123, 34,  76,  97,
    98,  101, 108, 83,  116, 121, 108, 101, 34,  58,  32,  34,  69,  120, 116,
    114, 97,  76,  105, 110, 101, 34,  44,  32,  34,  80,  114, 111, 112, 101,
    114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  105, 101, 119,
    51,  68,  46,  67,  97,  109, 101, 114, 97,  46,  79,  114, 105, 101, 110,
    116, 97,  116, 105, 111, 110, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 44,  32,
    123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  86,  105, 101, 119, 51,  68,  46,  67,  97,  109, 101, 114,
    97,  46,  90,  111, 111, 109, 76,  111, 103, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101, 114, 116, 121, 34,
    125, 44,  32,  123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  86,  105, 101, 119, 51,  68,  46,  67,  97,
    109, 101, 114, 97,  46,  86,  105, 101, 119, 83,  105, 122, 101, 85,  110,
    122, 111, 111, 109, 101, 100, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  125, 44,  32,
    123, 34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,  108, 105, 122,
    101, 114, 46,  86,  105, 101, 119, 51,  68,  46,  67,  97,  109, 101, 114,
    97,  46,  70,  105, 101, 108, 100, 79,  102, 86,  105, 101, 119, 34,  44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  80,  114, 111, 112, 101,
    114, 116, 121, 34,  125, 93,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  67,  97,  109, 101, 114, 97,  83,  101, 99,  116, 105, 111, 110,
    34,  125, 44,  32,  123, 34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  80,  108, 97,  110, 101, 32,  80,  114, 111,
    112, 101, 114, 116, 105, 101, 115, 34,  44,  32,  34,  69,  110, 116, 114,
    105, 101, 115, 34,  58,  32,  91,  123, 34,  78,  97,  109, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  86,  105, 115, 117, 97,
    108, 105, 122, 101, 114, 46,  86,  105, 101, 119, 51,  68,  46,  80,  108,
    97,  110, 101, 83,  101, 116, 116, 105, 110, 103, 115, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  67,  117, 115, 116, 111, 109, 34,
    125, 93,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,  80,  108,
    97,  110, 101, 83,  101, 116, 116, 105, 110, 103, 115, 34,  125, 93,  125,
    125, 0};
const char* View3DProperties::_getPrototypeJson() { return _prototype_View3D_; }

View3DProperties::~View3DProperties() {}

double View3DProperties::fieldOfView() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.FieldOfView"));
}
double View3DProperties::fieldOfViewRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.FieldOfView");
}
QSharedPointer<NodeProperty> View3DProperties::fieldOfViewProperty() {
  return View3DProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.FieldOfView", false);
}
NodePropertyTyped<vx::types::Float>
View3DProperties::fieldOfViewPropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(fieldOfViewProperty());
}
void View3DProperties::setFieldOfView(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.FieldOfView",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
QVector3D View3DProperties::lookAt() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                     QVector3D>::
      fromRaw(_node->getNodePropertyTyped<std::tuple<double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt"));
}
std::tuple<double, double, double> View3DProperties::lookAtRaw() {
  return _node->getNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt");
}
QSharedPointer<NodeProperty> View3DProperties::lookAtProperty() {
  return View3DProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt", false);
}
NodePropertyTyped<vx::types::Position3D>
View3DProperties::lookAtPropertyTyped() {
  return NodePropertyTyped<vx::types::Position3D>(lookAtProperty());
}
void View3DProperties::setLookAt(QVector3D value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                  QVector3D>::toRaw(value));
}
QQuaternion View3DProperties::orientation() {
  return vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                     QQuaternion>::
      fromRaw(_node->getNodePropertyTyped<
              std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.Orientation"));
}
std::tuple<double, double, double, double> View3DProperties::orientationRaw() {
  return _node
      ->getNodePropertyTyped<std::tuple<double, double, double, double>>(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.Orientation");
}
QSharedPointer<NodeProperty> View3DProperties::orientationProperty() {
  return View3DProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.Orientation", false);
}
NodePropertyTyped<vx::types::Orientation3D>
View3DProperties::orientationPropertyTyped() {
  return NodePropertyTyped<vx::types::Orientation3D>(orientationProperty());
}
void View3DProperties::setOrientation(QQuaternion value) {
  _node->setNodePropertyTyped<std::tuple<double, double, double, double>>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.Orientation",
      vx::PropertyValueConvertRaw<std::tuple<double, double, double, double>,
                                  QQuaternion>::toRaw(value));
}
double View3DProperties::viewSizeUnzoomed() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ViewSizeUnzoomed"));
}
double View3DProperties::viewSizeUnzoomedRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ViewSizeUnzoomed");
}
QSharedPointer<NodeProperty> View3DProperties::viewSizeUnzoomedProperty() {
  return View3DProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ViewSizeUnzoomed",
      false);
}
NodePropertyTyped<vx::types::Float>
View3DProperties::viewSizeUnzoomedPropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(viewSizeUnzoomedProperty());
}
void View3DProperties::setViewSizeUnzoomed(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ViewSizeUnzoomed",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
double View3DProperties::zoomLog() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog"));
}
double View3DProperties::zoomLogRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog");
}
QSharedPointer<NodeProperty> View3DProperties::zoomLogProperty() {
  return View3DProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog", false);
}
NodePropertyTyped<vx::types::Float> View3DProperties::zoomLogPropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(zoomLogProperty());
}
void View3DProperties::setZoomLog(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
QList<vx::Node*> View3DProperties::objects() {
  return vx::PropertyValueConvertRaw<QList<QDBusObjectPath>, QList<vx::Node*>>::
      fromRaw(_node->getNodePropertyTyped<QList<QDBusObjectPath>>(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.Objects"));
}
QList<QDBusObjectPath> View3DProperties::objectsRaw() {
  return _node->getNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Objects");
}
QSharedPointer<NodeProperty> View3DProperties::objectsProperty() {
  return View3DProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Objects", false);
}
NodePropertyTyped<vx::types::NodeReferenceList>
View3DProperties::objectsPropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReferenceList>(objectsProperty());
}
void View3DProperties::setObjects(QList<vx::Node*> value) {
  _node->setNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Objects",
      vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                  QList<vx::Node*>>::toRaw(value));
}
bool View3DProperties::showViewCenter() {
  return vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
      _node->getNodePropertyTyped<bool>(
          "de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter"));
}
bool View3DProperties::showViewCenterRaw() {
  return _node->getNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter");
}
QSharedPointer<NodeProperty> View3DProperties::showViewCenterProperty() {
  return View3DProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter", false);
}
NodePropertyTyped<vx::types::Boolean>
View3DProperties::showViewCenterPropertyTyped() {
  return NodePropertyTyped<vx::types::Boolean>(showViewCenterProperty());
}
void View3DProperties::setShowViewCenter(bool value) {
  _node->setNodePropertyTyped<bool>(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter",
      vx::PropertyValueConvertRaw<bool, bool>::toRaw(value));
}
View3DProperties::View3DProperties(vx::Node* parent) : QObject(parent) {
  this->_node = parent;
  auto _prop_FieldOfView = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.FieldOfView", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_FieldOfView](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_FieldOfView) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.View3D.Camera."
                         "FieldOfView\":"
                      << e.what();
          return;
        }
        Q_EMIT this->fieldOfViewChanged(valueCasted);
      });
  auto _prop_LookAt = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LookAt](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_LookAt) return;
        QVector3D valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<std::tuple<double, double, double>,
                                          QVector3D>::
                  fromRaw(
                      Node::parseVariant<std::tuple<double, double, double>>(
                          value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.LookAt\":"
              << e.what();
          return;
        }
        Q_EMIT this->lookAtChanged(valueCasted);
      });
  auto _prop_Orientation = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.Orientation", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Orientation](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_Orientation) return;
        QQuaternion valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              std::tuple<double, double, double, double>, QQuaternion>::
              fromRaw(Node::parseVariant<
                      std::tuple<double, double, double, double>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.View3D.Camera."
                         "Orientation\":"
                      << e.what();
          return;
        }
        Q_EMIT this->orientationChanged(valueCasted);
      });
  auto _prop_ViewSizeUnzoomed = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ViewSizeUnzoomed",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ViewSizeUnzoomed](
          const QSharedPointer<NodeProperty>& property, const QVariant& value) {
        if (property != _prop_ViewSizeUnzoomed) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.View3D.Camera."
                         "ViewSizeUnzoomed\":"
                      << e.what();
          return;
        }
        Q_EMIT this->viewSizeUnzoomedChanged(valueCasted);
      });
  auto _prop_ZoomLog = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ZoomLog](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_ZoomLog) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.View3D.Camera.ZoomLog\":"
              << e.what();
          return;
        }
        Q_EMIT this->zoomLogChanged(valueCasted);
      });
  auto _prop_Objects = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.Objects", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Objects](const QSharedPointer<NodeProperty>& property,
                            const QVariant& value) {
        if (property != _prop_Objects) return;
        QList<vx::Node*> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                                    QList<vx::Node*>>::
              fromRaw(Node::parseVariant<QList<QDBusObjectPath>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Visualizer.View3D.Objects\":"
                      << e.what();
          return;
        }
        Q_EMIT this->objectsChanged(valueCasted);
      });
  auto _prop_ShowViewCenter = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_ShowViewCenter](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_ShowViewCenter) return;
        bool valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<bool, bool>::fromRaw(
              Node::parseVariant<bool>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Visualizer.View3D.ShowViewCenter\":"
              << e.what();
          return;
        }
        Q_EMIT this->showViewCenterChanged(valueCasted);
      });
}

}  // namespace visualizer_prop
inline namespace visualizer_prop {
VolumeRenderingPropertiesEntry::~VolumeRenderingPropertiesEntry() {}
VolumeRenderingPropertiesEntry::VolumeRenderingPropertiesEntry(
    vx::PropType::Input, QList<vx::Node*> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Input",
          QVariant::fromValue<QList<QDBusObjectPath>>(
              vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                          QList<vx::Node*>>::toRaw(value_))) {}
VolumeRenderingPropertiesBase::~VolumeRenderingPropertiesBase() {}
VolumeRenderingPropertiesCopy::VolumeRenderingPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<vx::Node*> VolumeRenderingPropertiesCopy::input() {
  return vx::PropertyValueConvertRaw<QList<QDBusObjectPath>, QList<vx::Node*>>::
      fromRaw(vx::Node::parseVariant<QList<QDBusObjectPath>>(
          (*_properties)["de.uni_stuttgart.Voxie.Input"]));
}
QList<QDBusObjectPath> VolumeRenderingPropertiesCopy::inputRaw() {
  return vx::Node::parseVariant<QList<QDBusObjectPath>>(
      (*_properties)["de.uni_stuttgart.Voxie.Input"]);
}
static const char _prototype_VolumeRendering_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  86,  111, 108, 117, 109, 101, 82,  101, 110, 100, 101, 114,
    105, 110, 103, 86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  93,
    44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,
    58,  32,  34,  68,  105, 115, 112, 108, 97,  121, 32,  51,  68,  32,  100,
    97,  116, 97,  32,  117, 115, 105, 110, 103, 32,  114, 97,  121, 116, 114,
    97,  99,  105, 110, 103, 32,  40,  118, 111, 108, 117, 109, 101, 32,  114,
    101, 110, 100, 101, 114, 105, 110, 103, 41,  34,  44,  32,  34,  68,  105,
    115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  86,  111,
    108, 117, 109, 101, 32,  82,  101, 110, 100, 101, 114, 105, 110, 103, 32,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  44,  32,  34,  78,
    97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    86,  105, 115, 117, 97,  108, 105, 122, 101, 114, 46,  86,  111, 108, 117,
    109, 101, 82,  101, 110, 100, 101, 114, 105, 110, 103, 34,  44,  32,  34,
    78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  86,
    105, 115, 117, 97,  108, 105, 122, 101, 114, 34,  44,  32,  34,  80,  114,
    111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  73,  110, 112, 117, 116, 34,  58,  32,  123,
    34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111,
    116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  86,  111, 108, 117, 109,
    101, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  73,  110, 112, 117, 116, 34,  44,  32,  34,
    84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,
    111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 76,  105, 115,
    116, 34,  125, 125, 44,  32,  34,  84,  114, 111, 118, 101, 67,  108, 97,
    115, 115, 105, 102, 105, 101, 114, 115, 34,  58,  32,  91,  34,  68,  101,
    118, 101, 108, 111, 112, 109, 101, 110, 116, 32,  83,  116, 97,  116, 117,
    115, 32,  58,  58,  32,  52,  32,  45,  32,  66,  101, 116, 97,  34,  93,
    125, 0};
const char* VolumeRenderingProperties::_getPrototypeJson() {
  return _prototype_VolumeRendering_;
}

VolumeRenderingProperties::~VolumeRenderingProperties() {}

QList<vx::Node*> VolumeRenderingProperties::input() {
  return vx::PropertyValueConvertRaw<QList<QDBusObjectPath>, QList<vx::Node*>>::
      fromRaw(_node->getNodePropertyTyped<QList<QDBusObjectPath>>(
          "de.uni_stuttgart.Voxie.Input"));
}
QList<QDBusObjectPath> VolumeRenderingProperties::inputRaw() {
  return _node->getNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Input");
}
QSharedPointer<NodeProperty> VolumeRenderingProperties::inputProperty() {
  return VolumeRenderingProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Input", false);
}
NodePropertyTyped<vx::types::NodeReferenceList>
VolumeRenderingProperties::inputPropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReferenceList>(inputProperty());
}
void VolumeRenderingProperties::setInput(QList<vx::Node*> value) {
  _node->setNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Input",
      vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                  QList<vx::Node*>>::toRaw(value));
}
VolumeRenderingProperties::VolumeRenderingProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_Input = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Input", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Input](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Input) return;
        QList<vx::Node*> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                                    QList<vx::Node*>>::
              fromRaw(Node::parseVariant<QList<QDBusObjectPath>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property \"de.uni_stuttgart.Voxie.Input\":"
                      << e.what();
          return;
        }
        Q_EMIT this->inputChanged(valueCasted);
      });
}

}  // namespace visualizer_prop
}  // namespace vx
