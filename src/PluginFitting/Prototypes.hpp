// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#pragma once

#include <QtCore/QJsonObject>
#include <QtCore/QList>
#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtGui/QQuaternion>
#include <QtGui/QVector3D>
#include <Voxie/Data/Color.hpp>
#include <Voxie/Data/ColorizerEntry.hpp>
#include <Voxie/Node/Node.hpp>
#include <Voxie/Node/Types.hpp>
#include <VoxieBackend/Data/DataType.hpp>

namespace vx {
#ifndef VOXIE_PROP_DEFINED_GeometricPrimitive
#define VOXIE_PROP_DEFINED_GeometricPrimitive
namespace PropType {
class GeometricPrimitive : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::GeometricPrimitive GeometricPrimitive = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_MaximumDistance
#define VOXIE_PROP_DEFINED_MaximumDistance
namespace PropType {
class MaximumDistance : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::MaximumDistance MaximumDistance = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Point1
#define VOXIE_PROP_DEFINED_Point1
namespace PropType {
class Point1 : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Point1 Point1 = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Point2
#define VOXIE_PROP_DEFINED_Point2
namespace PropType {
class Point2 : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Point2 Point2 = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Point3
#define VOXIE_PROP_DEFINED_Point3
namespace PropType {
class Point3 : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Point3 Point3 = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Surface
#define VOXIE_PROP_DEFINED_Surface
namespace PropType {
class Surface : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Surface Surface = {};
}
#endif
inline namespace filter_prop {
class FitPlanePropertiesEntry : public vx::PropertiesEntryBase {
  FitPlanePropertiesEntry() = delete;

 public:
  ~FitPlanePropertiesEntry();
  FitPlanePropertiesEntry(vx::PropType::GeometricPrimitive, vx::Node*);
  FitPlanePropertiesEntry(vx::PropType::MaximumDistance, double);
  FitPlanePropertiesEntry(vx::PropType::Point1, quint64);
  FitPlanePropertiesEntry(vx::PropType::Point2, quint64);
  FitPlanePropertiesEntry(vx::PropType::Point3, quint64);
  FitPlanePropertiesEntry(vx::PropType::Surface, vx::Node*);
};
class FitPlanePropertiesBase {
 public:
  virtual ~FitPlanePropertiesBase();
  virtual QDBusObjectPath geometricPrimitiveRaw() = 0;
  virtual double maximumDistance() = 0;
  virtual double maximumDistanceRaw() = 0;
  virtual quint64 point1() = 0;
  virtual quint64 point1Raw() = 0;
  virtual quint64 point2() = 0;
  virtual quint64 point2Raw() = 0;
  virtual quint64 point3() = 0;
  virtual quint64 point3Raw() = 0;
  virtual QDBusObjectPath surfaceRaw() = 0;
};
class FitPlanePropertiesCopy : public FitPlanePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  FitPlanePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QDBusObjectPath geometricPrimitiveRaw() override final;
  double maximumDistance() override final;
  double maximumDistanceRaw() override final;
  quint64 point1() override final;
  quint64 point1Raw() override final;
  quint64 point2() override final;
  quint64 point2Raw() override final;
  quint64 point3() override final;
  quint64 point3Raw() override final;
  QDBusObjectPath surfaceRaw() override final;
};
class FitPlaneProperties : public QObject, public FitPlanePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  FitPlaneProperties(vx::Node* parent);
  ~FitPlaneProperties();

  vx::Node* geometricPrimitive();
  QDBusObjectPath geometricPrimitiveRaw() override final;
  static QSharedPointer<NodeProperty> geometricPrimitiveProperty();
  static NodePropertyTyped<vx::types::NodeReference>
  geometricPrimitivePropertyTyped();
  void setGeometricPrimitive(vx::Node* value);
 Q_SIGNALS:
  void geometricPrimitiveChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* GeometricPrimitive READ geometricPrimitive WRITE
  // setGeometricPrimitive NOTIFY geometricPrimitiveChanged)

  double maximumDistance() override final;
  double maximumDistanceRaw() override final;
  static QSharedPointer<NodeProperty> maximumDistanceProperty();
  static NodePropertyTyped<vx::types::Float> maximumDistancePropertyTyped();
  void setMaximumDistance(double value);
 Q_SIGNALS:
  void maximumDistanceChanged(double value);

 public:
  // Q_PROPERTY(double MaximumDistance READ maximumDistance WRITE
  // setMaximumDistance NOTIFY maximumDistanceChanged)

  quint64 point1() override final;
  quint64 point1Raw() override final;
  static QSharedPointer<NodeProperty> point1Property();
  static NodePropertyTyped<vx::types::GeometricPrimitive> point1PropertyTyped();
  void setPoint1(quint64 value);
 Q_SIGNALS:
  void point1Changed(quint64 value);

 public:
  // Q_PROPERTY(quint64 Point1 READ point1 WRITE setPoint1 NOTIFY point1Changed)

  quint64 point2() override final;
  quint64 point2Raw() override final;
  static QSharedPointer<NodeProperty> point2Property();
  static NodePropertyTyped<vx::types::GeometricPrimitive> point2PropertyTyped();
  void setPoint2(quint64 value);
 Q_SIGNALS:
  void point2Changed(quint64 value);

 public:
  // Q_PROPERTY(quint64 Point2 READ point2 WRITE setPoint2 NOTIFY point2Changed)

  quint64 point3() override final;
  quint64 point3Raw() override final;
  static QSharedPointer<NodeProperty> point3Property();
  static NodePropertyTyped<vx::types::GeometricPrimitive> point3PropertyTyped();
  void setPoint3(quint64 value);
 Q_SIGNALS:
  void point3Changed(quint64 value);

 public:
  // Q_PROPERTY(quint64 Point3 READ point3 WRITE setPoint3 NOTIFY point3Changed)

  vx::Node* surface();
  QDBusObjectPath surfaceRaw() override final;
  static QSharedPointer<NodeProperty> surfaceProperty();
  static NodePropertyTyped<vx::types::NodeReference> surfacePropertyTyped();
  void setSurface(vx::Node* value);
 Q_SIGNALS:
  void surfaceChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Surface READ surface WRITE setSurface NOTIFY
  // surfaceChanged)
};

}  // namespace filter_prop
}  // namespace vx
