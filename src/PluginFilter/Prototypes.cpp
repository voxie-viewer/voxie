// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#include "Prototypes.hpp"

#include <Voxie/Node/NodePrototype.hpp>
#include <Voxie/Node/PropertyValueConvertDBus.hpp>
#include <Voxie/Node/PropertyValueConvertRaw.hpp>
namespace vx {
inline namespace filter_prop {
ColorizeLabeledSurfacePropertiesEntry::
    ~ColorizeLabeledSurfacePropertiesEntry() {}
ColorizeLabeledSurfacePropertiesEntry::ColorizeLabeledSurfacePropertiesEntry(
    vx::PropType::InputColorizer, QList<vx::ColorizerEntry> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputColorizer",
          QVariant::fromValue<QList<std::tuple<
              double, std::tuple<double, double, double, double>, qint32>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint32>>,
                  QList<vx::ColorizerEntry>>::toRaw(value_))) {}
ColorizeLabeledSurfacePropertiesEntry::ColorizeLabeledSurfacePropertiesEntry(
    vx::PropType::InputSurface, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputSurface",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
ColorizeLabeledSurfacePropertiesEntry::ColorizeLabeledSurfacePropertiesEntry(
    vx::PropType::InputTable, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputTable",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
ColorizeLabeledSurfacePropertiesEntry::ColorizeLabeledSurfacePropertiesEntry(
    vx::PropType::Output, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.Output",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
ColorizeLabeledSurfacePropertiesBase::~ColorizeLabeledSurfacePropertiesBase() {}
ColorizeLabeledSurfacePropertiesCopy::ColorizeLabeledSurfacePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<vx::ColorizerEntry>
ColorizeLabeledSurfacePropertiesCopy::inputColorizer() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          (*_properties)["de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface."
                         "InputColorizer"]));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
ColorizeLabeledSurfacePropertiesCopy::inputColorizerRaw() {
  return vx::Node::parseVariant<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface."
                     "InputColorizer"]);
}
QDBusObjectPath ColorizeLabeledSurfacePropertiesCopy::inputSurfaceRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface."
                     "InputSurface"]);
}
QDBusObjectPath ColorizeLabeledSurfacePropertiesCopy::inputTableRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputTable"]);
}
QDBusObjectPath ColorizeLabeledSurfacePropertiesCopy::outputRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)
          ["de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.Output"]);
}
static const char _prototype_ColorizeLabeledSurface_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  67,  111, 108, 111, 114, 105, 122, 101, 76,  97,  98,  101,
    108, 101, 100, 83,  117, 114, 102, 97,  99,  101, 34,  93,  44,  32,  34,
    68,  101, 115, 99,  114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,
    67,  111, 108, 111, 114, 105, 122, 101, 115, 32,  97,  32,  115, 117, 114,
    102, 97,  99,  101, 32,  111, 98,  106, 101, 99,  116, 32,  98,  121, 32,
    109, 97,  112, 112, 105, 110, 103, 32,  116, 104, 101, 32,  108, 97,  98,
    101, 108, 32,  97,  116, 116, 114, 105, 98,  117, 116, 101, 115, 32,  111,
    110, 32,  105, 116, 115, 32,  116, 114, 105, 97,  110, 103, 108, 101, 115,
    32,  116, 111, 32,  97,  32,  99,  111, 108, 117, 109, 110, 32,  102, 114,
    111, 109, 32,  97,  32,  116, 97,  98,  108, 101, 46,  34,  44,  32,  34,
    68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,
    67,  111, 108, 111, 114, 105, 122, 101, 32,  76,  97,  98,  101, 108, 101,
    100, 32,  83,  117, 114, 102, 97,  99,  101, 34,  44,  32,  34,  73,  99,
    111, 110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  100,
    101, 115, 107, 116, 111, 112, 46,  112, 110, 103, 34,  44,  32,  34,  78,
    97,  109, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    70,  105, 108, 116, 101, 114, 46,  67,  111, 108, 111, 114, 105, 122, 101,
    76,  97,  98,  101, 108, 101, 100, 83,  117, 114, 102, 97,  99,  101, 34,
    44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110,
    100, 46,  70,  105, 108, 116, 101, 114, 34,  44,  32,  34,  80,  114, 111,
    112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  67,  111, 108,
    111, 114, 105, 122, 101, 76,  97,  98,  101, 108, 101, 100, 83,  117, 114,
    102, 97,  99,  101, 46,  73,  110, 112, 117, 116, 67,  111, 108, 111, 114,
    105, 122, 101, 114, 34,  58,  32,  123, 34,  67,  111, 109, 112, 97,  116,
    105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,
    91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  67,  111, 108, 111, 114,
    105, 122, 101, 76,  97,  98,  101, 108, 101, 100, 83,  117, 114, 102, 97,
    99,  101, 46,  73,  110, 112, 117, 116, 67,  111, 108, 111, 114, 105, 122,
    101, 114, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  83,  108, 105, 99,  101, 32,  118, 97,
    108, 117, 101, 32,  116, 111, 32,  99,  111, 108, 111, 114, 32,  109, 97,
    112, 112, 105, 110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  67,  111, 108, 111, 114, 105, 122, 101, 114, 83,  101, 99,  116,
    105, 111, 110, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116,
    121, 84,  121, 112, 101, 46,  86,  97,  108, 117, 101, 67,  111, 108, 111,
    114, 77,  97,  112, 112, 105, 110, 103, 34,  125, 44,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  67,  111,
    108, 111, 114, 105, 122, 101, 76,  97,  98,  101, 108, 101, 100, 83,  117,
    114, 102, 97,  99,  101, 46,  73,  110, 112, 117, 116, 83,  117, 114, 102,
    97,  99,  101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100,
    78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116,
    97,  46,  83,  117, 114, 102, 97,  99,  101, 34,  93,  44,  32,  34,  67,
    111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109,
    101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    67,  111, 108, 111, 114, 105, 122, 101, 76,  97,  98,  101, 108, 101, 100,
    83,  117, 114, 102, 97,  99,  101, 46,  73,  110, 112, 117, 116, 83,  117,
    114, 102, 97,  99,  101, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  73,  110, 112, 117, 116,
    32,  83,  117, 114, 102, 97,  99,  101, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101,
    82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125, 44,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  67,
    111, 108, 111, 114, 105, 122, 101, 76,  97,  98,  101, 108, 101, 100, 83,
    117, 114, 102, 97,  99,  101, 46,  73,  110, 112, 117, 116, 84,  97,  98,
    108, 101, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,
    111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,
    32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,
    46,  84,  97,  98,  108, 101, 34,  93,  44,  32,  34,  67,  111, 109, 112,
    97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  67,  111, 108,
    111, 114, 105, 122, 101, 76,  97,  98,  101, 108, 101, 100, 83,  117, 114,
    102, 97,  99,  101, 46,  73,  110, 112, 117, 116, 84,  97,  98,  108, 101,
    34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109,
    101, 34,  58,  32,  34,  73,  110, 112, 117, 116, 32,  84,  97,  98,  108,
    101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,
    121, 112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110,
    99,  101, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    70,  105, 108, 116, 101, 114, 46,  67,  111, 108, 111, 114, 105, 122, 101,
    76,  97,  98,  101, 108, 101, 100, 83,  117, 114, 102, 97,  99,  101, 46,
    79,  117, 116, 112, 117, 116, 34,  58,  32,  123, 34,  65,  108, 108, 111,
    119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112,
    101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    68,  97,  116, 97,  46,  83,  117, 114, 102, 97,  99,  101, 34,  93,  44,
    32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  67,  111, 108, 111, 114, 105, 122, 101, 100, 76,  97,  98,
    101, 108, 101, 100, 83,  117, 114, 102, 97,  99,  101, 46,  79,  117, 116,
    112, 117, 116, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121,
    78,  97,  109, 101, 34,  58,  32,  34,  79,  117, 116, 112, 117, 116, 34,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  79,  117, 116, 112, 117, 116, 78,  111, 100, 101, 82,  101, 102,
    101, 114, 101, 110, 99,  101, 34,  125, 125, 44,  32,  34,  82,  117, 110,
    70,  105, 108, 116, 101, 114, 69,  110, 97,  98,  108, 101, 100, 67,  111,
    110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123, 34,  67,  111, 110,
    100, 105, 116, 105, 111, 110, 115, 34,  58,  32,  91,  123, 34,  67,  111,
    110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123, 34,  80,  114, 111,
    112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  70,  105, 108, 116, 101, 114, 46,  67,  111, 108, 111, 114, 105,
    122, 101, 76,  97,  98,  101, 108, 101, 100, 83,  117, 114, 102, 97,  99,
    101, 46,  73,  110, 112, 117, 116, 83,  117, 114, 102, 97,  99,  101, 34,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 67,  111, 110,
    100, 105, 116, 105, 111, 110, 46,  73,  115, 69,  109, 112, 116, 121, 34,
    125, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 67,  111,
    110, 100, 105, 116, 105, 111, 110, 46,  78,  111, 116, 34,  125, 44,  32,
    123, 34,  67,  111, 110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123,
    34,  80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  67,  111,
    108, 111, 114, 105, 122, 101, 76,  97,  98,  101, 108, 101, 100, 83,  117,
    114, 102, 97,  99,  101, 46,  73,  110, 112, 117, 116, 84,  97,  98,  108,
    101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 67,
    111, 110, 100, 105, 116, 105, 111, 110, 46,  73,  115, 69,  109, 112, 116,
    121, 34,  125, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    67,  111, 110, 100, 105, 116, 105, 111, 110, 46,  78,  111, 116, 34,  125,
    93,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 67,  111,
    110, 100, 105, 116, 105, 111, 110, 46,  65,  110, 100, 34,  125, 44,  32,
    34,  84,  114, 111, 118, 101, 67,  108, 97,  115, 115, 105, 102, 105, 101,
    114, 115, 34,  58,  32,  91,  34,  68,  101, 118, 101, 108, 111, 112, 109,
    101, 110, 116, 32,  83,  116, 97,  116, 117, 115, 32,  58,  58,  32,  53,
    32,  45,  32,  80,  114, 111, 100, 117, 99,  116, 105, 111, 110, 47,  83,
    116, 97,  98,  108, 101, 34,  93,  125, 0};
const char* ColorizeLabeledSurfaceProperties::_getPrototypeJson() {
  return _prototype_ColorizeLabeledSurface_;
}

ColorizeLabeledSurfaceProperties::~ColorizeLabeledSurfaceProperties() {}

QList<vx::ColorizerEntry> ColorizeLabeledSurfaceProperties::inputColorizer() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(_node->getNodePropertyTyped<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface."
          "InputColorizer"));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
ColorizeLabeledSurfaceProperties::inputColorizerRaw() {
  return _node->getNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputColorizer");
}
QSharedPointer<NodeProperty>
ColorizeLabeledSurfaceProperties::inputColorizerProperty() {
  return ColorizeLabeledSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputColorizer",
      false);
}
NodePropertyTyped<vx::types::ValueColorMapping>
ColorizeLabeledSurfaceProperties::inputColorizerPropertyTyped() {
  return NodePropertyTyped<vx::types::ValueColorMapping>(
      inputColorizerProperty());
}
void ColorizeLabeledSurfaceProperties::setInputColorizer(
    QList<vx::ColorizerEntry> value) {
  _node->setNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputColorizer",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint32>>,
          QList<vx::ColorizerEntry>>::toRaw(value));
}
vx::Node* ColorizeLabeledSurfaceProperties::inputSurface() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputSurface"));
}
QDBusObjectPath ColorizeLabeledSurfaceProperties::inputSurfaceRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputSurface");
}
QSharedPointer<NodeProperty>
ColorizeLabeledSurfaceProperties::inputSurfaceProperty() {
  return ColorizeLabeledSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputSurface",
      false);
}
NodePropertyTyped<vx::types::NodeReference>
ColorizeLabeledSurfaceProperties::inputSurfacePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(inputSurfaceProperty());
}
void ColorizeLabeledSurfaceProperties::setInputSurface(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputSurface",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Node* ColorizeLabeledSurfaceProperties::inputTable() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputTable"));
}
QDBusObjectPath ColorizeLabeledSurfaceProperties::inputTableRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputTable");
}
QSharedPointer<NodeProperty>
ColorizeLabeledSurfaceProperties::inputTableProperty() {
  return ColorizeLabeledSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputTable", false);
}
NodePropertyTyped<vx::types::NodeReference>
ColorizeLabeledSurfaceProperties::inputTablePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(inputTableProperty());
}
void ColorizeLabeledSurfaceProperties::setInputTable(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputTable",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Node* ColorizeLabeledSurfaceProperties::output() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.Output"));
}
QDBusObjectPath ColorizeLabeledSurfaceProperties::outputRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.Output");
}
QSharedPointer<NodeProperty>
ColorizeLabeledSurfaceProperties::outputProperty() {
  return ColorizeLabeledSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.Output", false);
}
NodePropertyTyped<vx::types::OutputNodeReference>
ColorizeLabeledSurfaceProperties::outputPropertyTyped() {
  return NodePropertyTyped<vx::types::OutputNodeReference>(outputProperty());
}
void ColorizeLabeledSurfaceProperties::setOutput(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.Output",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
ColorizeLabeledSurfaceProperties::ColorizeLabeledSurfaceProperties(
    vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_InputColorizer = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputColorizer",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_InputColorizer](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_InputColorizer) return;
        QList<vx::ColorizerEntry> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>,
              QList<vx::ColorizerEntry>>::
              fromRaw(Node::parseVariant<QList<std::tuple<
                          double, std::tuple<double, double, double, double>,
                          qint32>>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Filter."
                         "ColorizeLabeledSurface.InputColorizer\":"
                      << e.what();
          return;
        }
        Q_EMIT this->inputColorizerChanged(valueCasted);
      });
  auto _prop_InputSurface = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputSurface",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_InputSurface](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_InputSurface) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Filter."
                         "ColorizeLabeledSurface.InputSurface\":"
                      << e.what();
          return;
        }
        Q_EMIT this->inputSurfaceChanged(valueCasted);
      });
  auto _prop_InputTable = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.InputTable", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_InputTable](const QSharedPointer<NodeProperty>& property,
                               const QVariant& value) {
        if (property != _prop_InputTable) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Filter."
                         "ColorizeLabeledSurface.InputTable\":"
                      << e.what();
          return;
        }
        Q_EMIT this->inputTableChanged(valueCasted);
      });
  auto _prop_Output = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeLabeledSurface.Output", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Output](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Output) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Filter."
                         "ColorizeLabeledSurface.Output\":"
                      << e.what();
          return;
        }
        Q_EMIT this->outputChanged(valueCasted);
      });
}

}  // namespace filter_prop
inline namespace filter_prop {
ColorizeSurfaceFromAttributePropertiesEntry::
    ~ColorizeSurfaceFromAttributePropertiesEntry() {}
ColorizeSurfaceFromAttributePropertiesEntry::
    ColorizeSurfaceFromAttributePropertiesEntry(
        vx::PropType::InputColorizer, QList<vx::ColorizerEntry> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
          "InputColorizer",
          QVariant::fromValue<QList<std::tuple<
              double, std::tuple<double, double, double, double>, qint32>>>(
              vx::PropertyValueConvertRaw<
                  QList<std::tuple<double,
                                   std::tuple<double, double, double, double>,
                                   qint32>>,
                  QList<vx::ColorizerEntry>>::toRaw(value_))) {}
ColorizeSurfaceFromAttributePropertiesEntry::
    ColorizeSurfaceFromAttributePropertiesEntry(vx::PropType::InputSurface,
                                                vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
          "InputSurface",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
ColorizeSurfaceFromAttributePropertiesEntry::
    ColorizeSurfaceFromAttributePropertiesEntry(vx::PropType::Output,
                                                vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute.Output",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
ColorizeSurfaceFromAttributePropertiesBase::
    ~ColorizeSurfaceFromAttributePropertiesBase() {}
ColorizeSurfaceFromAttributePropertiesCopy::
    ColorizeSurfaceFromAttributePropertiesCopy(
        const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<vx::ColorizerEntry>
ColorizeSurfaceFromAttributePropertiesCopy::inputColorizer() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(vx::Node::parseVariant<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          (*_properties)["de.uni_stuttgart.Voxie.Filter."
                         "ColorizeSurfaceFromAttribute.InputColorizer"]));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
ColorizeSurfaceFromAttributePropertiesCopy::inputColorizerRaw() {
  return vx::Node::parseVariant<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter."
                     "ColorizeSurfaceFromAttribute.InputColorizer"]);
}
QDBusObjectPath ColorizeSurfaceFromAttributePropertiesCopy::inputSurfaceRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter."
                     "ColorizeSurfaceFromAttribute.InputSurface"]);
}
QDBusObjectPath ColorizeSurfaceFromAttributePropertiesCopy::outputRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter."
                     "ColorizeSurfaceFromAttribute.Output"]);
}
static const char _prototype_ColorizeSurfaceFromAttribute_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  67,  111, 108, 111, 114, 105, 122, 101, 83,  117, 114, 102,
    97,  99,  101, 70,  114, 111, 109, 65,  116, 116, 114, 105, 98,  117, 116,
    101, 34,  93,  44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105,
    111, 110, 34,  58,  32,  34,  67,  111, 108, 111, 114, 105, 122, 101, 115,
    32,  97,  32,  115, 117, 114, 102, 97,  99,  101, 32,  111, 98,  106, 101,
    99,  116, 32,  98,  121, 32,  109, 97,  112, 112, 105, 110, 103, 32,  97,
    110, 32,  97,  114, 98,  105, 116, 114, 97,  114, 121, 32,  110, 117, 109,
    101, 114, 105, 99,  32,  97,  116, 116, 114, 105, 98,  117, 116, 101, 32,
    111, 102, 32,  116, 104, 101, 32,  115, 117, 114, 102, 97,  99,  101, 32,
    116, 111, 32,  97,  32,  99,  111, 108, 111, 114, 32,  114, 97,  110, 103,
    101, 46,  34,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,
    109, 101, 34,  58,  32,  34,  67,  111, 108, 111, 114, 105, 122, 101, 32,
    83,  117, 114, 102, 97,  99,  101, 32,  70,  114, 111, 109, 32,  65,  116,
    116, 114, 105, 98,  117, 116, 101, 34,  44,  32,  34,  78,  97,  109, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108,
    116, 101, 114, 46,  67,  111, 108, 111, 114, 105, 122, 101, 83,  117, 114,
    102, 97,  99,  101, 70,  114, 111, 109, 65,  116, 116, 114, 105, 98,  117,
    116, 101, 34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100, 101,
    75,  105, 110, 100, 46,  70,  105, 108, 116, 101, 114, 34,  44,  32,  34,
    80,  114, 111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,
    67,  111, 108, 111, 114, 105, 122, 101, 83,  117, 114, 102, 97,  99,  101,
    70,  114, 111, 109, 65,  116, 116, 114, 105, 98,  117, 116, 101, 46,  73,
    110, 112, 117, 116, 67,  111, 108, 111, 114, 105, 122, 101, 114, 34,  58,
    32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116,
    121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  67,  111, 108, 111, 114, 105, 122, 101, 83,  117, 114,
    102, 97,  99,  101, 70,  114, 111, 109, 65,  116, 116, 114, 105, 98,  117,
    116, 101, 46,  73,  110, 112, 117, 116, 67,  111, 108, 111, 114, 105, 122,
    101, 114, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  65,  116, 116, 114, 105, 98,  117, 116,
    101, 32,  118, 97,  108, 117, 101, 32,  116, 111, 32,  99,  111, 108, 111,
    114, 32,  109, 97,  112, 112, 105, 110, 103, 34,  44,  32,  34,  78,  97,
    109, 101, 34,  58,  32,  34,  67,  111, 108, 111, 114, 105, 122, 101, 114,
    83,  101, 99,  116, 105, 111, 110, 34,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  86,  97,  108, 117, 101,
    67,  111, 108, 111, 114, 77,  97,  112, 112, 105, 110, 103, 34,  125, 44,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101,
    114, 46,  67,  111, 108, 111, 114, 105, 122, 101, 83,  117, 114, 102, 97,
    99,  101, 70,  114, 111, 109, 65,  116, 116, 114, 105, 98,  117, 116, 101,
    46,  73,  110, 112, 117, 116, 83,  117, 114, 102, 97,  99,  101, 34,  58,
    32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 80,
    114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  83,  117, 114,
    102, 97,  99,  101, 34,  93,  44,  32,  34,  67,  111, 109, 112, 97,  116,
    105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,
    91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  67,  111, 108, 111, 114,
    105, 122, 101, 83,  117, 114, 102, 97,  99,  101, 70,  114, 111, 109, 65,
    116, 116, 114, 105, 98,  117, 116, 101, 46,  73,  110, 112, 117, 116, 83,
    117, 114, 102, 97,  99,  101, 34,  93,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  73,  110, 112, 117,
    116, 32,  83,  117, 114, 102, 97,  99,  101, 34,  44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100,
    101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125, 44,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,
    67,  111, 108, 111, 114, 105, 122, 101, 83,  117, 114, 102, 97,  99,  101,
    70,  114, 111, 109, 65,  116, 116, 114, 105, 98,  117, 116, 101, 46,  79,
    117, 116, 112, 117, 116, 34,  58,  32,  123, 34,  65,  108, 108, 111, 119,
    101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121, 112, 101,
    115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  68,
    97,  116, 97,  46,  83,  117, 114, 102, 97,  99,  101, 34,  93,  44,  32,
    34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121, 78,
    97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  67,  111, 108, 111, 114, 105, 122, 101, 83,  117, 114, 102, 97,
    99,  101, 70,  114, 111, 109, 65,  116, 116, 114, 105, 98,  117, 116, 101,
    46,  79,  117, 116, 112, 117, 116, 34,  93,  44,  32,  34,  68,  105, 115,
    112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  79,  117, 116,
    112, 117, 116, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116,
    121, 84,  121, 112, 101, 46,  79,  117, 116, 112, 117, 116, 78,  111, 100,
    101, 82,  101, 102, 101, 114, 101, 110, 99,  101, 34,  125, 125, 44,  32,
    34,  82,  117, 110, 70,  105, 108, 116, 101, 114, 69,  110, 97,  98,  108,
    101, 100, 67,  111, 110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123,
    34,  67,  111, 110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123, 34,
    80,  114, 111, 112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  67,  111, 108,
    111, 114, 105, 122, 101, 83,  117, 114, 102, 97,  99,  101, 70,  114, 111,
    109, 65,  116, 116, 114, 105, 98,  117, 116, 101, 46,  73,  110, 112, 117,
    116, 83,  117, 114, 102, 97,  99,  101, 34,  44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111, 110,
    46,  73,  115, 69,  109, 112, 116, 121, 34,  125, 44,  32,  34,  84,  121,
    112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,
    114, 111, 112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111,
    110, 46,  78,  111, 116, 34,  125, 44,  32,  34,  84,  114, 111, 118, 101,
    67,  108, 97,  115, 115, 105, 102, 105, 101, 114, 115, 34,  58,  32,  91,
    34,  68,  101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 32,  83,  116,
    97,  116, 117, 115, 32,  58,  58,  32,  53,  32,  45,  32,  80,  114, 111,
    100, 117, 99,  116, 105, 111, 110, 47,  83,  116, 97,  98,  108, 101, 34,
    93,  125, 0};
const char* ColorizeSurfaceFromAttributeProperties::_getPrototypeJson() {
  return _prototype_ColorizeSurfaceFromAttribute_;
}

ColorizeSurfaceFromAttributeProperties::
    ~ColorizeSurfaceFromAttributeProperties() {}

QList<vx::ColorizerEntry>
ColorizeSurfaceFromAttributeProperties::inputColorizer() {
  return vx::PropertyValueConvertRaw<
      QList<std::tuple<double, std::tuple<double, double, double, double>,
                       qint32>>,
      QList<vx::ColorizerEntry>>::
      fromRaw(_node->getNodePropertyTyped<QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>>(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
          "InputColorizer"));
}
QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
ColorizeSurfaceFromAttributeProperties::inputColorizerRaw() {
  return _node->getNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
      "InputColorizer");
}
QSharedPointer<NodeProperty>
ColorizeSurfaceFromAttributeProperties::inputColorizerProperty() {
  return ColorizeSurfaceFromAttributeProperties::getNodePrototype()
      ->getProperty(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
          "InputColorizer",
          false);
}
NodePropertyTyped<vx::types::ValueColorMapping>
ColorizeSurfaceFromAttributeProperties::inputColorizerPropertyTyped() {
  return NodePropertyTyped<vx::types::ValueColorMapping>(
      inputColorizerProperty());
}
void ColorizeSurfaceFromAttributeProperties::setInputColorizer(
    QList<vx::ColorizerEntry> value) {
  _node->setNodePropertyTyped<QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
      "InputColorizer",
      vx::PropertyValueConvertRaw<
          QList<std::tuple<double, std::tuple<double, double, double, double>,
                           qint32>>,
          QList<vx::ColorizerEntry>>::toRaw(value));
}
vx::Node* ColorizeSurfaceFromAttributeProperties::inputSurface() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
          "InputSurface"));
}
QDBusObjectPath ColorizeSurfaceFromAttributeProperties::inputSurfaceRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
      "InputSurface");
}
QSharedPointer<NodeProperty>
ColorizeSurfaceFromAttributeProperties::inputSurfaceProperty() {
  return ColorizeSurfaceFromAttributeProperties::getNodePrototype()
      ->getProperty(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
          "InputSurface",
          false);
}
NodePropertyTyped<vx::types::NodeReference>
ColorizeSurfaceFromAttributeProperties::inputSurfacePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(inputSurfaceProperty());
}
void ColorizeSurfaceFromAttributeProperties::setInputSurface(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute.InputSurface",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Node* ColorizeSurfaceFromAttributeProperties::output() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute.Output"));
}
QDBusObjectPath ColorizeSurfaceFromAttributeProperties::outputRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute.Output");
}
QSharedPointer<NodeProperty>
ColorizeSurfaceFromAttributeProperties::outputProperty() {
  return ColorizeSurfaceFromAttributeProperties::getNodePrototype()
      ->getProperty(
          "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute.Output",
          false);
}
NodePropertyTyped<vx::types::OutputNodeReference>
ColorizeSurfaceFromAttributeProperties::outputPropertyTyped() {
  return NodePropertyTyped<vx::types::OutputNodeReference>(outputProperty());
}
void ColorizeSurfaceFromAttributeProperties::setOutput(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute.Output",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
ColorizeSurfaceFromAttributeProperties::ColorizeSurfaceFromAttributeProperties(
    vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_InputColorizer = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute."
      "InputColorizer",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_InputColorizer](const QSharedPointer<NodeProperty>& property,
                                   const QVariant& value) {
        if (property != _prop_InputColorizer) return;
        QList<vx::ColorizerEntry> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<
              QList<std::tuple<
                  double, std::tuple<double, double, double, double>, qint32>>,
              QList<vx::ColorizerEntry>>::
              fromRaw(Node::parseVariant<QList<std::tuple<
                          double, std::tuple<double, double, double, double>,
                          qint32>>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Filter."
                         "ColorizeSurfaceFromAttribute.InputColorizer\":"
                      << e.what();
          return;
        }
        Q_EMIT this->inputColorizerChanged(valueCasted);
      });
  auto _prop_InputSurface = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute.InputSurface",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_InputSurface](const QSharedPointer<NodeProperty>& property,
                                 const QVariant& value) {
        if (property != _prop_InputSurface) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Filter."
                         "ColorizeSurfaceFromAttribute.InputSurface\":"
                      << e.what();
          return;
        }
        Q_EMIT this->inputSurfaceChanged(valueCasted);
      });
  auto _prop_Output = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.ColorizeSurfaceFromAttribute.Output",
      false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Output](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Output) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property "
                         "\"de.uni_stuttgart.Voxie.Filter."
                         "ColorizeSurfaceFromAttribute.Output\":"
                      << e.what();
          return;
        }
        Q_EMIT this->outputChanged(valueCasted);
      });
}

}  // namespace filter_prop
inline namespace filter_prop {
CreateSurfacePropertiesEntry::~CreateSurfacePropertiesEntry() {}
CreateSurfacePropertiesEntry::CreateSurfacePropertiesEntry(
    vx::PropType::Algorithm, QString value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm",
          QVariant::fromValue<QString>(
              vx::PropertyValueConvertRaw<QString, QString>::toRaw(value_))) {}
CreateSurfacePropertiesEntry::CreateSurfacePropertiesEntry(
    vx::PropType::InputVolume, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.CreateSurface.InputVolume",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
CreateSurfacePropertiesEntry::CreateSurfacePropertiesEntry(
    vx::PropType::LabelVolume, vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.CreateSurface.LabelVolume",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
CreateSurfacePropertiesEntry::CreateSurfacePropertiesEntry(
    vx::PropType::Threshold, double value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold",
          QVariant::fromValue<double>(
              vx::PropertyValueConvertRaw<double, double>::toRaw(value_))) {}
CreateSurfacePropertiesEntry::CreateSurfacePropertiesEntry(vx::PropType::Output,
                                                           vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Output",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
CreateSurfacePropertiesBase::~CreateSurfacePropertiesBase() {}
CreateSurfacePropertiesCopy::CreateSurfacePropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QString CreateSurfacePropertiesCopy::algorithm() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      vx::Node::parseVariant<QString>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm"]));
}
QString CreateSurfacePropertiesCopy::algorithmRaw() {
  return vx::Node::parseVariant<QString>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm"]);
}
QDBusObjectPath CreateSurfacePropertiesCopy::inputVolumeRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>((
      *_properties)["de.uni_stuttgart.Voxie.Filter.CreateSurface.InputVolume"]);
}
QDBusObjectPath CreateSurfacePropertiesCopy::labelVolumeRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>((
      *_properties)["de.uni_stuttgart.Voxie.Filter.CreateSurface.LabelVolume"]);
}
double CreateSurfacePropertiesCopy::threshold() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      vx::Node::parseVariant<double>(
          (*_properties)
              ["de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold"]));
}
double CreateSurfacePropertiesCopy::thresholdRaw() {
  return vx::Node::parseVariant<double>(
      (*_properties)["de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold"]);
}
QDBusObjectPath CreateSurfacePropertiesCopy::outputRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Output"]);
}
static const char _prototype_CreateSurface_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  67,  114, 101, 97,  116, 101, 83,  117, 114, 102, 97,  99,
    101, 34,  93,  44,  32,  34,  68,  101, 115, 99,  114, 105, 112, 116, 105,
    111, 110, 34,  58,  32,  34,  69,  120, 116, 114, 97,  99,  116, 115, 32,
    97,  32,  115, 117, 114, 102, 97,  99,  101, 32,  40,  116, 114, 105, 97,
    110, 103, 108, 101, 32,  109, 101, 115, 104, 41,  32,  111, 117, 116, 32,
    111, 102, 32,  97,  32,  118, 111, 108, 117, 109, 101, 46,  34,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  69,  120, 116, 114, 97,  99,  116, 32,  105, 115, 111, 115, 117, 114,
    102, 97,  99,  101, 34,  44,  32,  34,  73,  99,  111, 110, 34,  58,  32,
    34,  58,  47,  105, 99,  111, 110, 115, 47,  100, 101, 115, 107, 116, 111,
    112, 46,  112, 110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,
    32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103,
    97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101,
    114, 46,  67,  114, 101, 97,  116, 101, 83,  117, 114, 102, 97,  99,  101,
    34,  44,  32,  34,  78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105,
    110, 100, 46,  70,  105, 108, 116, 101, 114, 34,  44,  32,  34,  80,  114,
    111, 112, 101, 114, 116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101,
    46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,
    86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  67,  114,
    101, 97,  116, 101, 83,  117, 114, 102, 97,  99,  101, 46,  65,  108, 103,
    111, 114, 105, 116, 104, 109, 34,  58,  32,  123, 34,  67,  111, 109, 112,
    97,  116, 105, 98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,
    58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  67,  114, 101,
    97,  116, 101, 83,  117, 114, 102, 97,  99,  101, 46,  65,  108, 103, 111,
    114, 105, 116, 104, 109, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108,
    97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  97,  108, 103, 111, 114,
    105, 116, 104, 109, 34,  44,  32,  34,  73,  115, 67,  117, 115, 116, 111,
    109, 83,  116, 111, 114, 97,  103, 101, 34,  58,  32,  116, 114, 117, 101,
    44,  32,  34,  73,  115, 67,  117, 115, 116, 111, 109, 85,  73,  34,  58,
    32,  116, 114, 117, 101, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114,
    116, 121, 84,  121, 112, 101, 46,  83,  116, 114, 105, 110, 103, 34,  125,
    44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116,
    101, 114, 46,  67,  114, 101, 97,  116, 101, 83,  117, 114, 102, 97,  99,
    101, 46,  73,  110, 112, 117, 116, 86,  111, 108, 117, 109, 101, 34,  58,
    32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 80,
    114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  86,  111, 108,
    117, 109, 101, 34,  93,  44,  32,  34,  67,  111, 109, 112, 97,  116, 105,
    98,  105, 108, 105, 116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  67,  114, 101, 97,  116, 101,
    83,  117, 114, 102, 97,  99,  101, 46,  73,  110, 112, 117, 116, 86,  111,
    108, 117, 109, 101, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  73,  110, 112, 117, 116, 32,
    86,  111, 108, 117, 109, 101, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101,
    102, 101, 114, 101, 110, 99,  101, 34,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,  67,  114, 101,
    97,  116, 101, 83,  117, 114, 102, 97,  99,  101, 46,  76,  97,  98,  101,
    108, 86,  111, 108, 117, 109, 101, 34,  58,  32,  123, 34,  65,  108, 108,
    111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121,
    112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  68,  97,  116, 97,  46,  86,  111, 108, 117, 109, 101, 34,  93,  44,
    32,  34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  67,  114, 101, 97,  116, 101, 83,  117, 114, 102, 97,  99,
    101, 46,  76,  97,  98,  101, 108, 86,  111, 108, 117, 109, 101, 34,  93,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  76,  97,  98,  101, 108, 32,  86,  111, 108, 117, 109, 101,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  78,  111, 100, 101, 82,  101, 102, 101, 114, 101, 110, 99,
    101, 34,  125, 44,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116,
    117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  70,
    105, 108, 116, 101, 114, 46,  67,  114, 101, 97,  116, 101, 83,  117, 114,
    102, 97,  99,  101, 46,  84,  104, 114, 101, 115, 104, 111, 108, 100, 34,
    58,  32,  123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105,
    116, 121, 78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  67,  114, 101, 97,  116, 101, 83,  117, 114, 102,
    97,  99,  101, 46,  84,  104, 114, 101, 115, 104, 111, 108, 100, 34,  93,
    44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,
    58,  32,  34,  84,  104, 114, 101, 115, 104, 111, 108, 100, 34,  44,  32,
    34,  73,  115, 67,  117, 115, 116, 111, 109, 83,  116, 111, 114, 97,  103,
    101, 34,  58,  32,  102, 97,  108, 115, 101, 44,  32,  34,  73,  115, 67,
    117, 115, 116, 111, 109, 85,  73,  34,  58,  32,  102, 97,  108, 115, 101,
    44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117,
    110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111,
    120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112,
    101, 46,  70,  108, 111, 97,  116, 34,  125, 44,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  79,  117, 116, 112, 117, 116, 34,  58,  32,  123,
    34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111,
    116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  83,  117, 114, 102, 97,
    99,  101, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,  121, 78,
    97,  109, 101, 34,  58,  32,  34,  79,  117, 116, 112, 117, 116, 34,  44,
    32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121, 112, 101,
    46,  79,  117, 116, 112, 117, 116, 78,  111, 100, 101, 82,  101, 102, 101,
    114, 101, 110, 99,  101, 34,  125, 125, 44,  32,  34,  82,  117, 110, 70,
    105, 108, 116, 101, 114, 69,  110, 97,  98,  108, 101, 100, 67,  111, 110,
    100, 105, 116, 105, 111, 110, 34,  58,  32,  123, 34,  67,  111, 110, 100,
    105, 116, 105, 111, 110, 34,  58,  32,  123, 34,  80,  114, 111, 112, 101,
    114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115,
    116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,
    70,  105, 108, 116, 101, 114, 46,  67,  114, 101, 97,  116, 101, 83,  117,
    114, 102, 97,  99,  101, 46,  73,  110, 112, 117, 116, 86,  111, 108, 117,
    109, 101, 34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100,
    101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116,
    46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121,
    67,  111, 110, 100, 105, 116, 105, 111, 110, 46,  73,  115, 69,  109, 112,
    116, 121, 34,  125, 44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116,
    121, 67,  111, 110, 100, 105, 116, 105, 111, 110, 46,  78,  111, 116, 34,
    125, 44,  32,  34,  84,  114, 111, 118, 101, 67,  108, 97,  115, 115, 105,
    102, 105, 101, 114, 115, 34,  58,  32,  91,  34,  68,  101, 118, 101, 108,
    111, 112, 109, 101, 110, 116, 32,  83,  116, 97,  116, 117, 115, 32,  58,
    58,  32,  53,  32,  45,  32,  80,  114, 111, 100, 117, 99,  116, 105, 111,
    110, 47,  83,  116, 97,  98,  108, 101, 34,  93,  125, 0};
const char* CreateSurfaceProperties::_getPrototypeJson() {
  return _prototype_CreateSurface_;
}

CreateSurfaceProperties::~CreateSurfaceProperties() {}

QString CreateSurfaceProperties::algorithm() {
  return vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
      _node->getNodePropertyTyped<QString>(
          "de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm"));
}
QString CreateSurfaceProperties::algorithmRaw() {
  return _node->getNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm");
}
QSharedPointer<NodeProperty> CreateSurfaceProperties::algorithmProperty() {
  return CreateSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm", false);
}
NodePropertyTyped<vx::types::String>
CreateSurfaceProperties::algorithmPropertyTyped() {
  return NodePropertyTyped<vx::types::String>(algorithmProperty());
}
void CreateSurfaceProperties::setAlgorithm(QString value) {
  _node->setNodePropertyTyped<QString>(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm",
      vx::PropertyValueConvertRaw<QString, QString>::toRaw(value));
}
vx::Node* CreateSurfaceProperties::inputVolume() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.CreateSurface.InputVolume"));
}
QDBusObjectPath CreateSurfaceProperties::inputVolumeRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.InputVolume");
}
QSharedPointer<NodeProperty> CreateSurfaceProperties::inputVolumeProperty() {
  return CreateSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.InputVolume", false);
}
NodePropertyTyped<vx::types::NodeReference>
CreateSurfaceProperties::inputVolumePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(inputVolumeProperty());
}
void CreateSurfaceProperties::setInputVolume(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.InputVolume",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
vx::Node* CreateSurfaceProperties::labelVolume() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Filter.CreateSurface.LabelVolume"));
}
QDBusObjectPath CreateSurfaceProperties::labelVolumeRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.LabelVolume");
}
QSharedPointer<NodeProperty> CreateSurfaceProperties::labelVolumeProperty() {
  return CreateSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.LabelVolume", false);
}
NodePropertyTyped<vx::types::NodeReference>
CreateSurfaceProperties::labelVolumePropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReference>(labelVolumeProperty());
}
void CreateSurfaceProperties::setLabelVolume(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.LabelVolume",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
double CreateSurfaceProperties::threshold() {
  return vx::PropertyValueConvertRaw<double, double>::fromRaw(
      _node->getNodePropertyTyped<double>(
          "de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold"));
}
double CreateSurfaceProperties::thresholdRaw() {
  return _node->getNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold");
}
QSharedPointer<NodeProperty> CreateSurfaceProperties::thresholdProperty() {
  return CreateSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold", false);
}
NodePropertyTyped<vx::types::Float>
CreateSurfaceProperties::thresholdPropertyTyped() {
  return NodePropertyTyped<vx::types::Float>(thresholdProperty());
}
void CreateSurfaceProperties::setThreshold(double value) {
  _node->setNodePropertyTyped<double>(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold",
      vx::PropertyValueConvertRaw<double, double>::toRaw(value));
}
vx::Node* CreateSurfaceProperties::output() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Output"));
}
QDBusObjectPath CreateSurfaceProperties::outputRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Output");
}
QSharedPointer<NodeProperty> CreateSurfaceProperties::outputProperty() {
  return CreateSurfaceProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Output", false);
}
NodePropertyTyped<vx::types::OutputNodeReference>
CreateSurfaceProperties::outputPropertyTyped() {
  return NodePropertyTyped<vx::types::OutputNodeReference>(outputProperty());
}
void CreateSurfaceProperties::setOutput(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Output",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
CreateSurfaceProperties::CreateSurfaceProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_Algorithm = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Algorithm](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_Algorithm) return;
        QString valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QString, QString>::fromRaw(
              Node::parseVariant<QString>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Filter.CreateSurface.Algorithm\":"
              << e.what();
          return;
        }
        Q_EMIT this->algorithmChanged(valueCasted);
      });
  auto _prop_InputVolume = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.InputVolume", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_InputVolume](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_InputVolume) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Filter.CreateSurface.InputVolume\":"
              << e.what();
          return;
        }
        Q_EMIT this->inputVolumeChanged(valueCasted);
      });
  auto _prop_LabelVolume = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.LabelVolume", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_LabelVolume](const QSharedPointer<NodeProperty>& property,
                                const QVariant& value) {
        if (property != _prop_LabelVolume) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Filter.CreateSurface.LabelVolume\":"
              << e.what();
          return;
        }
        Q_EMIT this->labelVolumeChanged(valueCasted);
      });
  auto _prop_Threshold = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Threshold](const QSharedPointer<NodeProperty>& property,
                              const QVariant& value) {
        if (property != _prop_Threshold) return;
        double valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<double, double>::fromRaw(
              Node::parseVariant<double>(value));
        } catch (vx::Exception& e) {
          qCritical()
              << "Error while parsing property value for event handler for "
                 "property "
                 "\"de.uni_stuttgart.Voxie.Filter.CreateSurface.Threshold\":"
              << e.what();
          return;
        }
        Q_EMIT this->thresholdChanged(valueCasted);
      });
  auto _prop_Output = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Output", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Output](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Output) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property \"de.uni_stuttgart.Voxie.Output\":"
                      << e.what();
          return;
        }
        Q_EMIT this->outputChanged(valueCasted);
      });
}

}  // namespace filter_prop
inline namespace filter_prop {
TableFilterPropertiesEntry::~TableFilterPropertiesEntry() {}
TableFilterPropertiesEntry::TableFilterPropertiesEntry(vx::PropType::Input,
                                                       QList<vx::Node*> value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Input",
          QVariant::fromValue<QList<QDBusObjectPath>>(
              vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                          QList<vx::Node*>>::toRaw(value_))) {}
TableFilterPropertiesEntry::TableFilterPropertiesEntry(vx::PropType::Output,
                                                       vx::Node* value_)
    : vx::PropertiesEntryBase(
          "de.uni_stuttgart.Voxie.Output",
          QVariant::fromValue<QDBusObjectPath>(
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(
                  value_))) {}
TableFilterPropertiesBase::~TableFilterPropertiesBase() {}
TableFilterPropertiesCopy::TableFilterPropertiesCopy(
    const QSharedPointer<const QMap<QString, QVariant>>& properties)
    : _properties(properties) {}
QList<QDBusObjectPath> TableFilterPropertiesCopy::inputRaw() {
  return vx::Node::parseVariant<QList<QDBusObjectPath>>(
      (*_properties)["de.uni_stuttgart.Voxie.Input"]);
}
QDBusObjectPath TableFilterPropertiesCopy::outputRaw() {
  return vx::Node::parseVariant<QDBusObjectPath>(
      (*_properties)["de.uni_stuttgart.Voxie.Output"]);
}
static const char _prototype_TableFilter_[] = {
    123, 34,  67,  111, 109, 112, 97,  116, 105, 98,  105, 108, 105, 116, 121,
    78,  97,  109, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110,
    105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120,
    105, 101, 46,  67,  67,  65,  82,  101, 115, 117, 108, 116, 83,  101, 108,
    101, 99,  116, 105, 111, 110, 34,  93,  44,  32,  34,  68,  101, 115, 99,
    114, 105, 112, 116, 105, 111, 110, 34,  58,  32,  34,  69,  120, 116, 114,
    97,  99,  116, 115, 32,  97,  32,  115, 117, 98,  115, 101, 116, 32,  111,
    102, 32,  97,  32,  67,  67,  65,  32,  40,  67,  111, 110, 110, 101, 99,
    116, 101, 100, 32,  67,  111, 109, 112, 111, 110, 101, 110, 116, 32,  65,
    110, 97,  108, 121, 115, 105, 115, 41,  32,  114, 101, 115, 117, 108, 116,
    32,  116, 97,  98,  108, 101, 32,  119, 104, 105, 99,  104, 32,  102, 117,
    108, 102, 105, 108, 115, 32,  97,  32,  115, 101, 116, 32,  111, 102, 32,
    115, 112, 101, 99,  105, 102, 105, 101, 100, 32,  99,  111, 110, 115, 116,
    114, 97,  105, 110, 116, 115, 46,  34,  44,  32,  34,  68,  105, 115, 112,
    108, 97,  121, 78,  97,  109, 101, 34,  58,  32,  34,  84,  97,  98,  108,
    101, 32,  70,  105, 108, 116, 101, 114, 34,  44,  32,  34,  73,  99,  111,
    110, 34,  58,  32,  34,  58,  47,  105, 99,  111, 110, 115, 47,  116, 97,
    98,  108, 101, 45,  100, 101, 108, 101, 116, 101, 45,  114, 111, 119, 46,
    112, 110, 103, 34,  44,  32,  34,  78,  97,  109, 101, 34,  58,  32,  34,
    100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114,
    116, 46,  86,  111, 120, 105, 101, 46,  70,  105, 108, 116, 101, 114, 46,
    84,  97,  98,  108, 101, 70,  105, 108, 116, 101, 114, 34,  44,  32,  34,
    78,  111, 100, 101, 75,  105, 110, 100, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  78,  111, 100, 101, 75,  105, 110, 100, 46,  70,
    105, 108, 116, 101, 114, 34,  44,  32,  34,  80,  114, 111, 112, 101, 114,
    116, 105, 101, 115, 34,  58,  32,  123, 34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  73,  110, 112, 117, 116, 34,  58,  32,  123, 34,  65,  108, 108,
    111, 119, 101, 100, 78,  111, 100, 101, 80,  114, 111, 116, 111, 116, 121,
    112, 101, 115, 34,  58,  32,  91,  34,  100, 101, 46,  117, 110, 105, 95,
    115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101,
    46,  68,  97,  116, 97,  46,  84,  97,  98,  108, 101, 34,  93,  44,  32,
    34,  68,  105, 115, 112, 108, 97,  121, 78,  97,  109, 101, 34,  58,  32,
    34,  73,  110, 112, 117, 116, 34,  44,  32,  34,  84,  121, 112, 101, 34,
    58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116,
    103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111, 112,
    101, 114, 116, 121, 84,  121, 112, 101, 46,  78,  111, 100, 101, 82,  101,
    102, 101, 114, 101, 110, 99,  101, 76,  105, 115, 116, 34,  125, 44,  32,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  79,  117, 116, 112, 117, 116,
    34,  58,  32,  123, 34,  65,  108, 108, 111, 119, 101, 100, 78,  111, 100,
    101, 80,  114, 111, 116, 111, 116, 121, 112, 101, 115, 34,  58,  32,  91,
    34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,
    114, 116, 46,  86,  111, 120, 105, 101, 46,  68,  97,  116, 97,  46,  84,
    97,  98,  108, 101, 34,  93,  44,  32,  34,  68,  105, 115, 112, 108, 97,
    121, 78,  97,  109, 101, 34,  58,  32,  34,  79,  117, 116, 112, 117, 116,
    34,  44,  32,  34,  84,  121, 112, 101, 34,  58,  32,  34,  100, 101, 46,
    117, 110, 105, 95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,
    111, 120, 105, 101, 46,  80,  114, 111, 112, 101, 114, 116, 121, 84,  121,
    112, 101, 46,  79,  117, 116, 112, 117, 116, 78,  111, 100, 101, 82,  101,
    102, 101, 114, 101, 110, 99,  101, 34,  125, 125, 44,  32,  34,  82,  117,
    110, 70,  105, 108, 116, 101, 114, 69,  110, 97,  98,  108, 101, 100, 67,
    111, 110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123, 34,  67,  111,
    110, 100, 105, 116, 105, 111, 110, 34,  58,  32,  123, 34,  80,  114, 111,
    112, 101, 114, 116, 121, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105,
    95,  115, 116, 117, 116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105,
    101, 46,  73,  110, 112, 117, 116, 34,  44,  32,  34,  84,  121, 112, 101,
    34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117, 116,
    116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114, 111,
    112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111, 110, 46,
    73,  115, 69,  109, 112, 116, 121, 34,  125, 44,  32,  34,  84,  121, 112,
    101, 34,  58,  32,  34,  100, 101, 46,  117, 110, 105, 95,  115, 116, 117,
    116, 116, 103, 97,  114, 116, 46,  86,  111, 120, 105, 101, 46,  80,  114,
    111, 112, 101, 114, 116, 121, 67,  111, 110, 100, 105, 116, 105, 111, 110,
    46,  78,  111, 116, 34,  125, 44,  32,  34,  84,  114, 111, 118, 101, 67,
    108, 97,  115, 115, 105, 102, 105, 101, 114, 115, 34,  58,  32,  91,  34,
    68,  101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 32,  83,  116, 97,
    116, 117, 115, 32,  58,  58,  32,  53,  32,  45,  32,  80,  114, 111, 100,
    117, 99,  116, 105, 111, 110, 47,  83,  116, 97,  98,  108, 101, 34,  93,
    125, 0};
const char* TableFilterProperties::_getPrototypeJson() {
  return _prototype_TableFilter_;
}

TableFilterProperties::~TableFilterProperties() {}

QList<vx::Node*> TableFilterProperties::input() {
  return vx::PropertyValueConvertRaw<QList<QDBusObjectPath>, QList<vx::Node*>>::
      fromRaw(_node->getNodePropertyTyped<QList<QDBusObjectPath>>(
          "de.uni_stuttgart.Voxie.Input"));
}
QList<QDBusObjectPath> TableFilterProperties::inputRaw() {
  return _node->getNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Input");
}
QSharedPointer<NodeProperty> TableFilterProperties::inputProperty() {
  return TableFilterProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Input", false);
}
NodePropertyTyped<vx::types::NodeReferenceList>
TableFilterProperties::inputPropertyTyped() {
  return NodePropertyTyped<vx::types::NodeReferenceList>(inputProperty());
}
void TableFilterProperties::setInput(QList<vx::Node*> value) {
  _node->setNodePropertyTyped<QList<QDBusObjectPath>>(
      "de.uni_stuttgart.Voxie.Input",
      vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                  QList<vx::Node*>>::toRaw(value));
}
vx::Node* TableFilterProperties::output() {
  return vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
      _node->getNodePropertyTyped<QDBusObjectPath>(
          "de.uni_stuttgart.Voxie.Output"));
}
QDBusObjectPath TableFilterProperties::outputRaw() {
  return _node->getNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Output");
}
QSharedPointer<NodeProperty> TableFilterProperties::outputProperty() {
  return TableFilterProperties::getNodePrototype()->getProperty(
      "de.uni_stuttgart.Voxie.Output", false);
}
NodePropertyTyped<vx::types::OutputNodeReference>
TableFilterProperties::outputPropertyTyped() {
  return NodePropertyTyped<vx::types::OutputNodeReference>(outputProperty());
}
void TableFilterProperties::setOutput(vx::Node* value) {
  _node->setNodePropertyTyped<QDBusObjectPath>(
      "de.uni_stuttgart.Voxie.Output",
      vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::toRaw(value));
}
TableFilterProperties::TableFilterProperties(vx::Node* parent)
    : QObject(parent) {
  this->_node = parent;
  auto _prop_Input = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Input", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Input](const QSharedPointer<NodeProperty>& property,
                          const QVariant& value) {
        if (property != _prop_Input) return;
        QList<vx::Node*> valueCasted;
        try {
          valueCasted = vx::PropertyValueConvertRaw<QList<QDBusObjectPath>,
                                                    QList<vx::Node*>>::
              fromRaw(Node::parseVariant<QList<QDBusObjectPath>>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property \"de.uni_stuttgart.Voxie.Input\":"
                      << e.what();
          return;
        }
        Q_EMIT this->inputChanged(valueCasted);
      });
  auto _prop_Output = this->_node->prototype()->getProperty(
      "de.uni_stuttgart.Voxie.Output", false);
  QObject::connect(
      this->_node, &vx::Node::propertyChanged, this,
      [this, _prop_Output](const QSharedPointer<NodeProperty>& property,
                           const QVariant& value) {
        if (property != _prop_Output) return;
        vx::Node* valueCasted;
        try {
          valueCasted =
              vx::PropertyValueConvertRaw<QDBusObjectPath, vx::Node*>::fromRaw(
                  Node::parseVariant<QDBusObjectPath>(value));
        } catch (vx::Exception& e) {
          qCritical() << "Error while parsing property value for event handler "
                         "for property \"de.uni_stuttgart.Voxie.Output\":"
                      << e.what();
          return;
        }
        Q_EMIT this->outputChanged(valueCasted);
      });
}

}  // namespace filter_prop
}  // namespace vx
