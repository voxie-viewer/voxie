// This file was automatically generated by tools/update-node-prototypes.py
// All changes to this file will be lost

#pragma once

#include <QtCore/QJsonObject>
#include <QtCore/QList>
#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtGui/QQuaternion>
#include <QtGui/QVector3D>
#include <Voxie/Data/Color.hpp>
#include <Voxie/Data/ColorizerEntry.hpp>
#include <Voxie/Node/Node.hpp>
#include <Voxie/Node/Types.hpp>
#include <VoxieBackend/Data/DataType.hpp>

namespace vx {
#ifndef VOXIE_PROP_DEFINED_Algorithm
#define VOXIE_PROP_DEFINED_Algorithm
namespace PropType {
class Algorithm : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Algorithm Algorithm = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Input
#define VOXIE_PROP_DEFINED_Input
namespace PropType {
class Input : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Input Input = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_InputColorizer
#define VOXIE_PROP_DEFINED_InputColorizer
namespace PropType {
class InputColorizer : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::InputColorizer InputColorizer = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_InputSurface
#define VOXIE_PROP_DEFINED_InputSurface
namespace PropType {
class InputSurface : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::InputSurface InputSurface = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_InputTable
#define VOXIE_PROP_DEFINED_InputTable
namespace PropType {
class InputTable : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::InputTable InputTable = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_InputVolume
#define VOXIE_PROP_DEFINED_InputVolume
namespace PropType {
class InputVolume : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::InputVolume InputVolume = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_LabelVolume
#define VOXIE_PROP_DEFINED_LabelVolume
namespace PropType {
class LabelVolume : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::LabelVolume LabelVolume = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Output
#define VOXIE_PROP_DEFINED_Output
namespace PropType {
class Output : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Output Output = {};
}
#endif
#ifndef VOXIE_PROP_DEFINED_Threshold
#define VOXIE_PROP_DEFINED_Threshold
namespace PropType {
class Threshold : public vx::PropTypeBase {};
}  // namespace PropType
namespace Prop {
constexpr vx::PropType::Threshold Threshold = {};
}
#endif
inline namespace filter_prop {
class ColorizeLabeledSurfacePropertiesEntry : public vx::PropertiesEntryBase {
  ColorizeLabeledSurfacePropertiesEntry() = delete;

 public:
  ~ColorizeLabeledSurfacePropertiesEntry();
  ColorizeLabeledSurfacePropertiesEntry(vx::PropType::InputColorizer,
                                        QList<vx::ColorizerEntry>);
  ColorizeLabeledSurfacePropertiesEntry(vx::PropType::InputSurface, vx::Node*);
  ColorizeLabeledSurfacePropertiesEntry(vx::PropType::InputTable, vx::Node*);
  ColorizeLabeledSurfacePropertiesEntry(vx::PropType::Output, vx::Node*);
};
class ColorizeLabeledSurfacePropertiesBase {
 public:
  virtual ~ColorizeLabeledSurfacePropertiesBase();
  virtual QList<vx::ColorizerEntry> inputColorizer() = 0;
  virtual QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  inputColorizerRaw() = 0;
  virtual vx::Node* inputSurface() = 0;
  virtual QDBusObjectPath inputSurfaceRaw() = 0;
  virtual vx::Node* inputTable() = 0;
  virtual QDBusObjectPath inputTableRaw() = 0;
  virtual vx::Node* output() = 0;
  virtual QDBusObjectPath outputRaw() = 0;
};
class ColorizeLabeledSurfacePropertiesCopy
    : public ColorizeLabeledSurfacePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  ColorizeLabeledSurfacePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QList<vx::ColorizerEntry> inputColorizer() override final;
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  inputColorizerRaw() override final;
  vx::Node* inputSurface() override final;
  QDBusObjectPath inputSurfaceRaw() override final;
  vx::Node* inputTable() override final;
  QDBusObjectPath inputTableRaw() override final;
  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
};
class ColorizeLabeledSurfaceProperties
    : public QObject,
      public ColorizeLabeledSurfacePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  ColorizeLabeledSurfaceProperties(vx::Node* parent);
  ~ColorizeLabeledSurfaceProperties();

  QList<vx::ColorizerEntry> inputColorizer() override final;
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  inputColorizerRaw() override final;
  static QSharedPointer<NodeProperty> inputColorizerProperty();
  static NodePropertyTyped<vx::types::ValueColorMapping>
  inputColorizerPropertyTyped();
  void setInputColorizer(QList<vx::ColorizerEntry> value);
 Q_SIGNALS:
  void inputColorizerChanged(QList<vx::ColorizerEntry> value);

 public:
  // Q_PROPERTY(QList<vx::ColorizerEntry> InputColorizer READ inputColorizer
  // WRITE setInputColorizer NOTIFY inputColorizerChanged)

  vx::Node* inputSurface() override final;
  QDBusObjectPath inputSurfaceRaw() override final;
  static QSharedPointer<NodeProperty> inputSurfaceProperty();
  static NodePropertyTyped<vx::types::NodeReference>
  inputSurfacePropertyTyped();
  void setInputSurface(vx::Node* value);
 Q_SIGNALS:
  void inputSurfaceChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* InputSurface READ inputSurface WRITE setInputSurface
  // NOTIFY inputSurfaceChanged)

  vx::Node* inputTable() override final;
  QDBusObjectPath inputTableRaw() override final;
  static QSharedPointer<NodeProperty> inputTableProperty();
  static NodePropertyTyped<vx::types::NodeReference> inputTablePropertyTyped();
  void setInputTable(vx::Node* value);
 Q_SIGNALS:
  void inputTableChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* InputTable READ inputTable WRITE setInputTable NOTIFY
  // inputTableChanged)

  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
  static QSharedPointer<NodeProperty> outputProperty();
  static NodePropertyTyped<vx::types::OutputNodeReference>
  outputPropertyTyped();
  void setOutput(vx::Node* value);
 Q_SIGNALS:
  void outputChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Output READ output WRITE setOutput NOTIFY
  // outputChanged)
};

}  // namespace filter_prop
inline namespace filter_prop {
class ColorizeSurfaceFromAttributePropertiesEntry
    : public vx::PropertiesEntryBase {
  ColorizeSurfaceFromAttributePropertiesEntry() = delete;

 public:
  ~ColorizeSurfaceFromAttributePropertiesEntry();
  ColorizeSurfaceFromAttributePropertiesEntry(vx::PropType::InputColorizer,
                                              QList<vx::ColorizerEntry>);
  ColorizeSurfaceFromAttributePropertiesEntry(vx::PropType::InputSurface,
                                              vx::Node*);
  ColorizeSurfaceFromAttributePropertiesEntry(vx::PropType::Output, vx::Node*);
};
class ColorizeSurfaceFromAttributePropertiesBase {
 public:
  virtual ~ColorizeSurfaceFromAttributePropertiesBase();
  virtual QList<vx::ColorizerEntry> inputColorizer() = 0;
  virtual QList<
      std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  inputColorizerRaw() = 0;
  virtual vx::Node* inputSurface() = 0;
  virtual QDBusObjectPath inputSurfaceRaw() = 0;
  virtual vx::Node* output() = 0;
  virtual QDBusObjectPath outputRaw() = 0;
};
class ColorizeSurfaceFromAttributePropertiesCopy
    : public ColorizeSurfaceFromAttributePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  ColorizeSurfaceFromAttributePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QList<vx::ColorizerEntry> inputColorizer() override final;
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  inputColorizerRaw() override final;
  vx::Node* inputSurface() override final;
  QDBusObjectPath inputSurfaceRaw() override final;
  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
};
class ColorizeSurfaceFromAttributeProperties
    : public QObject,
      public ColorizeSurfaceFromAttributePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  ColorizeSurfaceFromAttributeProperties(vx::Node* parent);
  ~ColorizeSurfaceFromAttributeProperties();

  QList<vx::ColorizerEntry> inputColorizer() override final;
  QList<std::tuple<double, std::tuple<double, double, double, double>, qint32>>
  inputColorizerRaw() override final;
  static QSharedPointer<NodeProperty> inputColorizerProperty();
  static NodePropertyTyped<vx::types::ValueColorMapping>
  inputColorizerPropertyTyped();
  void setInputColorizer(QList<vx::ColorizerEntry> value);
 Q_SIGNALS:
  void inputColorizerChanged(QList<vx::ColorizerEntry> value);

 public:
  // Q_PROPERTY(QList<vx::ColorizerEntry> InputColorizer READ inputColorizer
  // WRITE setInputColorizer NOTIFY inputColorizerChanged)

  vx::Node* inputSurface() override final;
  QDBusObjectPath inputSurfaceRaw() override final;
  static QSharedPointer<NodeProperty> inputSurfaceProperty();
  static NodePropertyTyped<vx::types::NodeReference>
  inputSurfacePropertyTyped();
  void setInputSurface(vx::Node* value);
 Q_SIGNALS:
  void inputSurfaceChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* InputSurface READ inputSurface WRITE setInputSurface
  // NOTIFY inputSurfaceChanged)

  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
  static QSharedPointer<NodeProperty> outputProperty();
  static NodePropertyTyped<vx::types::OutputNodeReference>
  outputPropertyTyped();
  void setOutput(vx::Node* value);
 Q_SIGNALS:
  void outputChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Output READ output WRITE setOutput NOTIFY
  // outputChanged)
};

}  // namespace filter_prop
inline namespace filter_prop {
class CreateSurfacePropertiesEntry : public vx::PropertiesEntryBase {
  CreateSurfacePropertiesEntry() = delete;

 public:
  ~CreateSurfacePropertiesEntry();
  CreateSurfacePropertiesEntry(vx::PropType::Algorithm, QString);
  CreateSurfacePropertiesEntry(vx::PropType::InputVolume, vx::Node*);
  CreateSurfacePropertiesEntry(vx::PropType::LabelVolume, vx::Node*);
  CreateSurfacePropertiesEntry(vx::PropType::Threshold, double);
  CreateSurfacePropertiesEntry(vx::PropType::Output, vx::Node*);
};
class CreateSurfacePropertiesBase {
 public:
  virtual ~CreateSurfacePropertiesBase();
  virtual QString algorithm() = 0;
  virtual QString algorithmRaw() = 0;
  virtual vx::Node* inputVolume() = 0;
  virtual QDBusObjectPath inputVolumeRaw() = 0;
  virtual vx::Node* labelVolume() = 0;
  virtual QDBusObjectPath labelVolumeRaw() = 0;
  virtual double threshold() = 0;
  virtual double thresholdRaw() = 0;
  virtual vx::Node* output() = 0;
  virtual QDBusObjectPath outputRaw() = 0;
};
class CreateSurfacePropertiesCopy : public CreateSurfacePropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  CreateSurfacePropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QString algorithm() override final;
  QString algorithmRaw() override final;
  vx::Node* inputVolume() override final;
  QDBusObjectPath inputVolumeRaw() override final;
  vx::Node* labelVolume() override final;
  QDBusObjectPath labelVolumeRaw() override final;
  double threshold() override final;
  double thresholdRaw() override final;
  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
};
class CreateSurfaceProperties : public QObject,
                                public CreateSurfacePropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  CreateSurfaceProperties(vx::Node* parent);
  ~CreateSurfaceProperties();

  QString algorithm() override final;
  QString algorithmRaw() override final;
  static QSharedPointer<NodeProperty> algorithmProperty();
  static NodePropertyTyped<vx::types::String> algorithmPropertyTyped();
  void setAlgorithm(QString value);
 Q_SIGNALS:
  void algorithmChanged(QString value);

 public:
  // Q_PROPERTY(QString Algorithm READ algorithm WRITE setAlgorithm NOTIFY
  // algorithmChanged)

  vx::Node* inputVolume() override final;
  QDBusObjectPath inputVolumeRaw() override final;
  static QSharedPointer<NodeProperty> inputVolumeProperty();
  static NodePropertyTyped<vx::types::NodeReference> inputVolumePropertyTyped();
  void setInputVolume(vx::Node* value);
 Q_SIGNALS:
  void inputVolumeChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* InputVolume READ inputVolume WRITE setInputVolume
  // NOTIFY inputVolumeChanged)

  vx::Node* labelVolume() override final;
  QDBusObjectPath labelVolumeRaw() override final;
  static QSharedPointer<NodeProperty> labelVolumeProperty();
  static NodePropertyTyped<vx::types::NodeReference> labelVolumePropertyTyped();
  void setLabelVolume(vx::Node* value);
 Q_SIGNALS:
  void labelVolumeChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* LabelVolume READ labelVolume WRITE setLabelVolume
  // NOTIFY labelVolumeChanged)

  double threshold() override final;
  double thresholdRaw() override final;
  static QSharedPointer<NodeProperty> thresholdProperty();
  static NodePropertyTyped<vx::types::Float> thresholdPropertyTyped();
  void setThreshold(double value);
 Q_SIGNALS:
  void thresholdChanged(double value);

 public:
  // Q_PROPERTY(double Threshold READ threshold WRITE setThreshold NOTIFY
  // thresholdChanged)

  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
  static QSharedPointer<NodeProperty> outputProperty();
  static NodePropertyTyped<vx::types::OutputNodeReference>
  outputPropertyTyped();
  void setOutput(vx::Node* value);
 Q_SIGNALS:
  void outputChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Output READ output WRITE setOutput NOTIFY
  // outputChanged)
};

}  // namespace filter_prop
inline namespace filter_prop {
class TableFilterPropertiesEntry : public vx::PropertiesEntryBase {
  TableFilterPropertiesEntry() = delete;

 public:
  ~TableFilterPropertiesEntry();
  TableFilterPropertiesEntry(vx::PropType::Input, QList<vx::Node*>);
  TableFilterPropertiesEntry(vx::PropType::Output, vx::Node*);
};
class TableFilterPropertiesBase {
 public:
  virtual ~TableFilterPropertiesBase();
  virtual QList<vx::Node*> input() = 0;
  virtual QList<QDBusObjectPath> inputRaw() = 0;
  virtual vx::Node* output() = 0;
  virtual QDBusObjectPath outputRaw() = 0;
};
class TableFilterPropertiesCopy : public TableFilterPropertiesBase {
  QSharedPointer<const QMap<QString, QVariant>> _properties;

 public:
  TableFilterPropertiesCopy(
      const QSharedPointer<const QMap<QString, QVariant>>& properties);
  QList<vx::Node*> input() override final;
  QList<QDBusObjectPath> inputRaw() override final;
  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
};
class TableFilterProperties : public QObject, public TableFilterPropertiesBase {
  Q_OBJECT
  vx::Node* _node;

 public:
  static const char* _getPrototypeJson();
  static QSharedPointer<vx::NodePrototype> getNodePrototype();
  TableFilterProperties(vx::Node* parent);
  ~TableFilterProperties();

  QList<vx::Node*> input() override final;
  QList<QDBusObjectPath> inputRaw() override final;
  static QSharedPointer<NodeProperty> inputProperty();
  static NodePropertyTyped<vx::types::NodeReferenceList> inputPropertyTyped();
  void setInput(QList<vx::Node*> value);
 Q_SIGNALS:
  void inputChanged(QList<vx::Node*> value);

 public:
  // Q_PROPERTY(QList<vx::Node*> Input READ input WRITE setInput NOTIFY
  // inputChanged)

  vx::Node* output() override final;
  QDBusObjectPath outputRaw() override final;
  static QSharedPointer<NodeProperty> outputProperty();
  static NodePropertyTyped<vx::types::OutputNodeReference>
  outputPropertyTyped();
  void setOutput(vx::Node* value);
 Q_SIGNALS:
  void outputChanged(vx::Node* value);

 public:
  // Q_PROPERTY(vx::Node* Output READ output WRITE setOutput NOTIFY
  // outputChanged)
};

}  // namespace filter_prop
}  // namespace vx
